Nyothiri Aung, Sahraoui Dhelim, Liming Chen, Wenyin Zhang, Abderrahmane Lakas and Huansheng Ning Abstract—Vehicular social networking is an emerging application of the promising Internet of Vehicles (IoV) which aims to achieve the seamless integration of vehicular networks and social networks. However, the unique characteristics of vehicular networks such as high mobility and frequent communication interruptions make content delivery to end-users under strict delay constrains an extremely challenging task. In this paper, we propose a social-aware vehicular edge computing architecture that solves the content delivery problem by using some of the vehicles in the network as edge servers that can store and stream popular content to close-by end-users. The proposed architecture includes three components. First, we propose a social-aware graph pruning search algorithm that computes and assigns the vehicles to the shortest path with the most relevant vehicular content providers. Secondly, we use a trafﬁcaware content recommendation scheme to recommend relevant content according to their social context. This scheme uses graph embeddings in which the vehicles are represented by a set of low-dimension vectors (vehicle2vec) to store information about previously consumed content. Finally, we propose a Deep Reinforcement Learning (DRL) method to optimize the content provider vehicles distribution across the network. The results obtained from a realistic trafﬁc simulation show the effectiveness and robustness of the proposed system when compared to the state-of-the-art baselines. Index Terms—IoV, Vehicular social networks, Path planning, Social computing, Vehicular edge computing, Content caching, Social-Aware,. ITH the emergence of Internet of Vehicles (IoV) as a new networking paradigm that interconnect the vehicles with the ubiquitous Internet of Things (IoT) network, and the increasing adoption of 5G network in many countries, the vision of Intelligent Transportation System (ITS) is closer to realization than ever. The IoV network is expected to enhance many application domains and offer a plethora of smart services, ranging from essential emergence services to entertainment applications. Currently there are more than 1.4 billion vehicles worldwide, and this ﬁgure is expected to reach 3 billion in 2037 [1], which will worsen the existing trafﬁc congestion problem. As more and more people spend hours in trafﬁc congestion, they turn to social media and other entertainment services to spend the waiting time [2]. The IoV can offer an alternative to connect the users with the Internet, and seamlessly interconnect their existing social networks to a vehicular social networking model, that brings social content near to passengers and reduce the expensive access to 4G/5G network. One of the most challenging problems in such vehicular social networking model is how to enable passengers to seamlessly access social network content without interruptions and content delivery delay. In vehicular networks, the content can be delivered through Vehicle to Infrastructure (V2I) communication with the Roadside Units (RSU) that is connected to the Internet, or through cellular base station using 4G/5G interface. The former method has the advantage of low costs and convenient communication but suffers from the drawback of difﬁcult access, and a vehicle also needs to rely on Vehicle-to-Vehicle (V2V) communication to reach the sparse RSUs. While the latter has the advantage of wide coverage and instance access, it has the drawback of expensive communication [3]. The intuitive approach is to store the content of social network on a centralized server on the cloud, and the vehicles can access it through V2I communication or by downloading it using 4G/5G cellular network. Nonetheless, V2I communication is not suitable for live streaming due to the high speed of vehicles and the frequent disconnections between vehicles and RSU [4]. On the other hand, the vehicle to base station communication is more stable compared to V2I communication, but not suitable for large ﬁle download due to high cost of network usage [5]. Motivated by the above-mentioned limitations, in this paper, we propose trafﬁc-aware VEhicular SOcial NETwork (VeSoNet) content caching architecture that leverages vehicular edge computing paradigm to store and distribute the social content in vehicles, and bring the most popular content nearby end-users and cache it in the vehicles for future access. Our contributions can be summarized as follow: scheme, where only the popular data content is replicated and stored in data provider vehicles to minimize download time, and the content provider vehicles follow vehicular edge computing paradigm to deliver the requested content. rithm that computes and assigns the content consumer vehicles to the shortest path with the most relevant content providers, and leverage a Deep Reinforcement Learning DRL model to optimize content provider vehicles distribution across the network. proach based on graph embeddings named vehicle2vec, where vehicles are represented by a set of low dimensional vectors of their previously consumed content. The rest of the paper is organized as follows: In Section 2, we review the literature of content caching and content delivery using vehicular edge computing, as well as social vehicular networks. In Section 3, we present the main components of the proposed vehicular network architecture. Section 4 details the system modeling of the proposed system. While in Section 5, we present the experimental evaluation and discuss the obtained results. Finally, we conclude the paper in Section Many previous studies have proposed different architectural designs for content delivery in vehicular networks. Dzyiauddin et al. [6] surveyed computational ofﬂoading and content delivery and caching in vehicular edge computing, including the architectures, communication layers and applications of vehicular edge computing for content delivery and content caching. Zhang et al. [7] introduced a social-aware mobile edge computing architecture for content caching, where they employed DRL model, their proposed method takes advantage of the relationships among vehicles and RSUs to perform content dissemination with diverse vehicular social characteristics for urban environments. Whereas in other work [8], they extended their model by introducing digital twin technology to map the edge caching system into cyberspace, and used vehicular cloud to coordinate the correlation of the cached content among multiple vehicles, then employed deep-learning based route selection method that considers the social context, the vehicular cloud formation and cache resource allocation. Similarly, Qiao et al. [9] introduced a cooperative vehicular edge caching system to jointly optimize the content delivery and content placement in the vehicular edge computing environment, with the aid of ﬂexible cooperation between cellular stations, RSUs, and vehicular nodes. In this system, the joint optimization problem is modelled as a double timescale Markov decision process (DTS-MDP). Zhou et al. [10] introduced a new content delivery architecture by utilizing the 5G edge networks, where the content caching and data prefetching methods are discussed. They furthermore studied the comprehensive dynamic link utilization problem in 5G edge networks from the perspectives of network operator, as well as vehicle users. Luo et al. [11] introduced EdgeVCD, an intelligent algorithm-inspired content distribution mechanism, which uses a dual-importance (DI) evaluation method to reﬂect the relationship between the Priority of Vehicles (PoV) and the Priority of Contents (PoC), and formulate an optimization problem to maximize the system utility for content distribution De Souza et al. [12] proposed Safe and Sound (SNS), which uses a hybrid architecture and a cooperative re-routing method to enhance the system computation performance and scalability. SNS utilizes a recurrent neural network (RRN) to predict future safety risks dynamics, as well as to offer a customized re-routing in which every vehicle choose the risks to avoid. When the trafﬁc server detects a congestion road, it notiﬁes the incoming vehicles by sending the trafﬁc report to all vehicles that their path cross through this road segment. The purpose of SNS’s re-routing strategy is to balance the trafﬁc ﬂow over a set of alternative paths for every vehicle based on their current and ﬁnal positions, as well as their preferences. Soua et al. [13] proposed a vehicular social networking architecture that combines content centric networking (CCN) model, Floating Content (CF), and Software Deﬁned Networking (SDN) to offer a multi-pronged approach for adaptive content delivery. Where the interest in a given data content includes the location and name of the content requester. Intermediate nodes that receive the content interest message check their local content store (CS), and in case the requested content is not available in CS, they forward the message and trigger a timer. When the interest timer is expired, they retransmit the content interest message and update their pending interest table (PIT) accordingly. While the FC is used to support geographic content routing. A SDN controller is leveraged to operate a direct path between content requester and content provider, which is similar to the dynamic unicast method. Alowish et al. [14] proposed content delivery architecture of vehicular networks named Cuckoo, in which the content is delivered by the RSU with the help of controller nodes. To deliver the content the RSU selects the optimal route by fetching the location of the data provider through the controller node. The optimal route selection is computed using the cuckoo search algorithm. Similarly, Zhao et al. [15] proposed DP-IB, a vehicular content delivery system that uses a data pouring and buffering mechanism for content dissemination in VANET, where data contents are sent by the source node are buffered along the way and rebroadcasted in the road intersections. The main idea behind Data Pouring (DP) is instead of broadcasting the content data to the whole network, the scheme only sends the disseminated content to few road segments known as axis roads (A-Roads). The ARoads are chosen as the main roads where the data center is located, and these road segments usually have denser trafﬁc ﬂow than other roads. While the Intersection Buffering (IB) means that the scheme also disseminate the content to nodes traveling along the crossing roads (C-Roads) that intersect with the A-Roads. To deal with the privacy leakage problem in social vehicular networks, Zhang et al. [16] introduced a distributed location privacy-preserving spatial crowdsourcing method for IoV, which enable vehicular nodes to take part of the spatial crowdsourcing and guarantee the privacy of task’s location information. They employed blockchain to record the user data without the need for a centralized spatial crowdsourcing server. While Kang et al. [17] investigated the usage of blockchain and smart contract to improve the data storage security during content sharing among vehicles in vehicular edge networks. They concluded that blockchain technology can help achieving content sharing without authorization, furthermore, they introduced a reputation-based content sharing scheme to guarantee the data quality shared among vehicular nodes. In vehicular networks, the content can be delivered through V2I connection with the RSU that is connected to the Internet, or though the cellular base station using 4G/5G interface [18]. The former method has the advantage of being cheap and convenient communication method but difﬁcult to access directly, and the vehicle need to rely on V2V communication to reach the sparse RSUs [19]. While the latter has the advantage of wide coverage and instance access, but the drawback of expensive communication [20]. To solve this problem, VeSoNet leverages a hybrid data distribution approach, where only the popular data content is replicated and store in data provider vehicles to minimize the download time and avoid excessive simultaneous downloads from 4G/5G networks. In this regard, we distinguish three types of vehicular nodes, (1) content consumer vehicles which form the majority of the vehicles in the network, and represent the end-user of the system. (2) content provider vehicles: vehicles that store the social network data, their objective is to maximize their revenue by delivering data content to content consumer vehicles as they travel through the city. (3) metadata vehicles: vehicles that are situated in busy locations across the city, they provide information about content location, and perform various computational tasks, such as shortest social path calculation, content similarity calculation. For example, in Fig. 1. content consumer vehicles are colored in yellow, content provider vehicles are colored in blue and meta-data servers are colored in green. Note that meta-data servers are chosen at busy locations across the city such as parking lots, where vehicles are always present and not moving frequently which ensures the quality of content lookup service. Metadata server vehicles maintain a content indexing table that contains a list of available contents in the network, and a list of content provider vehicles that stores these contents; as well as, trafﬁc information about these data provider vehicles, such as their expected path, and the latest reported location. Content providers send frequent updates to meta-data severs to update their location and their expected travel path. To deliver the data content to data consumer vehicles, VeSoNet follows Information Centric Networking (ICN) model. When a data consumer vehicle is interested in a given content, it creates an interest packet regarding the desired content that contains the content identiﬁer as well as the trafﬁc information of the requesting vehicle, such as the expected travel path. The interest packet is broadcasted to all neighboring nodes and forwarded to other nodes until it reaches either a content provider node that stores this content, or meta-data vehicle that knows in which data provider vehicle this content is stored. When an intermediate node receives an interest packet and it does not stores the requested content, it forward the interest packet to the nearest meta-data vehicles. In the case where none of the data provider vehicles has the requested content, the content is downloaded from external network through RSU and forwarded back to the requester vehicle, and backed up in data provider vehicles for future requests. The proposed framework leverages trafﬁc information and change vehicles’ traveling path to bring the content consumers close to content providers, hence enhancing content delivery experience. As a content provider takes the same path with content consumers, the delivery delay is signiﬁcantly reduced. For instance in Fig. 2, a content consumer is traveling from the source location (S) to the destination location (D). Although the path P1 is the shortest path, P2 is recommended since it contains more content providers, and does not exceed the rerouting threshold as P3 does. Formally, let P= {I→ I, . . . , I→ I} be the shortest path computed based only on trafﬁc information, without considering the availability of content providers, Iand Iare the starting intersection (source intersection) and destination intersection respectively. The objective is to compute the alternative social-aware shortest path Pthat maximizes the number of content providers for the current vehicle during its trip, under the constrain that the difference between shortest travel time τ (P) and social path τ (P) is less than the path optimization threshold ε. The na¨ıve approach is to recompute the shortest path between the starting Iand Iand consider the social path that maximizes the content providers and satisfy the path optimization threshold ε. However, this approach is computationally expensive, therefore, a graph pruning search algorithm that computes the social path as presented in Algorithm 1. The proposed algorithm is computationally efﬁcient, as it leverages path pruning technique to eliminate the paths that exceed the path optimization threshold ε, hence minimize the search domain. The Algorithm takes the trafﬁc-only shortest path and go through each road segment, by keeping track of the current processed intersection n(current node) and the next intersection n(next node). In this context, P (temporary social path) is deﬁned as the optimal social path between nand nthat satisﬁes the path optimization constrain. P(partial social path) is deﬁned as the optimal social path between the starting intersection I(source node) and the next intersection n. P(candidate social path) is deﬁned as the concatenation of currently known optimal social path from the starting intersection Itill the next intersection n(note that this path is dynamically changing, as the alternative social-aware shortest path Pis updated over the time) and the temporary social path P. After computing the afore-mentioned paths, if they newly found partial social path Psatisﬁes the path optimization threshold constrain (τ (P) − τ (P) ≤ ε), and the content providers in P is more than those in P, then Pis set as P. Otherwise, Pupdated to include the newly found P. The computation of alternative social path between two intersections is computed as shown in Algorithm 2 where it keeps track of the currently found optimal path Pand its travel time tand data providers so, as well as a set that marks the previously visited nodes V IST . The core idea of the proposed graph pruning algorithm is to start from the starting node (intersection) and recursively evaluate the neighbors (n) , and stop the evaluation once the current road segment proves to exceed the path optimization threshold ε or the current processed node have been previously visited and we already know the rest of branches’ outcome. In such way, the search space is considerably minimized, which reduce the computational cost of ﬁnding alternative social-aware path. Given a data provider vehicular node vthat stores the set of social content items c= {c, c, . . . , c}, and is taking the path p= {i, i, . . . , i}, and the expected consumer vehicles Λ(v) when vcrosses p. At each trafﬁc light stop of the road intersections in p, vtries to request Input P= {I→ I, . . . , I→ I} Output P, . . . , I→ ← τ(P[s  d]) ((n∈ V IST ) AN D (V IST [n.t] ≤ t) AND (V IST [n.so] ≥ so) then the recommended content items stored in other nearby content providers. Formally, let vbe a nearby content providers that stores the set of social content items c= {c, c, . . . , c}. Given the previously viewed/liked content items of each consumer vehicle in Λ(v), which items in care most likely be viewed/liked by the consumer vehicles Λ(v). We formulate this situation as link prediction problem, where the objective is to predict the existing of potential links between the previously consumed content of expected consumer vehicles and the available content in nearby content provider vehicles. Since the waiting time in intersections is relatively short, therefore computing the potential links to recommended content for download using classical ﬁltering recommendation methods, such as matrix factorization using collaborative ﬁltering is not suitable in this situation. That is because such methods computational expensive and require knowledge about all the consumption history of all other vehicles in the systems to ﬁnd the recommendation neighborhood. Therefore, we propose a graph embeddings based content recommendation approach named vehicle2vec, where the vehicles are represented by a set of low dimensional vectors of the previously consumed content. vehicle2vec ﬁrst learns the feature representations of each content available in the system, the content network is represented as graph data structure, where the nodes represent the data content and the edge represent the content similarity between these nodes. To learn the content nodes embeddings, vehicle2vec learns the content node low dimensional vector that preserves local neighborhoods of nodes in the original graph by solving an optimization problem [21]. In order to learn such content node embeddings, vehicle2vec leverages stochastic gradient descent (SGD) to optimize the objective function, hence learn the low dimensional representation. Formally, given the content network represented as graph structure G= (V, E), where Vare the data content nodes, and E⊆ (V× V) is the set of edges links the content nodes. The objective of network embedding learning is to represent each content nodes c ∈ V into a vector of low dimensional space R, which involve evaluating the mapping function f: V→ R, where d  |V| is the size of feature in low-dimensional space where the original network structure is preserved. To learn the network embeddings, for each content node c ∈ V, we compute the content network neighborhood N(c) ⊂ Vthat represent the semantically similar data content. We leverage the Skip-gram model of networks, hence the mapping function fcan be evaluated by optimizing the objective function presented in (1) According to the symmetry property in the feature space, where the proximity between every pair of nodes is symmetric. Therefore, the conditional likelihood between every content node and its neighbors can be modelled as softmax unit where the parameter is the dot product of the nodes’ feature vectors, as shown in (2) Pr (n| f(c)) =exp(f(n) · f(c))Pexp(f(m) · f(c))(2) In VeSoNet, every consumer vehicle is represented its vehicle2vec matrix that incorporate all the embedding feature of the previously consumed content. The content recommendation algorithm is described in Algorithm 4. where vis the data provider that is taking the path p.In each intersection in p, vchecks the content available in every content provider vehicle v, and compute its similarity with the vehicle2vec low space features of all its expected content consumer vehicles Λ (v), if the similarity is greater than the content similarity threshold α, then that content item is downloaded during the intersection waiting time. The problem of computing the minimum-cost combined sequence of routes serving a given number of customers is traditionally known as the vehicle routing problem (VRP), which is considered an NP-hard problem [22]. Recently, various optimization algorithms have been proposed as an alternative where a sub-obtimal solution is computed under given constraints, such as ﬁreﬂy algorithm [23], genetic algorithm [24] or hybrid algorithm [25]. However, in these heuristic optimization algorithms compute the optimal solution under the assumption of stable trafﬁc condition. Unlike the traditional VRP problem, in our situation the trafﬁc ﬂow is Input v, P Output R constantly changing over the time, and the search for solution is performed under dynamic trafﬁc condition. In our case, a given content provider vehicle vthat is traveling from starting position P oSand traveling to P oSthrough the path p, the objective of vis to maximize its revenue that is generate from the advertisements delivered to the content consumers. The intuitive approach will be to choose road that maximize the number of content consumer vehicles, but if the same road contain large number of data provider vehicles, which will minimize the generated revenue. We deﬁne the content deliverability CD (r, t) in road segment rat time slot t as the difference number of content consumer vehicles (CC) and content provider vehicles (CP), as shown in (3). We proposed a social-aware DRL approach to optimize the content provider vehicles distribution. Reinforcement learning models evaluate the action taken in each step in the system that change the states, and through reward and punishment; the agent learns to maximize the performance. In the proposed social-aware DRL model, the states represent the current road segment content deliverability. While the actions represent the navigation decision taken by content provider vehicles in road intersections during its travel path. And as the content provider vehicles’ objective is to maximize the content deliverability, the reward is computed as the difference of the old and new content deliverability value after taken that action, as shown in (4). The proposed model is trained using Deep Q-Network (DQN) approach, in which we leverage Q-learning system that is used to choose the optimal option for all state/action pairs by evaluation the Q value of that action, denoted as Q (s, a) as shown in (5), where srepresent the previous state, ais the previously taken action, and r denotes the obtained reward by taken that action, and γ denotes the discount factor. Q (s, a) = Q (s, a) + β (r + γ Q (s, a)) − Q (s, a) The input is fed into multilayer neural network that is used as function that maps the system state to the corresponding Q-value. After the training, the network is used to predict the optimal action to take in a given situation. At each intersection, in order to maximize the content deliverability reward r. As the content data provider is aiming to take the optimal action in current state s using the pre-trained network, as presented in (6), where maxQ(s, a) is the list Q-values yielded from the neural network output; Therefore, we choose the action that yielded the maximum rewards, as shown in (7) where s, a are the current action and state. All the training data is memorized, as it is stored replay buffer. Content provider vehicles explore the environment and take random actions and also by looking up the suggested value from Q-network, which is known as epsilon-greedy policy. The loss function is utilized to compute the squared difference between the predicted and actual values, hence the loss is minimized by updating the network weights, as shown in (8). L = (r + γ maxQ (s, a; θ) − Q(s, a; θ))(8) To simulated the proposed system, we have used the simulator of urban mobility (SUMO) [26] , version 0.30.0. For the network simulation, we have used OMNeT++ network simulator [27], version 5.0, and used the vehicular network framework Veins [28], version 4.6 on top of OMNeT++. We have used a real map of Greater London to simulate the trafﬁc, the map raw data were extracted from OpenStreetMap [29], the map was further processed by Netconvert tool to generate the road network that is used by SUMO to generate the trafﬁc. Table I shows a detailed description of the network simulation parameters. We have used Last.fm dataset [30] to simulate the social network content. The dataset contains the social networking and music listening information of more than 2k users. Vehicles are randomly placed in the map, and they travel to random destination location. Each vehicle is randomly associated with two users from Last.fm dataset, and we consider them as the passengers within that vehicle. Once the vehicle is added to the simulation, we ﬁrst measure the shortest path to its destination point, and estimate the required travel time, after that the vehicle is routed according to the shortest social path according to our proposed algorithm. To evaluate the performance of VeSoNet, we have compared it with the following systems described in related works: Cuckoo [14], Safe and Sound (SNS) [12], CCN-CF [13], and DP-IB [15]. The proposed system VeSoNet is compared to the afore-mentioned baselines using various metrics, the performance of each system will be assessed by the following evaluation metrics: Delivery delay: The time required to deliver the requested content, this metric is computed by measuring the time difference between the timestamp when the content consumer solicited the content and the timestamp when it actually received the content. Delivery rate: This metric is computed as a complementary of the delivery delay metric, since measuring the undelivered content delay will considerably increase the delay, hence prevent the accurate measurement of successfully delivered content. For this reason, the delivery rate is computed as a separate measure that represent the ratio of successfully delivered content from the total requested content. Travel time: The required time to travel from the starting location to the destination location. This metric is used to measure the additional travel time eventuated by taking alternative social path rather than the shortest travel path. Computation cost: This metric measures the number of computational operations required to perform the computational task of the system, such as path rerouting, content recommendation and trafﬁc prediction. Fig. 3 shows the average delivery delay of the studies systems in different settings. Where in Fig. 3 (a), we increase the velocity of the vehicles and observe the delivery delay, and in Fig. 3 (b), the trafﬁc density is increase to measure its impact on the delivery delay, and Fig. 3 (c) shows the average delivery delay values with different number of RSUs. In Fig. 3 (a), we can see that all the compared systems have relatively high delivery delay in low velocity environments (less than 20m/s). That is because in low velocity environments, the content requests, as well as the content delivery messages that rely on V2V are slowed down in store-andcarry situation, when there is no nearby vehicles. The moderate velocity settings (25m/s to 45 m/s) yield the shortest delivery delay for all systems. While in high velocity settings (more than 45 m/s), the delivery delay increases again. That comes as a result of the frequent disconnections due to the high velocity of the vehicles, which makes difﬁcult to establish V2V communication, hence increase the delivery time of content request and reply as well. In Fig. 3 (a), we can observe that the VeSoNet and other vehicle rerouting and path planning schemes (SNS and Cuckoo) clearly outperform the CCN-CF that does not leverage path planning or vehicle rerouting, and also outperform DP-IB, which relies on the A-Roads and CRoads intersection to deliver the content. That is because, in VeSoNet, the vehicle rerouting strategy brings the content provider and the content consumer vehicles near to each other’s, which eliminate the need for intermediate vehicles, SNS and Cuckoo also employ similar rerouting strategies. Fig. 3 (b) shows the average delivery delay in different vehicle density environments. In which we can observe that all the studied systems have longer delivery delay in low-density environments (10-50 vehicles), that is because in such sparse environments, it become extremely difﬁcult to forward messages between vehicles, where the vehicles need to travel long distance to ﬁnd other forwarder vehicles. However, the deliver delay is considerably shortened in high-density environments (more than 100 vehicles). VeSoNet still have the upper hand compared to other baselines, that is due to the social-aware rerouting strategy and also popular content replication method, as the density increases, the demand for such popular content increases accordingly, which contribute to the decrease of average delivery delay. Fig. 3 (c) shows the average delivery delay with different number of deployed RSUs. The objective of this test is to measure the ability of the studied systems to cope with network failures and their ability to work in infrastructure-less environments. With high RSUs count, all the baselines have similar delivery delay, however, as the RSUs count is reduced, we can clearly see the superiority of VeSoNet, that is due to its distributed nature. Where most of the popular contents are stored in content provider vehicles and distributed across the network and indexed in meta-data servers, where the content consumer can request and get the content through V2V without the need for V2I communication, unless the requested content is downloaded for the ﬁrst time. DB-IP has the worst performance among other baselines, as it mainly depends on RSU to broadcast the content in A-Roads, and as the number of RSU is reduced, the number of A-Roads is reduced as well, hence the intersections between A-Roads and C-Roads is minimized as well. Fig. 4 shows the average delivery rate of the studied baselines in different velocity, density and infrastructure connectivity environments. Where in Fig. 4 (a), we increase the velocity of the vehicles and observe the delivery rate, and in Fig. 4 (b), the density of the vehicles is increase to measure its impact on the delivery rate, and Fig. 4 (c) shows the average delivery rate with various RSUs count. In Fig. 4 (a), we can observe that all the studied systems have high delivery rate in low and medium velocity environments, but low delivery rate in high velocity settings. That is because of the frequent V2V communication disconnections in high velocity of the vehicles, which makes it difﬁcult to establish communication and transfer the content, hence reduce the delivery rate. Similar to the delivery delay scenario, VeSoNet and other vehicle rerouting and path planning schemes (SNS and Cuckoo) still have the upper hand compared to other baselines, as the path rerouting allows to bring the content provider closer to the content requester which reduce the need for multiple-hop communications that do not perform well in Fig. 3: Comparing average delivery delay under (a) increasing velocity (b) increasing trafﬁc density (c) different RSUs count Fig. 4: Comparing average delivery rate under (a) increasing velocity (b) increasing trafﬁc density (c) different RSUs count high velocity settings. While in Fig. 4 (b), we can observe that all the studied baselines have relatively low delivery rate in low density environments (less than 100 vehicles). That is because in such sparse environments, it becomes extremely difﬁcult to forward messages between vehicles, where the vehicles need to travel long distance to ﬁnd other forwarder vehicles, which may lead to the content interest timer expire and the delivery is considered failed. While in high-density environments, the delivery rate of all the baselines considerably increase, as V2V communication becomes easier in such dense settings. Similarly, in Fig. 4 (c), we can see that the average deliver rate plummets as the we reduce the number of RSUs. Again, we can clearly observe the superiority of VeSoNet due to its distributed nature. Where most of the popular contents are stored in content provider vehicles and distributed across the network and indexed in meta-data servers, where the content consumer can request and get the content through V2V without the need for V2I communication, unless the requested content is downloaded for the ﬁrst time. On the other extreme, DB-IP has the worst performance among other baselines, as it mainly depends on RSU to broadcast the content in A-Roads and CRoads. However, the extraordinary effectiveness of VeSoNet and other path planning path baseline in delivery delay and delivery rate comes with the cost of longer travel time and computational overhead, as shown in Fig. 5 and Fig. 6. Fig. 5 shows the average travel time of the compared systems in different velocity, density and accidents count settings. In Fig. 5 (a), we increase the velocity of the vehicles and measure the travel time, and in Fig. 5 (b), the density of the vehicles is increase to measure its impact on the travel time, and Fig. 5 (c) shows the travel time values with increasing accidents count. From Fig. 5 (a), we can observe that all the compared systems have longer travel time in low-velocity but settings (less than 30 m/s), but the travel time is exponentially decrease as we increase the maximum speed from 5 to 20. The travel time stabilize after 30, even the speed still increasing until 70, that is due to the waiting stops in the intersections, which do not allow the vehicles to reach their maximum speed, and even if they do, the quickly reach the next road intersection and have to start from 0 again. VeSoNet and other vehicle rerouting and path planning schemes (SNS and Cuckoo) have slightly longer travel time, which is because the re-routed paths are usually longer than the shortest travel paths. For example in VeSoNet the content consumer vehicles choose the path that have more relevant content providers, regardless of the shortest or quickest path, as long as the chosen path do not exceed the social shortest path threshold. Similarly, in Fig. 5 (b), we can observe that VeSoNet and other vehicle rerouting and path planning schemes still have slightly longer travel time in all Fig. 5: Comparing average vehicle travel time under (a) increasing velocity (b) increasing trafﬁc density (c) increasing trafﬁc trafﬁc density scenarios. However, in Fig. 5 (c), the vehicle rerouting baselines have shorter travel time when the number of accidents increase, that is due to rerouting strategy that allows VeSoNet to avoid the accident roads. Fig. 6 shows the baselines’ average computational in increasing content request count, density and accidents count settings. In Fig. 6 (a), we increase the average content requests of the vehicles and measure the computational cost, and in Fig. 6 (b), the density of the vehicles is increase to measure its impact on the computational cost, and Fig. 6 (c) shows the computational cost values with increasing accidents count. In Fig. 6 (a), we can observe that VeSoNet has relatively high computational cost than other baselines, that is because VeSoNet require the operation of multiple vehicular server that resolve the content requests, and more computational power is required to update and coordinate these vehicular server. However, in other baselines, the computation is concentrated in a centralized server, while in VeSoNet, the computation is distributed in various distributed server, and the computational cost in each server is considerably low. Similarly, in Fig. 6 (b), the computational cost of all the studied systems exponentially increase with the increase of trafﬁc density, and VeSoNet has the second highest computational cost, but keep in mind that this computational is distributed among various different vehicular servers, unlike other baselines. In Fig. 6 (c), as the trafﬁc accidents count increase, the computational cost of all the baselines increase, furthermore vehicle rerouting schemes have relatively higher computational cost due to the computational overhead yielded by re-computing the alternative travel paths. In this paper, we have presented a trafﬁc-aware vehicular content caching architecture that optimize the content dissemination among vehicles using social-aware graph pruning search algorithm that computes and assigns the vehicles to the shortest path with the most relevant vehicular content providers. To recommend relevant content according to their social context, a trafﬁc-aware content recommendation approach based on graph embeddings is proposed, where the vehicles are represented by a set of low dimensional vector (vehicle2vec) of their previously consumed content. Experimental results show that the proposed architecture can reduce content delivery delay and delivery ratio more than 20% compared to the state-of-the-art baselines, at the cost of slight increase in computational cost and average travel time. However, there are many aspects of future improvement: consumers and content providers are encrypted, however, it is still possible to perform statistical attacks to infer the content consumers future paths, the privacy of the content consumers can be preserved by adding a pseudonyms identiﬁcation scheme. extended by adding computational task ofﬂoading, where all the computational tasks are performed in the vehicles. tended to include driver preferences for individual road selection. This work was supported by the National Natural Science Foundation of China under Grant 61872038.