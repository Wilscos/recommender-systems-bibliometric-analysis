Image-based computational ﬂuid dynamics (CFD) is increasingly used for patient-speciﬁc predictions of cardiovascular blood ﬂow. Yet, three-dimensional (3D) methods typically require several hours to days of computation time on a supercomputer. Runtime is a severe limitation since the patient-speciﬁc modeling pipeline typically requires not only a single simulation, but numerous simulations. Examples for this are iterative parameter estimation to match clinical targets, e.g., from in vivo magnetic resonance ﬂow imaging and catheter pressure measurements. Iterative optimization, as well as parameter sweeps are required to explore a design space with multiple parameters or to identify a personalized treatment plan [1]. In uncertainty quantiﬁcation (UQ) or sensitivity analysis, several thousand simulations are commonly required to quantify the conﬁdence in the simulation’s predictions based on uncertainties in the parameters [2, 3]. Finally, fast feedback is essential for clinical decision-making. A strategy to limit the computational demand is to employ reduced-order models whenever possible in the modeling pipeline. These can be run on a standard computer in seconds or minutes and can accurately reproduce ﬂow and pressure waveforms, but not local ﬂow features such as recirculation zones or hot spots in wall shear stress. For widespread clinical use, two requirements are necessary. First, the reduced-order models should be generated from the 3D models with minimal to no user interaction. Second, it is essential to quantify the accuracy of the reduced-order models against 3D solutions to assess their credibility in various vascular conditions. and proper orthogonal decomposition [5, 6] are standard tools to accelerate the solution of 3D CFD by utilizing results from previous solutions. Similarly, machine learning methods use (physics-informed) neural networks to predict ﬂuid dynamics [7]. In this work, we focus on zero-dimensional (0D) and onedimensional (1D) models, which are widely used and can be easily generalized to arbitrary anatomies. Here, we make assumptions about the underlying physics of the cardiovascular system. Speciﬁcally, we use 1D ﬂuid dynamics models and 0D lumped-parameter network (LPN) models. 1D models are Three-dimensional (3D) cardiovascular ﬂuid dynamics simulations typically require hours to days of computing time on a high-performance computer. One-dimensional (1D) and lumped-parameter zero-dimensional (0D) models show great promise for accurately predicting blood ﬂow and pressure with only a fraction of the cost. They can accelerate uncertainty quantiﬁcation, optimization, and design parameterization studies. Previously, these models needed to be created laboriously by hand, and this limited assessment of their approximation accuracy to very few models in prior studies. This work proposes a fully automated and openly available framework to generate and simulate 0D and 1D models from 3D patient-speciﬁc geometries. Our only input is the 3D geometry; we do not use any prior knowledge from 3D simulations. All computational tools presented in this work are implemented in the open-source software platform SimVascular. We demonstrate the reduced-order approximation quality against full 3D solutions in a comprehensive comparison with N = 73 publicly available models from various anatomies, vessel types, and disease conditions. Relative average approximation errors of ﬂows and pressures typically ranged from 1 % to 10 % for both 0D and 1D models, at the caps and inside the vessel branches. Though they have minimally higher approximation errors than 1D, we recommend using 0D models due to their robustness and computational eﬃciency. Automatically generated reduced-order models can signiﬁcantly speed up model development and shift the computational load from high-performance to personal computers. A variety of reduced-order models have been proposed in prior work. Reduced basis methods [4] cross-section averaged solutions of the Navier Stokes equations along a tube, whereas LPNs are analog to electric circuit models. limitations in imaging, the resolution in vasculature downstream of the anatomy of interest is often below the accuracy needed to create a 3D model. Its inﬂuence is thus combined in an LPN and coupled to the detailed 3D anatomical model. For example, 0D models can be used to represent the systemic, pulmonary, and coronary circulations, as well as the heart [8, 9, 10, 11, 12]. The same approach was followed in a virtual model of the hemi-fontan surgery, where the circulatory system outside the 3D domain is represented by a 0D model [13]. is coupled to a lower ﬁdelity 0D model, which provides the boundary conditions [14]. In a prior study, a detailed 1D model of the human venous system was coupled to a 0D model of the pulmonary circulation and heart chambers with valves [15]. A similar model was developed for the arterial tree [16]. Another study generated a network of 128 vessels to describe the human arterial system and compared it to blood pressure measurements [17]. 19, 20]. A combination of 3D, 1D, and 0D models can be advantageous in multi-ﬁdelity UQ approaches [2] and parameter estimation problems [3]. Standard approaches for UQ in cardiovascular modeling pose challenges due to a large number of uncertain inputs and the high computational cost of realistic 3D simulations. Multilevel multiﬁdelity Monte Carlo estimators improve the accuracy of hemodynamic quantities of interest while maintaining reasonable computational cost. This is achieved by leveraging three cardiovascular model ﬁdelities, 3D, 1D, and 0D, each with varying spatial resolution, to quantify the variability in hemodynamic output. Note that for this application, it is not necessary that 0D and 1D models approximate the 3D solution with high accuracy. In fact, it is suﬃcient if 0D and 1D are reasonably correlated with 3D quantities of interest. A previous study reported a good correlation of 3D with 0D and 1D models in healthy and diseased models of aortic and coronary anatomy [2]. However, it highlighted the need for a fully automated 0D and 1D modeling framework to facilitate the widespread use of UQ in cardiovascular simulations. 3D simulations. One study compared the outﬂow error for 70 models of middle cerebral artery aneurysms during steady steady ﬂow conditions with 0D models to 3D rigid wall simulations [21]. They found that the outﬂow errors decreased signiﬁcantly when considering energy losses at junctions [22]. Another study quantiﬁed the pressure drop across 22 mildly diseased human coronary arteries using a 0D model, taking into account curvature and stenosis under steady ﬂow for diﬀerent Reynolds numbers [23]. They found great agreement between 0D and 3D predicted pressure drops. However, they used the same data set ﬁrst to ﬁt 0D model parameters and subsequently analyzed the predicting quality of that 0D model. Furthermore, they considered only stenosed segments, making it diﬃcult to automatize this approach for arbitrary blood vessels. Recently, a study compared the pressure gradient in pulmonary artery stenosis models between 0D and 3D models and found good agreement [24]. Here, the pressure drop was predicted purely from variations in the cross-sectional area [25]. single vessel, a bifurcation, an aorta, and a patient-speciﬁc aorto-iliac artery and a porcine thoracothoraco aortic bypass [26]. An in-depth comparison of 1D and 3D models for the aorta of a single patient was performed in another study, ﬁnding good reproduction of the pressure and ﬂow waveforms [27]. Two studies compared a 1D model of the Circle of Willis to 3D for a total of three patients [28, 29]. They also found good agreement between 3D and 1D solutions, in one case only after manually tuning vessel resistances [28]. Two further studies found good agreement between pressure and ﬂow waveforms at multiple locations in several idealized arterial models, single vessel, bifurcation, aortic arch, and aorta [30, 31]. Several studies compared their 1D solutions to a 3D whole arterial tree model [32, 33, 34, 35, 36]. In summary, there was reasonable agreement in larger vessels and healthy scenarios but less in anatomical variations or abnormal hemodynamic conditions. commonly extracted from phase-contrast magnetic resonance imaging (PC-MRI) during in vivo studies. Examples of anatomies studied in these experimental-vs-computational comparisons include bypass grafts in stenosed porcine aortas [37]. Here, energy losses in stenoses and junctions were taken into account, although they required a manual extraction of minimal and maximal cross-sectional areas from imaging. They observed less than 11 % error in the ﬂow ratios of eight studied animals. Further studies compared the whole human arterial tree [32] and a network of major arteries and major veins [15]. They found LPNs have been widely used as stand-alone models and in coupled 3D-0D simulations. Due to Similar approaches have been used for 1D-0D coupled simulations, in which a higher ﬁdelity 1D model LPN boundary conditions for 3D models are also used in parameter estimation problems with UQ [18, Several studies have quantiﬁed the approximation error of 0D or 1D models compared to high-ﬁdelity Good agreement was found for pulsatile ﬂow between 1D and 3D models for an idealized rigid-wall Prior studies have validated results from 1D blood ﬂow models against experiments. Blood ﬂow is that ﬂow waveform patterns in the arterial system were in accordance with PC-MRI measurements and that the blood ﬂow distribution was reasonable. Other studies have also explored in vitro experiments, whereby hydraulic replicas of blood vessels enable simultaneous measurement of local ﬂows and pressures. For example, an in vitro model of a human arterial tree with 37 branches driven by a pulsatile pump was compared at 70 locations to simulations using an elastic [38] and visco-elastic tube law [39]. The updated version [39] achieved root-mean-square errors of 2.5 % and 10.8 % for pressure and ﬂow, respectively. there is currently no openly available and fully automatic framework to generate these models, limiting their applicability and adoption by the community. Furthermore, previous comparisons to high-ﬁdelity 3D CFD were usually limited to speciﬁc vessels and healthy subjects or speciﬁc disease types in a few geometries. Our goal in this work is thus twofold. First, we propose a fully automated framework to generate 0D and 1D reduced-order models from 3D vascular geometries. This framework does not require any user-interaction and is openly available in SimVascular (http://simvascular.org) [40]. Second, we demonstrate the robustness of our framework and quantify the approximation quality of 0D and 1D models by comparing them to N =73 high-ﬁdelity rigid-wall 3D solutions from the Vascular Model Repository [41]. We compare model errors on the inlets, outlets, and interiors of the models for a large variety of patient anatomies, vessel types, and diseased states under pulsatile ﬂow conditions. In this section, we brieﬂy review the methods for 3D, 1D, and 0D models. A comprehensive derivation of all three model ﬁdelities is given in further literature [42]. Furthermore, we introduce our automated reduced-order modeling pipeline, where we extract all necessary information from the 3D geometry. Blood ﬂow in the cardiovascular system is governed by the Navier-Stokes equations, a set of three-dimensional partial diﬀerential equations, describing the relationship between the velocity ﬁeld u (x, t)and the pressure ﬁeld p (x, t)for blood with a density ρ and a dynamic viscosity µ, subject to a body force, b (x, t). Here, τ (x, t) is the stress tensor, I is the identity matrix, and Ω volume domain of the ﬂuid. Equation (1) is the diﬀerential form of Newton’s second law, applied to ﬂuids in an Eulerian framework. Equation (2) is the continuity equation, which simply states that mass is conserved in the ﬂuid system. hemodynamics, including the velocity and pressure, in computational models of patient-speciﬁc vascular anatomies. To close this system of equations, initial and boundary conditions must be speciﬁed. The initial conditions are In patient-speciﬁc modeling, the entire cardiovascular system cannot be geometrically modeled. Rather, it is common to model just the anatomical portion of interest, such as the aorta. The locations where the model ends deﬁne the inlet and outlet caps. To capture the rest of the circulatory system, we prescribe boundary conditions at these cap surfaces. There are generally two types of boundary conditions that we can apply here: open-loop conditions and closed-loop conditions. In open-loop models, the inlet and outlet boundary conditions are applied separately and are not mathematically related. In closed-loop models, the inlet and outlet boundary conditions are inherently coupled. In this work, we focus on open-loop models for simplicity, though the methods we present are generalizable. We refer interested readers to further literature for details on closed-loop models [43, 44]. proﬁle, u condition is described by While good quality approximations of bulk ﬂow and pressure can be obtained from 0D and 1D models, ρ (˙u +u ⋅∇u)=∇⋅τ +ρb, ∇⋅τ =−pI +µ∇u +∇u, t ∈R These equations are typically solved numerically to obtain spatial and temporal distributions of A common open-loop inlet boundary condition prescribes a ﬂow rate, Q, with a given velocity , (x, t)normal to the inlet, commonly using a parabolic proﬁle [45]. This Dirichlet boundary where Γ boundary conditions, capturing the viscous and compliant nature of downstream vessels, are commonly employed in open-loop models [46]. These boundary conditions generally relate the ﬂow rate to the pressure via algebraic-diﬀerential equations, as described by where φ is a set of parameters governing the lumped-parameter elements and Γ The values of these parameters are patient-speciﬁc and generally require tuning to match clinical targets [20]. Finally, at the walls of the blood vessels, no-slip conditions, are typically assumed, where Γ open-source software providing a full pipeline for cardiovascular model generation and simulation [40]. We discretize each geometry into linear tetrahedra and treat blood as an incompressible, Newtonian ﬂuid. Furthermore, we consider only rigid-wall behavior for simplicity, though our methods can be generalized to the setting of ﬂuid-structure-interaction. bilized via SUPG and PSPG and use the generalized-α method for time advancement [47, 45, 48]. We simultaneously solve the algebraic-diﬀerential equations governing the boundary conditions and the linear system resulting from ﬁnite element discretization of the Navier-Stokes equations using a modular implicit coupling scheme and a custom linear solver and preconditioner [49, 50]. Our svSolver ﬁnite element implementation of the 3D solver for cardiovascular ﬂows is available open-source at https://github.com/SimVascular/svSolver. cycles to achieve results that have converged to a periodic state. This process can easily consume several days, even while using multiple processors and high-performance computing clusters. As such, we use a novel initialization method to initialize our 3D simulations and minimize the number of cardiac cycles required for each patient-speciﬁc model considered in this work [51]. All 3D simulations were run on Stanford’s Sherlock supercomputing cluster using four 12-core Intel Xeon Gold 5118 CPUs. Using our 0D validation method, we ensured that the pressure error to the periodic state in the 3D solutions is below 1 % at all outlets [51]. By integrating the Navier-Stokes equations (1) and (2) over the lumen cross-section along the centerline of a blood vessel and assuming an axisymmetric, parabolic velocity proﬁle, we obtain the one-dimensional equations, which governs the interaction between the ﬂow rate, Q (z, t), pressure, P (z, t), and cross-sectional area, S (z, t), subject to a body force, f (z, t), along the blood vessel’s axial coordinate, z [52]. Here, Ω the centerline domain of the blood vessel. Observe that unlike the 3D equations, the 1D equations only yield the temporal and axial distributions of bulk hemodynamic quantities. the system. In particular, we prescribe the relationship between the pressure and the cross-sectional area. In this work, we use the constitutive material model, where E is the Young’s modulus of the blood vessel, h is the wall thickness of the vessel, P pressure, r represents the inlet cap surface of the model. At the outlets, resistance and Windkessel In this work, we created three-dimensional patient-speciﬁc vascular models using SimVascular, an We spatially discretize the Navier-Stoke equations using a P1-P1 ﬁnite element formulation sta- Additionally, running 3D simulations for cardiovascular models requires simulating multiple cardiac Given that we have two governing equations, but three variables, we need one more equation to close Figure 1: Model 0075 1001 (normal aorta) approximated by straight tubes with linearly varying crosssection (colored). Observe that this system of equations enables us to simulate deformable wall behavior. However, for comparison against our 3D models in this work, we invoke rigid-wall behavior in our 1D models by setting Note that initial conditions for pressure do not need to be provided, given that pressure is directly related to the cross-sectional area via Equation (10). At the outlets, we prescribe the same LPN boundary conditions used in 3D to represent the downstream vasculature [53]. The 1D Equations (8) and (9) govern only ﬂow in the tubular sections of our patient-speciﬁc vascular networks. At the junctions between the diﬀerent blood vessels in our model, we assume pressure is continuous across the junction and mass is conserved. continuous Galerkin space-time ﬁnite element method with piecewise linear shape functions [26]. We discretize each vessel branch with one 1D segment with a linear interpolation between inlet and outlet cross-sectional area (Figure 1). We create one ﬁnite element for each 0.1 cm of vessel length and at least 20 elements per branch. Our open-source implementation of the 1D solver can be found at https://github.com/SimVascular/svOneDSolver. As with our 3D models, we generate the 1D patientspeciﬁc models using SimVascular [40]. However, unlike 3D simulations, solving the 1D equations is computationally inexpensive and thus all 1D simulations were performed using only a single processor. Zero-dimensional models are LPNs that simulate only bulk hemodynamic quantities, primarily ﬂow rate and spatially averaged pressure, and their temporal distributions. These models are built from individual lumped-parameter elements. The primary building blocks for 0D models are resistors, capacitors, and inductors, analogous to electrical circuits. The ﬂow rate in the 0D model corresponds to the current in an electrical circuit. The pressure drop across a 0D element mimics voltage drop. In the context of cardiovascular modeling, resistance models the viscous eﬀects of the blood ﬂow, capacitance models the elastic deformability of the blood vessel walls, and inductance models the inertia of the ﬂow. The governing equations for these elements are where P is the pressure, Q is the ﬂow rate, R is resistance, C is capacitance, and L is inductance. The values of the resistance, capacitance, and inductance are dependent on the cardiovascular anatomy. However, in general, for straight blood vessels under fully developed Poiseuille ﬂow, these quantities can to zero and kto an arbitrarily large value. The initial conditions for the 1D system of equations are We numerically solve the 1D equations, coupled with the constraints at the junctions, using a Disbe computed from the material properties of the blood and geometric properties of the blood vessel [54]. This results in Here, µ is dynamic viscosity of the blood, ρ is the density of the blood, E is the Young’s Modulus of the blood vessel, r is the radius of the lumen, l is the longitudinal length of the blood vessel, and h is the thickness of the vessel wall. stenosed vessels, may experience ﬂow separation eﬀects, which render the Poiseuille-ﬂow assumption invalid. A nonlinear expansion-based resistance, can be augmented to the Poiseuille resistance in the 0D model to account for such separation eﬀects [55, 25]. Here, K are the cross-sectional areas of the lumen proximal to and at the location of the stenosis. To extract these areas, we sample the cross-sectional along a branch and extract relative minima and maxima. If we detect more than two minima and maxima, we split up the vessel into three 0D segments: before, stenosis, and after. The stenosis segment is determined as the segment with the largest resistance. This allows us to place the stenosis at the correct location along the vessel branch. In this work, we generate one 0D segment per vessel branch, provide us with the ﬂow and pressure corresponding to each branch. age available at https://github.com/SimVascular/svZeroDSolver. svZeroDSolver incorporates the building-block-like nature of 0D models into a highly modular software package for constructing and simulating arbitrary 0D models. A variety of commonly used 0D elements, such as a Poiseuille-based resistor, is implemented in this code. Associated with each of these 0D building blocks are the equations governing that element. The local building blocks, along with these local equations, are assembled to construct the full 0D model, which yields a global system of diﬀerential-algebraic equations governing the entire 0D model [57, 58]: Here, y is the global vector of solution variables, including the ﬂow rate and pressure for each 0D element, E and F are their associated coeﬃcients, and c is a vector of constants. Note that E, F , and c could be functions of y, as in the case of the nonlinear expansion-based resistance in Equation (15). We advance Equation (16) in time using the implicit generalized-α method [59], with the Newton-Raphson method for linearization, to simulate the hemodynamics in our 0D models. A deeper discussion of the mathematical details and implementation of our svZeroDSolver software can be found in Appendix A. rigid-wall behavior. Our ﬁnal patient-speciﬁc 0D models then use a combination of the Poiseuille-based resistor and inductor and the expansion-based resistor to account for viscous, inertial, and ﬂow separation eﬀects. Furthermore, similar to the 1D models, we apply the same boundary conditions to our 0D models as used in our 3D models. Finally, as with our 1D models, we generate our 0D models using SimVascular [40] and perform the 0D simulations using only a single processor. In this section, we outline the steps to automatically generate reduced-order 0D and 1D models from 3D patient-speciﬁc geometries. The automated reduced-order model generation methods described in this section have been incorporated into the 2021.09.30 release (https://simtk.org/projects/ simvascular) of the open-source SimVascular application [40]. The SimVascular ROM Simulation Tool (https://simvascular.github.io/docsROMSimulation.html) provides a graphical user interface for interactively setting parameters that control how a reduced-order model is generated. Models can also be generated progamatically using the SimVascular Python Interface (https://simvascular.github. io/docsPythonInterface.html). This allows integrating 0D and 1D model generation and simulation into user-deﬁned workﬂows and scripts, e.g. for parameter estimation or uncertainty quantiﬁcation. Blood vessels with steep gradients in the cross-sectional area along the axial dimension, in particular, The 0D simulation methods discussed above have been implemented as an open-source Python pack- For a direct comparison against our 3D and 1D models, we set the capacitors to zero, reproducing Figure 2: Computation of cross-sectional area using slicing (left) and maximum inscribed sphere radius (MISR, middle). The color shows cross-sectional area in both images. The graph (right) shows both measures of cross-sectional area over the path of the branch, starting at the inlet. We automatically compute the centerlines with the help of the Vascular Modelling Toolkit (VMTK) [60]. The centerlines are deﬁned as lines between the inlet and an outlet, whose minimal distance from the surface is maximized in a suitable norm [61]. Each point on the centerline is assigned a maximum inscribed sphere radius (MISR). Each individual centerline connects the inlet to one outlet. Points are created for each centerline and connected to form a path segment. We use the Visualization Toolkit (VTK) [62] to merge all individual centerlines and remove duplicate points. This greatly reduces the number of centerline points and avoids redundant points, especially for geometries with many outlets. We further apply light global smoothing and moderate local smoothing close to the caps using a moving average smoothing ﬁlter. The cross-sectional area of the vessels is an important parameter in reduced-dimensional modeling. The area is the only geometrical measure besides the vessel segment length entering the reduced models. VMTK provides two methods to extract the local cross-sectional area of the vessel. Using the MISR, which is already provided with the centerline, yields the cross-sectional area, MISR more computationally demanding method, is slicing the geometry at each centerline point and calculating the cross-sectional area by triangulating each slice. Using ﬁnite diﬀerences, the tangent vector of the centerline path yields the slice normal. Figure 2 compares both methods of area extraction for an inlet branch of an aortic geometry. The branch slices are shown on the left, spheres with local MISR are shown in the middle. The graph on the right compares the area calculated from both methods. Here, two deﬁciencies of the MISR-area are evident. Firstly, the MISR-area underestimates the cross-sectional area at the inlet by a factor of more than two. The MISR is unreliable within the last diameter before the cap surface. Secondly, the MISR-area only oﬀers a lower bound of cross-sectional area in non-circular vessels. This is evident throughout the branch in Figure 2. Only for a perfectly circular vessel, the MISR-area is equal to the cross-section area. We thus use slicing to determine the local cross-sectional area in this study. The slices can also be used to split patient-speciﬁc geometries into branches and junctions, as will be shown in Section 2.4.3. The theory of 0D and 1D reduced-dimensional blood ﬂow, ﬂow introduced in Sections 2.3 and 2.2, respectively, only applies to individual branch segments. We thus need to split our centerline into branches and junctions. For that, we employ again the slices of the 3D geometry as explained in Section 2.4.2. This process is visualized in Figure 3. We color the 3D surface based on proximity to centerline branches. We then label all slices that cut through more than one color on the surface as junctions. We also label slices that have more than one centerline passing through them as belonging to a junction. The remaining slices (shown in Figure 3, left) are then labeled as branches. Figure 3 (middle) shows the resulting split of the centerline in branches (white) and junctions (red). Note that Figure 3: The 3D surface is colored by proximity to centerline branch segments (left), slices labeled as branches are shown in white. The corresponding split of the centerline (middle) shows branches in white and junctions in red. The junction domains are larger than those detected by VMTK (right). our junction detection is more comprehensive than the one obtained from VMTK branch extraction (right). Our junction regions are always connected and contain one inlet and at least two outlets. All branches and junctions are ﬁnally each assigned a unique identiﬁcation number, see Figure 4. In this section, we show the results of our comprehensive comparison of high-ﬁdelity 3D models to 1D and 0D reduced-dimensional models. For comparison, we integrate the 3D solutions over the cross-sections of the vessel. We follow the same approach as in Section 2.4.2 where we extract the cross-sectional area on each centerline point. We then split the vessel into branches and junctions as in Section 2.4.3. This allows us to compare the results at the caps of the model, as well as in the interiors, branch by branch. An overview of all N =73 geometries used in this work is shown in Figure 5. All our geometries are taken from the public Vascular Model Repository (VMR) at http://vascularmodel.org [41]. We will release all data freely to the public in the form of curated SimVascular projects. Figure 6 provides an overview of the properties of our models. The diﬀerent anatomies include cerebrovascular [63], pulmonary arteries in Fontan patients [64], left circumﬂex coronary artery [65], aortic coarctation (untreated, end-to-end anastomosis) [66, 67, 68], abdominal aortic aneurysms, coronary artery aneurysms in Kawasaki patients [69], superior vena cava and pulmonary arteries in Glenn patients [70], aortoiliac occlusive disease [71], and several previously unpublished models from these categories. All outlet boundary conditions applied in this work are open-loop LPNs. A pulsatile inﬂow with a parabolic velocity ﬁeld is prescribed at each model’s inlet cap. The inlet and outlet boundary conditions have been tuned to in vivo measurements, such as phase-contrast magnetic resonance imaging and catheter pressure measurements. The majority of the models have three-element Windkessel boundary conditions (RCR) [72]. The pulmonary models here generally have resistance boundary conditions with a constant distal pressure. The coronary models use an RCRCR coronary boundary condition with prescribed variable intramyocardial pressures at the outlets [9, 10]. The full descriptions of all models and the outlet boundary conditions are provided on the VMR website. Using the high-performance computing setup detailed in Section 2.1, simulating a single 3D model requires about two days of computation time. All reduced-order model generation and computing was performed on a single CPU on a workstation computer. Generating the centerlines for all N =73 models took ∼6 h. The centerlines need to be extraced only once per geometry, the rest of the 0D and 1D model generation pipeline is instantaneous. We estimated the number of cardiac cycles required to reach a periodic state from initial conditions generated from a mean ﬂow solution based on the results in a prior study [51]. It took about ∼2 h to run all 0D models and about ∼5 h to run all 1D models. The 0D solver converged to a solution in all models but there were four models where the 1D solver did not converge. Pressure, P provides the ground-truth reference solution for both 1D and 0D simulations. We linearly interpolate 0D and 1D pressure and ﬂow, P 3D to d =1 and d =0 models using the following time-averaged relative error metrics [30, 39]: with number of time steps n ﬂow since we prescribe inﬂow here. The pressure diﬀerence is normalized at each point by the 3D time-averaged pressure whereas the ﬂow diﬀerence is normalized by the amplitude. appearing in the lower left of each plot are approximated well, while models in the top right have higher errors. A majority of the models falls in the range 1 % < <10 % with some exceptions above and below. Examining results of 0D models, some pulmonary models fall outside this range. This is due the fact that the models with low approximation error are patients with pulmonary artery hypertension. In those models, the ﬂow is dominated by the resistances and distal pressures of the boundary conditions, more than the 3D ﬂuid dynamics inside the model. These models are thus well represented as reduced-order models. and in the interior of the vessel branches Ω. Note that we exclude the inlet when comparing The ﬂow and pressure errors at the caps for all N = 73 models are shown in Figure 7. Models 1D coarctation models with severe stenosis have cap and branch errors above 10 %. Normal pulmonary models exhibit high approximation errors since these models consist of a large number of subsequent vessel junctions, which are currently not modeled in 0D or 1D models. In most models, the errors on caps and in the interior of branches are similar, with similar 0D and 1D approximation errors. Individual results are shown for model 0075 1001 in Figure 8. In this normal aorta geometry, ﬂow and pressure are approximated well for both 0D and 1D. Pressure curves match the 3D solution well, with 0D slightly underestimating pressure. Flow curves and ﬂow splits between outlets are approximated are almost identical in all three models. model of an artiﬁcially generated severe coarctation in the descending aorta. Figure 9 shows the results at the caps. The 0D model slightly underestimates maximum pressure, whereas the 1D model greatly underestimates it. Similarly, 0D and 1D models increasingly overestimate the ﬂow through the descending aorta compared to the 3D model. Figure 10 shows ﬂow and pressure results in the interior of the model. The 3D model predicts a pressure drop over the coarctation of ∼35 mmHg. This is estimated as ∼28 mmHg in 0D at roughly the correct location along the vessel. Since our 1D model does not include stenosis modeling, it cannot represent the pressure drop in the descending aorta. patient with Marfan syndrome. Similar to the case of aortic coarctation, 0D and 1D models slightly underestimate the pressure in the 3D model. Observing the results in the interior of the model in Figure 12, it becomes evident that neither 0D nor 1D accurately represent the 3D pressure drop of ∼ 10 mmHg. Here, the reduced-order models cannot fully capture detailed 3D ﬂow features like recirculation in the aneurysm. We presented a robust and fully automated pipeline to generate reduced-order 0D and 1D models from 3D geometries. This framework is openly available and integrated in the SimVascular graphical user interface as well as the Python interface. This allows for free and easy use, even in more advanced applications where 0D and/or 1D reduced-order modeling is integrated in a user-deﬁned framework, such as uncertainty quantiﬁcation and parameter estimation. Additionally, our svZeroDSolver is highly Examining the results of 1D models, there are more cases with higher approximation errors. Some In Figures 8 to 12, we examine individual cases for which the performance is excellent or poor. The diﬀerence in 0D and 1D approximation becomes evident for model 0069 0001, a small animal Figure 11 shows the cap results for a aortic model 0129 0000 with a dilated descending aorta in a Figure 7: Correlation between ﬂow and pressure error at the caps (top) and in branches (bottom) of the model in 0D (left) and 1D simulations (right). Figure 8: Cap results pressure (top) and ﬂow(bottom) in model 0075 1001 (normal aorta) over one cardiac cycle. Figure 10: Interior results in model 0069 0001 (severe aortic coarctation) at peak systole over vessel paths. Figure 9: Cap results in model 0069 0001 (severe aortic coarctation) over one cardiac cycle. Figure 12: Interior results in model 0129 0000 (Marfan syndrome) at peak systole over vessel paths. modular, allowing users to easily deﬁne custom 0D elements. are predicted well by both 0D and 1D models. This holds for a large variety of anatomies, vessel types, and disease conditions. For most of the models included in this study, the approximation error of 0D and 1D models was in the range 1 % < <10 % compared to 3D ﬂuid dynamics. In general, 1D models performed slightly better than 0D models. This, however, comes at a higher computational cost and a less robust solver that did not converge to a solution in four models in this study. to sudden changes in the cross-sectional area. The 0D solver thus reliably outperforms the 1D solver in stenosed geometries. A stenosis model exists for 1D models [37], analogous to the 0D model. However, in this prior study the stenosed cross-sectional area and stenosis location was chosen by the user and not extracted automatically. Furthermore, we found that the convergence of the nonlinear Newton solver is drastically worsened by including the stenosis model, leading the 1D solution to diverge for some models. We thus decided not to include stenosis modeling in the 1D models in this work, accepting worse results in stenosed geometries in exchange for a more robust overall solver. achieved a good approximation of the 3D pressure in this work, even in severely (artiﬁcially generated) stenoses. However, the model is highly dependent on the choice of cross-sectional area sampling locations. While we use relative minima and maxima, other methods such as global minima and adjacent local maxima are also possible. In addition to predicting the pressure drop in a stenosed segment, we also locate it along a vessel branch. Note that this does not change the overall stenosis resistance of a branch, just its location. The stenosis placement thus does not have any inﬂuence on the cap results of the 0D simulation but only in the interior of the model. branches and junctions, assigning unique identiﬁcation numbers to each. This allows for easy reducedorder model generation as a connectivity tree can be directly generated from the centerline. In addition, it simpliﬁes the post-processing of the 3D solutions as well to display results along speciﬁc branches and compare them to reduced-order models. Splitting the model into branches and junctions allows us Figure 11: Cap results in model 0129 0000 (Marfan syndrome) over one cardiac cycle. In general, despite the signiﬁcantly reduced cost, ﬂow and pressure on the caps and inside branches Notably, in contrast to the 0D model, our 1D formulation does not account for pressure losses due Our 0D model takes into account pressure losses due to sudden changes in cross-sectional area. We As part of our automated framework, we introduced a method to split any vessel centerline into to distinguish between diﬀerent components of the reduced-order models. Flow in the branches is then approximated by 0D or 1D models. For now, our models do not take pressure losses at junctions into account. We enforce conservation of ﬂow and equal pressures at the junction outlets. Models exist to predict the pressure losses over junctions [22, 21, 73]. However, in our preliminary studies, these did not lead to a signiﬁcant improvement in approximation quality and were thus not included. Future work could feature a machine-learning-based junction model, trained on the junctions in our database. wall. Our choice of using a deformable-wall formulation with a high wall stiﬀness inherently yields a worse approximation than a truly rigid formulation. However, other approximation errors, such as neglecting junctions and stenoses, have a more signiﬁcant inﬂuence on the solution. speciﬁcally the extraction of the cross-sectional area at all centerline points, which can take several minutes for a large geometry. This is not a signiﬁcant limitation in practice since the centerline needs to be generated only once per model. Future improvements include reducing the number of centerline points where the cross-section is extracted and speeding up the slicing of the 3D geometry by using isosurfaces. segment per vessel branch. A ﬁner discretization could be chosen to form a distributed LPN approximation, allowing a ﬁner sampling of the cross-sectional area along the branches. In our experience, however, this did not yield signiﬁcantly better results at higher computational costs. The same holds for the 1D models, where multiple 1D segments can be generated per branch. Since these individual branches need to be coupled with Lagrange multipliers, this greatly increases computational costs [26]. Additionally, this also reduces computational stability, especially in the case of vessels that increase in diameter towards the outlet or have a strongly varying diameter. A model based on the Port-Hamiltonian method might oﬀer a distributed lumped-parameter hybrid model between our 0D and 1D models [74]. Additionally, instead of physics-based reduced-order models, ﬂow and pressure along the centerline could also be predicted by a neural network. In the future, we plan to deﬁne a coupling interface between 3D solvers and svZeroDSolver, creating a single modular framework to deﬁne complex open-loop and closed-loop boundary conditions. We thank Dr. Mehran Mirramezani for insightful discussions. This work was supported by NIH Grants R01LM013120 and R01EB029362. The authors gratefully acknowledge the Stanford Research Computing Center for providing the computational resources necessary to the numerical simulations presented in this work. In this appendix, we outline the spatial and temporal discretization and iterative solution process in svZeroDSolver. The 0D model is governed by combinations of lumped-parameter elements that can be combined to create a general nonlinear system of equations, Here, y is the global vector of solution variables (pressure and ﬂow at LPN nodes), E and F are their associated coeﬃcients, and c is a vector of constants [58]. For simplicity of notation, we drop the dependence on the solution vector and time in the following. We leverage the inherent modular nature of 0D models to create our svZeroDSolver software. The governing equations for a single element, e, can also be cast into the form of The local element contributions to E svZeroDSolver and assembled automatically into the global arrays, All 3D models in our repository are rigid-wall, whereas the 1D formulation is inherently deformable- Currently, centerline extraction is the bottleneck of the reduced-order model generation pipeline, In this study, we chose the minimal discretization size for our 0D model of one lumped-parameter Figure 13: A Poiseuille-based linear resistor lumped-parameter element. The solution variables for this element are shown in red. where A is the assembly operator and N 0D model. As an example, the governing equations for the Poiseuille-based resistor (Figure 13) are yielding the solution vectors and local element arrays Observe that E local governing equations. [59]. The generalized-α method is an implicit predictor-corrector method that requires a single predictor step and a series of multi-corrector steps to solve for the solutions at each time step. Similar to other predictor-corrector schemes, the solutions are evaluated at intermediate times between t However, in the generalized-α method, y and Here, α radius. For each time step, the solution strategy is outlined below. After assembling our full 0D model, we solve Equation (19) using the implicit generalized-α method and αare the generalized-α parameters, where α=, α=, and ρ is the spectral Using the Newton-Raphson method, we linearize this equation about yto obtain where Kis the tangent matrix, which is calculated as 4. Update step: Update solution and its time derivative in this time step, As for to the local contributions E, F, and c, the local tangents dE, dF, and dcmust be deﬁned for each 0D element. Note that in the linear resistor example, all tangents are zero. We solve (32) for ∆yand update the solution in this Newton-Raphson step until the residual is lower than a given tolerance in iteration k.