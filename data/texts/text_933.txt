In-vivo toxicological studies are characterized by multiple primary endpoints with quite different scales. Whereas guidelines and publications provide various statistical tests for normally distributed endpoints (such as organ weights) and proportions (such as tumor rates), few approaches are available for graded histopathological ﬁndings, such as 0, +, ++, +++. This represents a basic contradiction of the statistical analysis because these graded ﬁndings sometimes show a high predictive value for potential toxic effects. Here we discuss different methods comparatively, especially from the viewpoints of i) designs for very small sample sizes and ii) interpretability by toxicologists. A new approach is recommended where a simultaneous test is performed over all class combinations of score levels, such as (0, +) vs (++, +++). Corresponding R code is provided by way of a data example. library(nparcomp) ko1<-nparcomp(Severity ~dose, data=green, asy.method = "mult.t", summary(ko1) # Reveal the adjusted p-values plot(ko1) # Plot simultaneous confidence limits library("multcomp") green$FT <-sqrt(green$Severity)+ sqrt(green$Severity+1) modFT <-lm(FT~dose, data=green) pvalFT <-summary(glht(modFT, linfct=mcp(dose="Dunnett"),alternative="greater")) Linear Hypotheses: library("multcomp") exP <-glm(Severity~dose, data=green, family=quasipoisson(link = "log")) pvalGLM <-summary(glht(exP, linfct=mcp(dose="Dunnett"), alternative="greater")) Linear Hypotheses: type = "Williams",alternative = "greater", info = FALSE) Estimate Std. Error t value Pr(>t) Estimate Std. Error z value Pr(>z) GreenCLM <- clm(sever ~ dose, data=green) propCI <-exp(confint(GreenCLM, level=1-0.05/2)) # Bonferroni odds ratio CI library(multcomp) library(tram) green$score<-as.ordered(green$Severity) PL2<-polr(score ~ dose, data =green) summary(PL2) summary(glht(PL2, linfct=mcp(dose="Dunnett"), Linear Hypotheses: A further modeling option is to deﬁne the scores as a multinomial vector [25]. The VGAM package allows ﬁtting multinomial models by the vglm() function, whereas several R-functions provide simultaneous inference between both treatment contrasts and categories [31]: library(VGAM) green$C1 <- ifelse(green$Severity == 1, 1, 0) green$C2 <- ifelse(green$Severity == 2, 1, 0) green$C3 <- ifelse(green$Severity == 3, 1, 0) multivgam <- vglm(cbind(C1,C2,C3) ~ dose, family=multinomial(refLevel=1), data=green) i1−P r(Z≤j) Estimate Std. Error z value Pr(>z) summary(glht(model = multin2mcp(multivgam, dispersion="overall"), linfct = mcp2matrix(multivgam, linfct = mcp(dose = "Dunnett"))$K, alternative="greater")) Linear Hypotheses: C3/C1: 2 - 1 <= 0 -15.1809 1688.2201 -0.009 0.9788 C3/C1: 3 - 1 <= 0 -15.5521 1536.4467 -0.010 0.9788 library(cotram) NSH<-cotram(Severity~dose, data=green,order=2) WISH<-glht(NSH, linfct = mcp(dose = "Dunnett"), alternative="greater") Linear Hypotheses: Estimate Std. Error z value Pr(>z) library(RSCABS) data(exampleHistData) subIndex<-which(exampleHistData$Generation==’F1’ & exampleHistData$Genotypic_Sex==’Male’ & exampleHistData$Age==’8_wk’) LH<-exampleHistData[subIndex, ] lh<-LH[, c(2,6)] lh$Gon<-as.numeric(lh$Gon_Phenotype) lh$EP1<-ifelse(lh$Gon >1,1,0) lh$EP2<-ifelse(lh$Gon >2,1,0) lh$EP3<-ifelse(lh$Gon >3,1,0) lh$treat<-as.factor(lh$Treatment) lhh<-droplevels(lh[lh$treat!=6, ]) Lhh<-droplevels(lhh[lhh$treat!=3, ]) library("coin") library("multcomp") Co1 <- function(data) trafo(data, factor_trafo = function(x) model.matrix(~x - 1) % Codu <-independence_test(EP1 +EP2+EP3~ treat, data = Lhh, teststat = "maximum", distribution = "approximate", xtrafo=Co1, alternative="greater") pvalCODU <-pvalue(Codu, method="single-step") pvalCODU 2 - 1 0.9284 0.9463 0.9137 0.9216 4 - 1 0.2269 0.0001 0.8750 0.8570 5 - 1 <0.0001 <0.0001 <0.0001 <0.0001 CoW <- function(data) trafo(data, factor_trafo = function(x) model.matrix(~x - 1) % Cowi <-independence_test(EP1 +EP2+EP3~ treat, data = Lhh, teststat = "maximum", distribution = "approximate", xtrafo=CoW, alternative="greater") pvalCOWI <-pvalue(Cowi, method="single-step") pvalCOWI C 1 <1e-04 <0.0001 <0.0001 C 2 <1e-04 0.0004 0.0036 C 3 <1e-04 0.0089 0.0386 Adu <-independence_test(Gon+EP1 +EP2+EP3~ treat, data = Lhh, teststat = "maximum", distribution = "approximate", xtrafo=Co1, alternative="greater") pvalADU <-pvalue(Adu, method="single-step") pvalADU 2 - 1 0.9331 0.9517 0.9191 0.9264 4 - 1 0.2274 <0.0001 0.8821 0.8658 5 - 1 <0.0001 <0.0001 <0.0001 <0.0001 library("coin") library("multcomp") green$treat<-as.factor(green$Dose) Co1 <- function(data) trafo(data, factor_trafo = function(x) model.matrix(~x - 1) % gCodu <-independence_test(S12 +S23~ treat, data = green, teststat = "maximum", distribution = "approximate", xtrafo=Co1, alternative="greater") pvalGCODU <-pvalue(gCodu, method="single-step") 2 - 1 0.9891 0.2772 3 - 1 0.9899 0.8290 4 - 1 0.9643 0.0707 5 - 1 0.2122 0.5731 library(tukeytrend) library(multcomp) Lhh$Dose<-as.numeric(as.character(Lhh$Treatment)) Lhh$dose[Lhh$Dose==1] <-0 Lhh$dose[Lhh$Dose==2] <-10 Lhh$dose[Lhh$Dose==4] <-50 Lhh$dose[Lhh$Dose==5] <-150 bx1<-glm(EP1~dose, data=Lhh, family=binomial(logit)) bx2<-glm(EP2~dose, data=Lhh, family=binomial(logit)) bx3<-glm(EP3~dose, data=Lhh, family=binomial(logit)) tx1 <- tukeytrendfit(bx1, dose="dose", scaling=c("ari", "ord", "arilog")) tx2 <- tukeytrendfit(bx2, dose="dose", scaling=c("ari", "ord", "arilog")) tx3 <- tukeytrendfit(bx3, dose="dose", scaling=c("ari", "ord", "arilog")) tx <- combtt(tx1, tx2, tx3) TX <- summary(asglht(tx)) Linear Hypotheses: