Patient scheduling is a difﬁcult task as it involves dealing with stochastic factors such as an unknown arrival ﬂow of patients. Scheduling radiotherapy treatments for cancer patients faces a similar problem. Curative patients need to start their treatment within the recommended deadlines, i.e., 14 or 28 days after their admission while reserving treatment capacity for palliative patients who require urgent treatments within 1 to 3 days after their admission. Most cancer centers solve the problem by reserving a ﬁxed number of treatment slots for emergency patients. However, this ﬂat-reservation approach is not ideal and can cause overdue treatments for emergency patients on some days while not fully exploiting treatment capacity on some other days, which also leads to delaying treatment for curative patients. This problem is especially severe in large and crowded hospitals. In this paper, we propose a prediction-based approach for online dynamic radiotherapy scheduling. An ofﬂine problem where all future patient arrivals are known in advance is solved to optimality using Integer Programming. A regression model is then trained to recognize the links between patients’ arrival patterns and their ideal waiting time. The trained regression model is then embedded in a predictionbased approach that schedules a patient based on their characteristics and the present state of the calendar. The numerical results show that our prediction-based approach efﬁciently prevents overdue treatments for emergency patients while maintaining a good waiting time compared to other scheduling approaches based on a ﬂat-reservation policy. ing According to the WHO deaths in 2020. In Canada, the number of cancer deaths in 2020 was 83,300, accounting for 30% of all deaths in the country. The number of cancer incidents is steadily on the rise in many countries, which results in a lot of stress on the treatment facilities and medical staff and also makes timely access to cancer treatments a difﬁcult task. It is essential to improve the treatment scheduling process to optimize the utilization of available resources and reduce the waiting time of patients. ular forms of cancer treatment. About 50% of cancer patients undergo RT treatment [1, 21]. During this treatment, a patient receives a high dose of radiation divided into smaller ones (called fractions) delivered to the cancer site over a number of consecutive days. This treatment is most commonly delivered by a linear accelerator (linac). As the number of linacs in a hospital is usually limited, the waiting time for cancer patients to start their RT treatments depends greatly on treatment scheduling. Every patient has a recommended due date by which their treatment should start. Overdue treatments (treatments started after the recommended deadlines) are highly discouraged. In addition, waiting time should be minimized as increased waiting time for RT treatment has a negative impact on clinical outcomes [5, 14, 4]. Therefore, better planning to reduce waiting time is crucial in improving treatment outcomes. pitalier de l’Universit linacs and an incoming ﬂow of treatment requests, we must determine the most efﬁcient treatment schedule for patients. The main objective is to minimize overdue treatments as well as patient waiting time, which can be achieved by deciding the starting dates and the linacs for patients’ ﬁrst treatments. At CHUM, patients are divided into four categories based on the urgency of treatment. Palliative pa- Keywords: Operations Research; Radiotherapy scheduling; Integer Programming; Patient Schedul- In this paper, we focus on efﬁciently planning radiotherapy (RT) treatments, one of the most pop- In this paper, we consider a scheduling problem for RT treatments arising at CHUM (Centre hostients (categories P1 and P2) need urgent care to relieve intense pain, hence the treatment deadline is set to one or three days after their admission. Treatment deadlines in curative patients (categories P3 and P4) are 14 or 28 days after admission, depending on the cancer site and their condition. Approximately 70% of patients treated at CHUM are curative. Despite accounting for only 30% of treatments, palliative treatments are the most challenging to schedule (see [19]). As palliative patients require urgent care after admission, with little time to schedule in advance, it is important to anticipate future arrivals of patients in order to make good scheduling decisions. Many cancer centers reserve a number of treatment slots per day for emergency treatments. This approach is used in several papers [17, 13, 19, 8]. Nonetheless, it is difﬁcult to set a proper threshold. If the reserved capacity is too high, it reduces the capacity for treating curative patients and hence lengthens their waiting time. If the reserved capacity is too low, there may not be enough slots for emergency treatments. future arrivals when deciding the treatment schedule. Legrain et. al [13] combine stochastic programming with online optimization. That is, once a treatment plan is approved, the appointments are made and the patient leaves with their schedule in hand. Saure et al. [20], on the other hand, apply batch scheduling, where scheduling decisions for a group of patients are made daily by the end of the day using a discounted inﬁnite-horizon Markov Decision Process (MDP). MDP is also utilized by Gocgun [9], which additionally allows for the cancellation of treatments. Compared to online scheduling as in [13], batch scheduling has the advantage of having a larger search space and hence usually results in better schedules. However, due to larger problem sizes, batch scheduling is more difﬁcult to solve than online scheduling, which involves only one patient at a time. Online scheduling, on the other hand, is preferred by many cancer centers for the convenience of their patients and scheduling staff. Patients can leave the center with their appointments in hand while the scheduling staff does not have to call patients to notify them about their appointments. Stochastic programming and MDP, however, are both prone to scaling problems which makes it difﬁcult to apply either approach in large hospitals. In addition, they are algorithmically heavy and may be difﬁcult to implement and maintain in real-world applications. In the literature, few attempts have been made to tackle the scaling problem of stochastic programming using machine learning techniques. One example can be found in the context of two-stage stochastic programming [12], where the authors use supervised machine learning to predict the computationally expensive second stage and apply the algorithm to a railway demand and capacity management problem. which takes future arrivals into account. As the arrival pattern of cancer patients can be learned from historical data, it can give us more information on future arrivals and hence assists scheduling decisions. Assuming that we have perfect knowledge of future arrivals, we can derive an optimal ofﬂine schedule using an exact model. We propose an Integer Programming (IP) model for this purpose. Given that we have a large number of instances with the same arrival rate and number of linacs, a regression model can be trained to detect the links between a patient’s features, the current state of the hospital and the ideal schedule. The regression model can then predict a “good” waiting time for a patient. decisions are made upon patients’ arrival. As we prioritize on-time treatments for palliative patients, they are always scheduled on the earliest possible dates. Curative patients are scheduled using a prediction model which suggests a waiting time based on their treatment plan and the current occupancy of linacs. This suggested waiting time is fed to a prediction-based scheduling algorithm that takes into account other constraints and returns an actual valid starting date. In essence, the prediction model is trained to delay treatments of curative patients to make space for palliative ones based on an observation of the current state of the hospital. This results in a robust scheduling approach that is able to take into account future arrivals. We refer to the proposed machine learning-based approach as prediction-based approach. It is compared to different scheduling strategies, including an online In the RT scheduling literature, there are so far only two classes of approach that take into account In this paper, we propose a novel online prediction-based approach for radiotherapy scheduling Our algorithm solves the radiotherapy scheduling problem in an online manner, i.e., scheduling greedy heuristic that is currently used at CHUM and three batch scheduling strategies which schedule patients daily, bi-weekly, and weekly, respectively. The algorithms are tested in a simulation with a rolling horizon to evaluate their performance over a period of time. Test datasets are generated from actual data obtained from CHUM. Compared to other approaches, the prediction-based approach shows superior performance in most problem settings (problem settings are differentiated by number of linacs and arrival rate). It results in the lowest average overdue time and waiting time in palliative patients while maintaining similar numbers in curative patients compared to other approaches, which demonstrates its ability to efﬁciently integrate information on future arrivals into daily scheduling decisions. Notably, the superiority of the prediction-based approach is more prominent in larger hospital settings with more linacs and more patients to treat (large arrival rate). passes the batch scheduling strategies tested. Second, the running time of the algorithm does not depend on the instance size. This offers an enormous advantage compared to other stochastic approaches in the literature that suffer from the curse of dimension. The highest cost associated with this approach is to generate optimal ofﬂine solutions for the training phase. However, it is an ofﬂine cost and can be done easily with an average server. In our experiments, we tested successfully for instances with up to 8 linacs, which represents a hospital size that is larger than most of the cancer centers studied in literature. review. The methodology is presented in Section 4. Section 5 presents numerical results, and ﬁnally Section 6 closes the paper with our conclusions and future work. In this section, we describe the radiotherapy scheduling problem arising at CHUM and then present some related work and situate our work in the literature. In radiotherapy treatment, a patient receives a series of radiation doses (fractions) delivered by a linac to the cancer site during the treatment course, which typically consists of several consecutive days with breaks on the weekends. Multiple appointments are therefore required. The problem studied in this paper is a real-world problem arising at CHUM, a large cancer center in Montr is capable of treating around 3,500 patients per year (data from 2018). CHUM’s facility consists of 12 linacs, eight of which are generalized linacs while the remaining four are specialized linacs required for special types of treatment. their cancer type and condition. Palliative patients (categories P1 and P2) have their waiting time target set as 1 and 3 days, respectively. In curative patients (categories P3 and P4), the target is 14 and 28 days, respectively. To minimize the waiting time of patients, we only need to decide the start date for treatment, as once a treatment starts, it must be carried out daily. The waiting time of a patient is the time elapsed between his/her admission date and the date of the ﬁrst treatment. If a patient’s treatment starts after the recommended deadline, the time delay is counted as overdue time. ment workﬂow used at CHUM is illustrated in Figure 1. When a new consultation request is made, a patient ﬁrst undergoes a consultation session where the doctor explains his/her condition and the available options. If the patient agrees to proceed with the treatment, they will go through several preparation steps such as external consultation and exams. The next step is planiﬁcation scan, where the patient undergoes a set of tests and imaging. Then, in the geometric and dosimetric planning Our approach offers many advantages. First, despite being an online scheduling strategy, it sur- The rest of the paper is organized as follows. Section 3 provides problem description and literature At CHUM, patients are divided into four categories with different waiting time targets based on Cancer treatment is a complicated process with many procedures and parties involved. The treatstep, a treatment team carefully makes a treatment plan for the patient based on their diagnosis. The treatment plan will need to be veriﬁed and approved by a physicist before the treatments are prepared. The RT treatments are then carried out, with review and possibly revision during the course of treatment. Finally, the treatment ends with post-treatments and follow-ups. Currently, the scheduling of treatments is performed manually at CHUM. of fractions that a patient will receive and the duration of each fraction. Since fraction durations at CHUM are always multiples of 5 minutes, we set the granularity of our schedules to 5-minute blocks. Each linac has a treatment capacity measured in time blocks. Radiotherapy scheduling is a relatively young ﬁeld of research. A review of RT scheduling can be found in [11, 22]. The ﬁrst two mathematical models for RT scheduling are proposed by Conforti [6] to maximize the number of treated patients within a given horizon with identical treatment times and a single linac. The model assigns patients to treatment slots of equal length, which is referred as block scheduling. The authors then extend their models in [7] to allow for more realistic settings where treatment duration can vary in length (non-block scheduling). Petrovic et al. [18, 17] propose several constructive heuristics based on different prioritised rules and improve the solutions using metaheuristics. They use block scheduling where treatment on a linac is of ﬁxed duration and depends on the energy type of the linac. Burke et al. [2] propose a non-block IP model to assign patients to days and linacs and perform several simulations to investigate whether delaying the scheduling decision can lead to better schedules. Heuristic methods are also used in [10] to schedule patients in both pre-treatment and treatment stages. Pre-treatment for RT patients is also considered in [3], where the authors solve a multi-objective problem by formulating it as a series of single-objective scheduling problems. an ion beam to different treatment rooms. Most studies in particle therapy hence focus on deciding speciﬁc appointment times for treatments to optimize the beam’s utilization, i.e., minimizing the idle time of the machine. An exact model is proposed in [16] but is proven to be highly intractable. Metaheuristics are therefore widely used for particle therapy treatment scheduling [16, 15, 24]. of treating their patients within the recommended waiting period. They hence focus on meeting patients’ preferences for treatment times. They propose a heuristic to pre-assign patients to linacs and use an exact model to solve the resulting subproblems. In [8], the authors propose an IP and Among various technical information, a treatment plan includes information about the number Another form of RT treatment is particle therapy, which uses a centralized machine to deliver In another context, Veira et al. [23] point out that most cancer centers in Europe are capable two constraint programming (CP) models for scheduling RT treatments. Their generated instances include an expected number of future arrivals, based on which they predict future resource utilization. on a static horizon. In RT scheduling, and patient scheduling in general, it is important to evaluate the performance of the algorithm over time in a rolling horizon where patient arrivals are revealed gradually. In [19], the authors propose a two-phase approach for RT scheduling and implement a simulation to evaluate the algorithm dynamically in a rolling horizon using different scheduling strategies. The approach, however, is still myopic, i.e., does not take into account future arrivals when making scheduling decisions. To the best of our knowledge, there are only two approaches for dynamic RT scheduling which take into account future events. The ﬁrst approach is Markov Decision Process (MDP), which is proposed by Saure et al. [20] to provide a dynamic policy that takes into account future events. The problem is modeled as a discounted inﬁnite-horizon MDP and the equivalent Integer Programming (IP) model is solved using column generation technique. The authors solve the problem in an ofﬂine fashion where batch scheduling decisions are made daily by the end of the day. The same approach is also used in [9], which additionally allows for the cancellation of treatments. Legrain et al. [13], in contrast, propose a hybrid method combining stochastic optimization and online optimization to solve the problem in an online fashion, i.e., one patient at a time. The aforementioned approaches, however, are computationally expensive and hence are limited to relatively small instances. In [20], their practical example has an arrival rate of 8.25 requests per day with 120 appointment slots, which is equivalent to three linacs. Legrain et al. [13] consider a 20-minute time slot for each patient and tests the algorithm on instances with up to two linacs and an arrival rate of less than 3.5. In this paper, we aim to solve the problem for larger instances with up to 8 linacs. We ﬁrst present a mathematical model for the problem in Section 4.1 and then introduce different scheduling strategies in Section 4.2. The remainder of the section explains our prediction-based approach, which is the main contribution of this paper. The problem consists of ﬁnding the best schedule of treatments for a set of patients P given a set of linacs L. The sets of palliative patients and curative patients are denoted as P P = P previous scheduling decisions. This set is denoted as ˆP, P = admission date a date d a treatment plan, which speciﬁes the number of fractions I duration of each fraction (p represents the available capacity of linac l on day t after deducting the ﬁxed appointments from the previous scheduling decisions. the assignment of patients’ ﬁrst fractions to dates and linacs. Once treatment starts, it is carried out every day until the required number of fractions is achieved. Subsequent fractions of each patient should be carried out on the same linac as the ﬁrst treatment. Two objective weights, ω introduced to control the balance between waiting time and overdue time. By setting ω we heavily penalize overdue time over waiting time. Capacity of linacs is a hard constraint, with a portion of linac capacity reserved for palliative patients. Parameter γ (γ < 1) indicates the percentage None of the above-mentioned studies take into account future arrivals, and all of them are tested ∪ P. Each instance consists of a set of ﬁxed patients with appointments made from the ¯P ∪ˆP. The set of days in the planning horizon is denoted as T . Each patient i ∈ P has an , which is the recommended deadline to start the treatment. Each patient i is associated with As our objective is to minimize overdue time and waiting time, we propose a model to determine of reserved capacity. receives his/her ﬁrst treatment on day t, linac l. The model is as follows: term) with the respective weights ω enforce an equal distribution of waiting time and overdue time between patients. Constraints (2) ensure all patients are scheduled within the planning horizon. Constraints (3) ensure no patients are scheduled before their ready date. Constraints (4) make sure linac capacity is respected for the entire course of treatment. Constraints (5) reserve a portion of linac capacity for palliative patients. In this section, we propose several scheduling strategies for radiotherapy treatments. All strategies utilize online scheduling for palliative patients, i.e., their treatments are scheduled for the earliest possible date on an available linac when the treatment request is submitted. A portion of linac capacity is reserved for palliative patients. The proposed strategies differ in the manner in which curative patients are handled. All scheduling strategies are summarized in Table 1. This strategy is the closest one to the approach used by scheduling clerks at CHUM. Once a patient is admitted (usually when their treatment plan is approved), the algorithm looks up one or two weeks in On the set of new patientsˆP, we deﬁne a binary variable xwhich holds value 1 if patient i The objective function (1) minimizes waiting time (the ﬁrst term) and overdue time (the second advance depending on the patient’s category (P3 or P4). The ﬁrst feasible date for accomodating all of the patient’s fractions is then chosen. A date is considered eligible if on this day, and the following (I− 1) days, there is a linac with enough remaining capacity to treat the patient, with I the number of fractions of the patient. An illustration of the greedy heuristic can be found in Figure 2. In batch scheduling, treatment requests are accumulated for a period of time and then a scheduling decision is made by the end of the period, e.g., daily or weekly. At each scheduling decision, a set of patients admitted from the day after the previous scheduling decision to the current day are scheduled using the IP model in Section 4.1. A visualization of batch scheduling can be found in Figure 3. In this scheduling strategy, we assume that all patient arrivals are known in advance. The algorithm ﬁrst schedules palliative patients for the ﬁrst eligible day after their arrival. Curative patients admitted during the simulation period are then scheduled using the IP model in Section 4.1, without reserving a portion of linac capacity for palliative patients. The scheduling decision is made on the ﬁrst day of the scheduling period. Having all future patient arrivals known in advance is an unrealistic assumption. However, it provides a bound for other scheduling strategies. No strategy can bypass ofﬂine scheduling due to the lack of information on future arrivals. It also provides a picture of how a “perfect schedule” would look if we had a precise prediction of future arrivals. 4.2.4 Online scheduling using regression - a machine learning approach This scheduling strategy is the main contribution of the paper. Scheduling is carried out in an online fashion similar to the greedy heuristic. However, instead of looking up one or two weeks in advance, we apply a regression model to predict a start date for a patient. The algorithm then looks for an eligible date starting from the predicted day. An illustration of the algorithm is given in Figure 4. The details of the regression model will be presented in Section 4.3. In most cancer centers, the number of linacs is ﬁxed. The arrival rate of patients is usually stable and can be modelled as a Poisson distribution. Given an instance with a number of linacs and an arrival rate, an optimal ofﬂine solution (referred to simply as an ofﬂine solution) given by ofﬂine scheduling (Section 4.2.3) provides an “ideal” schedule where all future arrivals are known in advance. All other scheduling strategies based on the gradual revelation of patient arrivals share the same goal of achieving solutions as close as possible to ofﬂine solutions. The intuition of our approach is that if we have a large enough number of instances and their ofﬂine solutions, we might be able to learn the patterns in the ideal optimal waiting time of patients. As a result, given the current occupancy of linacs and the treatment plan of a patient, we can predict a “good” waiting time for the patient. In the following section, we describe our method of training the regression model and applying it in a machine learning-based scheduling algorithm, which we refer to as a prediction-based approach. A problem instance is characterized by a number of linacs |L| and an arrival rate λ. A pair (|L|, λ) is referred to as an instance setting, which represents a typical hospital/cancer center with a ﬁxed number of linacs and a stable arrival rate. The number of time blocks per linac in all our problem settings is constant and is set as 120 blocks of 5 minutes per linac per day. Each instance setting is associated with a regression model. Our reasoning is that each hospital has its own historical ideal scheduling patterns and hence needs a separate regression model that learns from its past data. For each instance in the training set, an ofﬂine solution is obtained by solving the ofﬂine scheduling as in Section 4.2.3. A set of training examples is then constructed from the instance and its ofﬂine solution. lem instance has a set of simulation days (denoted as K), which consists of several days, each of which observes a set of patients admitted to the center (denoted as P hence consists of a ﬂow of patients admitted to the hospital daily during the simulation period, which is referred as a patient ﬂow ζ, where ζ = {P of patients to a set of dates (D) and linacs (L): s : P × D × L → {0, 1}, where s assigned to day d, linac l. corresponding date is denoted as d(φ). At a time point φ, the present capacity of linacs on date d is the available capacity after deducting all treatment slots on the corresponding date that are occupied by patients admitted (and scheduled) before the time point φ, ˆc C is the total linac capacity, p respectively. days in the sample horizon, horizon at the time point φ. In our problem, the sampling horizon is set as 50 days after d(φ), patient is not scheduled within 50 days after his/her admission. Therefore, when making a scheduling decision, the linac capacity search is restricted to a window of 50 days after his/her admission. a label is created for each curative patient in the patient ﬂow. The label of a patient i is the patient’s waiting time w admission time φ = α relevant to the scheduling task, i.e., the patient’s admission date a of sessions I used to schedule curative patients only, we create one training example for each new curative patient in the instance. At the beginning of the algorithm, the present time point is set as the beginning of the ﬁrst day in the simulation period K and the present capacity each day d ∈ K, the set of patients admitted on that day (P patient is curative, a training example is created and added to the set of training examples. After each iteration, regardless of the patient’s priority, the present capacity of the corresponding patient from the ofﬂine solution s the patient ﬂow are visited. ElasticNet, Lasso, SVR, Decision Tree, Random Forest, and XGBoost. Random Forest and XGBoost give comparable performance and outperform the other models. However, XGBoost requires less training time than Random Forest. In addition, the differences between the error rates in the training set and the testing set produced by XGBoost are smaller compared to that of Random Forest, which implies that XGBoost is less prone to overﬁtting. We therefore choose XGBoost for our regression model. The detailed results of the training phase can be found in A. The regression model is embedded in an algorithm to schedule RT treatments. The algorithm is presented in detail in Algorithm 2. When a new patient is admitted, there are two possibilities. If the patient is palliative, they will be scheduled on the ﬁrst eligible date. If the patient is curative, an input To explain the algorithms used to construct training examples, we describe some terms. A prob- The present time point at any moment during the simulation period is denoted as φ, and the The state of an instance at a time point φ, denoted asˆC, is a set of present capacity of all = {d(φ), d(φ) + 1, . . . , d(φ) + 49}, since in our realistic instance settings, it is unlikely that a Given an instance and its ofﬂine solution s, a training example consisting of an input vector and , w), where the input vector X= {ˆC, a, r, I, d, p, e}. The algorithm to create training examples is presented in Algorithm 1. As the regression model is In the preliminary experiments, different regression models are tested, including MLP, SGD, Algorithm 1: Generating training examples vector is constructed as described in Section 4.4. The input vector is fed to the trained regression model to get a predicted waiting time. A predicted starting date is then derived and utilized in the algorithm presented in Section 4.2.4 to construct a schedule. To evaluate the proposed algorithms, two experiments are carried out. The ﬁrst experiment aims to examine the performance of the proposed algorithms on instances generated based on real data. The testbed is designed to offer an overview of the algorithms’ behavior in different scenarios, i.e., different hospital sizes and crowding levels. The second experiment aims to test the algorithms on real patient ﬂows from CHUM. Based on preliminary experiments (see B)), the reservation rate for greedy heuristic and batch scheduling strategies is set at 15% of treatment capacity. The reservation rate for the prediction-based approach is set at 10%. An overview of the historical data at CHUM is given in Section 5.1 while the generation of test instances is described in Section 5.2. The results for the two experiments are presented in Section 5.3 and 5.4, respectively. We have access to historical data from CHUM for a 3-year period, from September 2017 to July 2019, which consists of 4,538 patients and 68,439 treatments. CHUM is equipped with 12 treatment rooms, each room cotaining a linac. Rooms A, B, C, D, E have identical generic linacs. Most patients treated in rooms G, K, and L can be treated in the 5 generic rooms as well. However, a small percentage of treatments (2 to 3%) are specialized treatments that are bounded to those rooms. Room F is a special room dedicated to hyperfractionated radiation therapy. Room J offers cyberknife treatments. Rooms H and O are special linacs dedicated to some rare treatments which account for less than 0.1% of treatments. patients are curative (more than 70%) with 14- or 28-day treatment deadlines in 2017-2018. The remaining patients are mostly palliative type P2 with 3-day treatment deadlines. A small portion of patients are emergency patients (type P1) who require urgent treatment with a one-day deadline. More than 70% of P2 and P3 patients at CHUM did not meet the recommended treatment deadlines. Patients are classiﬁed into four categories with different treatment deadlines. The majority of Patient categories along with their waiting time targets and percentage of overdue treatment and average waiting time are listed in Table 2. patients having 25-minute fractions (more than 50%). The distribution of fraction lengths by patient category can be seen in Figure 5. Figure 6 shows the number of fractions by patient category. From this data, we can see that most palliative patients have less than ﬁve fractions, while the number of fractions of curative patients distributes from 1 to 35 sessions with peaks at 5, 15, 20, 25, 30, and 33 sessions. A small portion of patients have more than 35 sessions. To describe how our instances are generated from CHUM’s real data, we ﬁrst deﬁne some terms. A personal treatment plan is a treatment plan tailored to a particular patient. It is decided by a team of physicians and specialists based on the patient’s diagnosis and condition. For convenience, for the rest of the paper, we use the term treatment plan to refer to a personal treatment plan. A treatment plan provides information such as the number of fractions and fraction length. We create a patient pool, which consists of all patients and their treatment plans taken from CHUM’s dataset. The patient pool does not include patients’ personal information and their treatment timelines (dates and times of The fraction length of patients at CHUM ranges from 10 to 165 minutes, with the majority of appointments). consists in a number of linacs and their capacity, along with a set of appointments made in the previous scheduling decisions. A patient ﬂow consists of a daily ﬂow of new patients admitted to the hospital during a simulation period. Given an arrival rate λ and a set of simulation days K, a set of |K| numbers is generated respecting a Poisson distribution with the event rate of λ. For each day d ∈ K, a corresponding number of virtual patients are generated and their admission dates are subsequently set as d. Each patient is assigned to a treatment plan selected randomly from the patient pool. A ready date for each patient is then generated based on their category. The ready date for P1 patients is always the same as their admission date. P2 patients have ready dates ranging from 0 to 2 days after their admission date while curative patients (P3 and P4) have ready dates ranging from 5 to 7 days after their admission date. The due date is calculated from the admission date and the patient’s category listed in Table 2. A problem instance consists of an instance scenario and a patient ﬂow. An instance scenario greedy heuristic (Section 4.2.1) is run in a “warm-up” period to ﬁll up linacs. When the occupancy of linacs reaches 90% of its capacity on any day, the warm-up simulation stops. The date with the highest occupancy is set as date 0 in the simulation period of the new instance. Appointments starting from date 0 are copied to the instance scenario of the newly-created instance. To examine the algorithms’ performance on different hospital sizes and crowding levels, we generate instances with a wide range of linac numbers and arrival rates. Firstly, we identify a realistic range of arrival rates that a hospital with a given number of linacs can accommodate. For that purpose, two types of capacity simulation are utilized. In the ﬁrst capacity simulation, we run the greedy algorithm in Section 4.2.1 without imposing the capacity constraints, i.e., we assume that the hospital has enough capacity to accept all treatment requests. We then measure and plot the average weekly occupancy rate. An example can be found in Figure 7a, which shows the results of the ﬁrst capacity simulation for 3 linacs with arrival rates of 3.5, 4.0, 4.5, and 5.0, respectively. The red dotted line represents the linac capacity. From the plot, we can see that arrival rates 4.5 and 5.0 result in overload for multiple weeks during the simulation period. An arrival rate of 3.5 is in the safe zone, with the occupancy rate remaining mostly below the linac capacity, while an arrival rate of 4.0 can cause overload in some weeks but, is still generally within the safe zone. observe the progression of the weekly average waiting time. If the average waiting time increases over time, the arrival rate is too high for a hospital of the given size to handle. A stable average waiting time indicates that the arrival rate is reasonable. Figure 7b shows the results of the second capacity simulation for 3 linacs. As can be seen from the ﬁgure, an arrival rate of 5.0 causes the average waiting time to increase rapidly over time. This agrees with the observation from the ﬁrst capacity simulation. The waiting time increase with an arrival rate 4.5 is less steep but is still potentially problematic for the hospital. Arrival rates of 3.5 and 4.0 are the most reasonable number for the hospital with stable lines. The two capacity simulations hence complement each other and we can conclude that arrival rates from 3.5 to 4.5 are reasonable for a hospital with 3 linacs, while an arrival rate of 4.5 is potentially problematic. instance settings. For each instance setting (a number of linacs and an arrival rate), 500 instances are generated, 400 of which are used for training the regression model while the remaining 100 are used for testing. We compare the six scheduling strategies listed in Section 4.2, namely greedy heuristic, daily batch scheduling, biweekly batch scheduling, weekly batch scheduling, and prediction-based approach. The algorithms are tested on the 100 test instances and the average waiting time and overdue time (in days) of patients by category are reported. To generate an instance scenario, we ﬁrst generate an empty schedule and an instance ﬂow. The In the second capacity simulation, we run the greedy algorithm with capacity constraints and then After identifying a reasonable range of arrival rates, we carry out experiments on those realistic plotted on the left while the average overdue time is plotted on the right. In the test instances of this setting, there are no P1 patients or the number is not signiﬁcant. As can be seen from the ﬁgure, in an ideal situation where all future arrivals are known in advance, the overdue time is insigniﬁcant in all patient categories. The greedy heuristic and the three batch scheduling strategies are similar in waiting time and overdue time. Overdue treatments mostly occur in P2 and P3 patients. The prediction-based approach shows slightly better average waiting time and overdue time in all patient categories. It also results in less deviation in waiting time and overdue time between patients. rates of 4.0 and 4.5, respectively. Looking at those ﬁgures, we observe an interesting trend that the more crowded the hospital is, the better the prediction-based approach performs compared to the batch scheduling strategies and the greedy heuristic. The most signiﬁcant difference is at P2 patients, the most challenging category for other algorithms. As P2 patients account for almost 30% of patients and the treatment deadlines are urgent (only 3 days after their admission date), it is difﬁcult to decide how much space should be reserved for their arrivals when scheduling curative patients. Preliminary results show that a lower rate would result in longer delays for palliative patients while a higher rate would result in a low occupancy rate and more overdue treatments for curative patients. The prediction-based approach, despite the lack of information compared to batch scheduling strategies, demonstrates the ability to learn from ofﬂine schedules how to delay the treatment of curative patients in order to make space for palliative patients based on the present state of the schedule. This explains the lower overdue rates associated with prediction-based scheduling in palliative patients. more hospital sizes, i.e., 5 linacs and 8 linacs. Numerical results for hospital sizes of 4 linacs, 6 linacs, and 7 linacs can be found in C. are 6.5, 7.0, and 7.5 (see Figure 11). The waiting time and overdue time given by the proposed algorithms on those settings are shown in Figures 12, 13, and 14, respectively. What stands out in the ﬁgures is that the differences between the algorithms are more profound than in the previous smaller settings with 3 linacs, especially when the arrival rate increases. The prediction-based approach offers better waiting time and overdue time in palliative patients (both P1 and P2) compared to scheduling methods while maintaining a comparable waiting time in curative patients. Similar to the case of 3 linacs, the more crowded the hospital is, the better the prediction-based approach performs compared Figure 8 shows the results for 3 linacs with an arrival rate of 3.5. The average waiting time is Figures 9 and 10 show results for the same hospital size in more crowded scenarios, with arrival To investigate the algorithms’ performance in bigger hospitals, we run the experiments on two For hospitals with 5 linacs, the realistic arrival rates identiﬁed through the capacity simulations to other approaches. Another observation from the boxplots is that the average waiting time (and overdue time) of P4 patients in greedy heuristic and batch scheduling is lower than the others, which also leads to higher overdue time in palliative patients. It shows that greedy heuristic and batch scheduling are not effective in delaying curative treatments to accommodate palliative ones. capacity simulations are those with less than 12 patients per day, as an arrival rate of 13.0 causes the weekly average waiting time to increase over time (see Figure 15). We hence test three settings with arrival rates of 10.0, 11.0, and 12.0. The results are shown in Figures 16, 17 and 18, respectively. From these results, we derive two observations. First, in agreement with the experiments on the settings with 3 and 5 linacs, we conclude that the larger and more crowded a hospital is, the better the prediction-based approach performs compared to the other scheduling strategies. Second, our approach scales well on large instances. To our knowledge, most studies in the literature consider much smaller hospital sizes, and in reality, most hospitals do not have more than 8 linacs operating full-time. In large hospitals, however, as the number of linacs and patients are greater, the scheduling task becomes extremely challenging for most algorithms. Our prediction-based approach offers an online, fast approach with outstanding performance. After conﬁrming that our prediction-based approach performs well on generated instances, we now evaluate the algorithms on real instances from CHUM. We extract the real patient ﬂow for a one-year period starting from July 2018. “Unusual” patients that are admitted during weekends or holidays (2 Finally, for the largest setting that we study, 8 linacs, the reasonable arrival rates suggested by the out of 2962 patients) are removed from the dataset. As mentioned in Section 5.1, CHUM’s facility consists of 12 linacs. Two special linacs (O and H) are special linacs reserved for very rare treatments. Linac J is a cyberknife and patients requiring this machine can not be treated on the generic linacs. We therefore remove all patients bounded to their special linacs (O, H, and J), who account for 9% of patients. This results in 2695 patients. Among the remaining 9 linacs, only 5 generic linacs (linacs A to E) operate full-time, 8 hours a day. The remaining 4 linacs operate on average for half of a working day, due to the lack of technicians. Therefore, we construct real instances using the extracted patient ﬂow and 7 linacs operating full-time (8 hours a day). We then use the ﬁrst 60 days to initialize a partially-ﬁlled schedule in the same manner described in Section 5.2. The next days in the patient ﬂows are used for the actual patient ﬂow of the instance. We ﬁt the actual patient ﬂow into a Poisson distribution and the best ﬁt is λ = 10.1. arrival rate of 10.1 with a simulation period of 30 days. 400 instances are used for training and the remaining 100 instances are for testing. Similar to Section 5.3, we run all proposed scheduling strategies on 100 test instances. The results are presented in Figure 19. Similar to the results on generated instances in Section 5.3, the results show that the prediction-based approach outperforms the greedy approach as well as the batch scheduling strategies in palliative patients while maintaining a comparable waiting time and overdue time in curative patients. this decision. First, we aim to examine the performance of the algorithms in a long run. Second, we want to verify the performance of the regression model on a simulation period longer than that of the observed data during training (30 days). The results are shown in Figure 20 and Table 3. The ﬁrst observation from the table is that all strategies result in no waiting and overdue treatment in P1. Regarding P2, the greedy heuristic gives the lowest waiting time of 1.8 days, while the predictionbased approach stands close with 1.83 days. The prediction-based approach, however, offers the lowest overdue time for P2 (0.19 days) among all scheduling strategies. Regarding curative patients, we observe that most overdue treatments occur in P3, which is in line with the real-life situation. The prediction-based approach continues to stand out with the lowest overdue time in P3 (2.72 days) To train the regression model, we generate 500 instances with the scenario of 7 linacs and an We then test the real instance with a simulation period of 90 days. There are two reasons behind and the second lowest overdue time in P4 (0.02 days, right behind daily batch scheduling with 0 overdue). This result is notable given that the simulation period is three times longer than that of the training data. The greedy heuristic results in high overdue time in curative patients, especially P3. The average waiting time and overdue time across all patient categories produced by the predictionbased approach are also the lowest, while the average occupancy rates during the simulation period are similar among scheduling strategies. A visualization of occupancy rates in different scheduling strategies can be found in Figure 21. As one can see, the prediction-based approach results in a more stable occupancy rate along the simulation period compared to the others. Scheduling radiotherapy treatment is a difﬁcult task due to the stochastic nature of patient arrivals. In this paper, we propose a machine learning-based approach that takes future arrivals into account when making a scheduling decision. A regression model is trained to recognize the scheduling patterns in ofﬂine solutions generated by an IP model, with the assumption of perfect knowledge of future arrivals. The trained regression model is then used to predict the waiting time of a given patient. The model is embedded in an online scheduling algorithm to schedule RT treatments for patients on arstrategy rival. The algorithm is compared with a greedy heuristic and three batch scheduling algorithms using an IP model. All algorithms are evaluated in a simulation with a rolling horizon. The test instances are generated based on real data from CHUM to cover different hospital sizes and crowding levels. The numerical results show the superior performance of the proposed prediction-based approach. It results in a lower average overdue time and waiting time in palliative patients, while maintaining similar numbers in curative patients as compared with the greedy heuristic and the batch scheduling algorithms. It proves the algorithm’s ability to “look ahead” while making scheduling decisions in order to prevent the lack of capacity for emergency patients. The proposed approach offers the advantages of online scheduling, i.e., convenience for patients and staff, while eliminating the disadvantage of being short-sighted due to the small search space. The approach also scales decently with instance sizes. The algorithm runs successfully for instances with up to 8 linacs. In the literature, instances of this size have been tackled only by heuristics and in a static setting without a rolling horizon. The prediction-based approach also shows its credibility in a real instance from CHUM. In addition, we show that despite the short simulation period of 30 days in test instances, the algorithm performs well for the instance with 90 days of simulation. In this section, we present the training results using different regression models. We present the results on different instance settings, from the easiest to the most difﬁcult ones. Eight regression models are tested. For each model, each instance setting, we report the training time, mean squared error (MSE) and mean absolute error (MAE) on both training set and testing set. the tables, we observe that Random Forest and XGBoost consistenly give the best results in both training set and testing set. However, Random Forest requires more time for training and it becomes worse in difﬁcult settings, i.e., when the size of the training test increases (51, 128.93, and 265.83 seconds in instance settings of 3, 6, and 8 linacs, respectively). Meanwhile, XGBoost takes only 7.71 seconds in 3 linacs and 37.8 seconds in 8 linacs. In addition, even though Random Forest gives the lowest error rates, the MAE in the testing set given by Random Forest and XGBoost are very close. A lower differences between the error rates in training test and setting test resulted by XGBoost also indicates that it is less prone to overﬁtting compared to Random Forest. Based on the above analysis, we choose XGBoost as the regression model for our algorithm. Three instance settings are tested, from the easiest to the most difﬁcult: • 3 linacs, arrival rate of 3.5 • 6 linacs, arrival rate of 8.0 • 8 linacs, arrival rate of 12.0 The training results for the three settings are presented in Table 4, 5, and 6, respectively. From As the percentage of linac capacity reserved for palliative patients has a great impact on the scheduling outcome, we conduct an experiment to identify the best reservation rate. The experiment is carried out on a setting of 4 linacs and an arrival rate of 6.0. 100 instances are tested with four different reservation rates, namely 5%, 10%, 15%, and 20%. As there is no reservation in ofﬂine scheduling, ﬁve scheduling strategies are tested, namely greedy heuristic, daily, biweekly, weekly, and predictionbased. The results are shown in Figure 22. Our ﬁrst observation from the ﬁgure is that the higher the reservation rate, the lower the overdue time of palliative patients (P1 and P2). However, the trade-off coming with that low overdue rate is a high number of overdue times in curative patients (P3 and P4). For greedy heuristic and batch scheduling strategies (daily, biweekly, and weekly), with the consultant from CHUM, we decide that a reservation rate of 15% results in the best equilibrium between the delays in curative and palliative patients. For the prediction-based approach, the reservation rate of 10% is chosen due to a good overdue time in palliative patients while still maintaining a similar overdue time in curative patients compared to the remaining approaches. In this section, we present some additional numerical results for some more instance settings. For instances with 4 linacs, the capacity simulations (Figure 23) suggest that the realistic range of arrival rates is less than 6.0. We therefore test instance settings with arrival rates of 5.0, 5.5, and 6.0. The results for those settings can be found in Figure 24, 25, and 26, respectively. instance settings with arrival rates of 7.0, 8.0, and 9.0. The results are plotted in Figures 28, 29, and 30, respectively. the results for an instance setting with 7 linacs and an arrival rate of 10.1 has already been shown in Section 5.4, we present the results for arrival rates of 9.0 and 10.0. Those results can be found in Figures 32 and 33. For instances with 6 linacs, based on the results from the capacity simulation (Figure 27), we test For instances with 7 linacs, the suitable range of arrival rate is less than 10 (see Figure 31). As [1] M. B. Barton, S. Jacob, J. Shaﬁq, K. Wong, S. R. Thompson, T. P. Hanna, and G. P. Delaney. [2] E. K. Burke, P. Leite-Rocha, and S. Petrovic. An integer linear programming model for the [3] E. Castro and S. Petrovic. Combined mathematical programming and heuristics for a radiother[4] Z. Chen, W. King, R. Pearcey, M. Kerba, and W. J. Mackillop. The relationship between waiting [5] C. Coles, L. Burgess, and L. Tan. An audit of delays before and during radical radiotherapy for [6] D. Conforti, F. Guerriero, and R. Guido. Optimization models for radiotherapy patient schedul[7] D. Conforti, F. Guerriero, and R. Guido. Non-block scheduling with priority for radiotherapy [8] S. Frimodig and C. Schulte. Models for radiation therapy patient scheduling. In International Estimating the demand for radiotherapy from the evidence: a review of changes from 2003 to 2012. Radiotherapy and oncology, 112(1):140–144, 2014. radiotherapy treatment scheduling problem. arXiv preprint arXiv:1103.3391, 2011. apy pre-treatment scheduling problem. Journal of Scheduling, 15(3):333–346, 2012. time for radiotherapy and clinical outcomes: a systematic review of the literature. Radiotherapy and Oncology, 87(1):3–16, 2008. cervical cancer–effect on tumour cure probability. Clinical oncology, 15(2):47–54, 2003. ing. 4OR, 6(3):263–278, 2008. treatments. European Journal of Operational Research, 201(1):289–296, 2010. Conference on Principles and Practice of Constraint Programming, pages 421–437. Springer, 2019. [9] Y. Gocgun. Simulation-based approximate policy iteration for dynamic patient scheduling for [10] T. Kapamara and D. Petrovic. A heuristics and steepest hill climbing method to scheduling [11] T. Kapamara, K. Sheibani, O. C. Haas, C. R. Reeves, and D. Petrovic. A review of scheduling [12] E. Larsen, S. Lachapelle, Y. Bengio, E. Frejinger, S. Lacoste-Julien, and A. Lodi. Predicting [13] A. Legrain, M.-A. Fortin, N. Lahrichi, and L.-M. Rousseau. Online stochastic optimization of radiation therapy. Health care management science, 21(3):317–325, 2018. radiotherapy patients. In Proceedings of the 35th International Conference on Operational Research Applied to Health Services, Catholic University of Leuven, Belgium. Citeseer, 2009. problems in radiotherapy. In Proceedings of the Eighteenth International Conference on Systems Engineering (ICSE2006), Coventry University, UK, pages 201–207, 2006. tactical solutions to operational planning problems under imperfect information. INFORMS Journal on Computing, 2021. radiotherapy patient scheduling. Health care management science, 18(2):110–123, 2015. [14] W. J. Mackillop. Killing time: the consequences of delays in radiotherapy. Radiotherapy and [15] J. Maschler and G. R. Raidl. Particle therapy patient scheduling with limited starting time [16] J. Maschler, M. Riedler, M. Stock, and G. R. Raidl. Particle therapy patient scheduling: First [17] S. Petrovic and P. Leite-Rocha. Constructive approaches to radiotherapy scheduling. In Pro[18] S. Petrovic, W. Leung, X. Song, and S. Sundar. Algorithms for radiotherapy treatment booking. [19] T.-S. Pham, L.-M. Rousseau, and P. De Causmaecker. A two-phase approach for the radiother[20] A. Saure, J. Patrick, S. Tyldesley, and M. L. Puterman. Dynamic multi-appointment patient [21] S. Tyldesley, G. Delaney, F. Foroudi, L. Barbera, M. Kerba, and W. Mackillop. Estimating [22] B. Vieira, E. W. Hans, C. van Vliet-Vroegindeweij, J. Van De Kamer, and W. Van Harten. [23] B. Vieira, D. Demirtas, J. B. van de Kamer, E. W. Hans, L.-M. Rousseau, N. Lahrichi, and W. H. [24] P. Vogl, R. Braune, and K. F. Doerner. Scheduling recurring radiotherapy appointments in an Oncology 84.1, 1(4), 2007. variations of daily treatments. International Transactions in Operational Research, 2018. heuristic approaches. In Proceedings of the 11th Int. Conference on the Practice and Theory of Automated Timetabling. Udine, Italy, 2016. ceedings of the World Congress on Engineering and Computer Science, pages 722–727, 2008. In 25th Workshop of the UK planning and scheduling special interest group, pages 105–112, 2006. apy scheduling problem. Health Care Management Science, pages 1–17, 2021. scheduling for radiation therapy. European Journal of Operational Research, 223(2):573–584, 2012. the need for radiotherapy for patients with prostate, breast, and lung cancers: veriﬁcation of model estimates of need with radiotherapy utilization data from british columbia. International Journal of Radiation Oncology* Biology* Physics, 79(5):1507–1515, 2011. Operations research for resource planning and-use in radiotherapy: a literature review. BMC medical informatics and decision making, 16(1):1–11, 2016. van Harten. Radiotherapy treatment scheduling considering time window preferences. Health care management science, pages 1–15, 2020. ion beam facility. Journal of Scheduling, 22(2):137–154, 2019.