It is notoriously dicult to securely congure HTTPS, and poor server congurations have contributed to several attacks including the FREAK, Logjam, and POODLE attacks. In this work, we empirically evaluate the TLS security posture of popular websites and endeavor to understand the conguration decisions that operators make. We correlate several sources of inuence on sites’ security postures, including software defaults, cloud providers, and online recommendations. We nd a fragmented web ecosystem: while most websites have secure congurations, this is largely due to major cloud providers that oer secure defaults. Individually congured servers are more often insecure than not. This may be in part because common resources available to individual operators—server software defaults and online conguration guides—are frequently insecure. Our ndings highlight the importance of considering SaaS services separately from individually-congured sites in measurement studies, and the need for server software to ship with secure defaults. security, tls, https, tls conguration, defaults, recommendations HTTPS provides the foundation for secure web communication, however, conguring HTTPS securely has proven to be notoriously dicult [56]. This is largely due to the complexity of the underlying TLS transport protocol, which requires server operators to make a wide range of conguration decisions. Most web servers do not ship with optimal TLS settings, and many come with insecure options congured by default. To make matters worse, there are hundreds of options to select from. As of early 2020, there are over 360 cryptographic ciphers, 44 elliptic curves, 40 protocol extensions, and 6 protocol versions [27]. Seemingly benign settings like session ticket lifetime have nuanced security implications [29,70], and recommendations continually change as vulnerabilities (e.g., [9,29, 29, 34, 35, 41]) are discovered. The security community has released hundreds of conguration guides [4,18], online tools for verifying conguration correctness [67], and third-party software to automatically congure servers [7]. Despite these solutions, large swaths of the web have been vulnerable to attacks because they continue to use insecure congurations. For example, when the FREAK attack was disclosed in 2015, 10% of popular websites and 37% of browser-trusted websites still supported export-grade ciphers, which had been deprecated decades earlier [41]. In this paper, we try to better understand whether servers remain miscongured today, and if so, why. We start by empirically evaluating the security posture of the Tranco Top Million sites [63]. We reverse-engineer the conguration of each website by performing a series of TLS handshakes with varying cryptographic parameters and grade the user-congurable components of each conguration. We nd that approximately 40% of sites have optimal settings and 90% of sites have secure settings. While this initially appears promising, these aggregate statistics mask the coexistence of two distinct ecosystems with dramatically dierent security postures. One ecosystem consists of optimal congurations dened by SaaS (Software as a Service) providers that use secure-by-default options for all hosted sites. The other consists of individual operators who are likely manually conguring servers and struggling to do so securely. Unfortunately, the adoption of SaaS masks that operators still cannot achieve secure congurations, despite aggregate ecosystem health improving. To better understand why individually congured sites are much less likely to be secure, we quantify the inuence of several factors on conguration security that operators make decisions about when manually setting up TLS: provider, web server software, and online recommendations. We investigate the default security of the two most popular web servers, Apache and Nginx, as well as online recommendations for conguring them on Ubuntu. We nd that most online recommendations are incomplete and insecure: 89% recommend TLS 1.0, 55% deprecated ciphers, 28% insecure ciphers, and 8% are vulnerable to known attacks. Similarly, defaults provided by Nginx and Apache provide sub-optimal security. Our work suggests that the current approach of sub-optimal defaults along with online recommendations that guide operators to x those settings, is fundamentally broken. We echo previous studies’ calls for xing systems to be secure by default [36,57]. We also encourage future studies to consider SaaS services separately from individually-congured services since aggregate statistics can otherwise be misleading. The HTTPS ecosystem and Web PKI has been subject to much attention and there is a large body of prior work analyzing server usability and misconguration [36,57], TLS clients and interception [40,46,51,54], server conguration [42,43,56,60,70], TLS 39, 44, 52, 74]. We highlight relevant prior work below. HTTPS Deployment Diculty.In 2014, Fahl et al. investigated common reasons that websites have certicate errors [48]. Later, in 2017, Krombholz et al. [57] showed that technically procient users encounter challenges deploying TLS correctly. In 2019, Bernhard et al. [36] analyzed how 10 operators deployed HTTPS on Apache 2 with and without Let’s Encrypt [28]. Both Krombholz and Bernhard use Qualys SSL Labs server test [67] to grade deployments. Bernhard did not nd signicant evidence to suggest that Let’s Encrypt led to more secure HTTPS deployments. Our study is complimentary and focuses on real-world deployment diculties rather than analyzing laboratory participants. TLS Measurements.Felt et al. [49] track the evolution of HTTPS adoption on the Web from 2016-2017 from both a user perspective (via aggregate user metrics from Google Chrome and Mozilla Firefox), as well as server support for HTTPS among top and long-tail websites. Kotzias et al. [56] ngerprint TLS clients connecting to servers at several academic institutions in North America from 2012-2017 and document trends in support for cipher suites, protocol versions, and vulnerabilities over time. They similarly nd a long tail in TLS deployment that suggests the demand for backwards compatibility. Their results provide insights into popular client congurations incoming into servers in a certain geographical area, such as browsers and OS-provided libraries, but provides limited visibility into the server ecosystem, which is the focus of our study. More recently, Holz et al. [53] track the deployment of TLS 1.3 from 2017-2019–a small subset of our measurements. ICSI SSL Notary [33] similarly provided high level statistics of TLS sessions from 10 participating organizations. SSL Pulse [65] is a dashboard for monitoring the quality of TLS support over time across 150K HTTPS websites sample from the Alexa Top Million. For this subset of sites, they present the distribution of grades as well as support for a number of individual directives (e.g., protocol support, ciphers, key exchange strength, etc.) and the number of sites being vulnerable to various attacks (e.g., DROWN, ROBOT, POODLE, etc.) Most recently, Lee et al. investigate the spatial dierences in TLS congurations and security of 7M domains hosted on content delivery networks (CDNs) and other web hosting services. They nd that it is possible to redirect TLS handshake messages to weak TLS servers of which both the origin server and the client may not be aware of [59]. While measuring the support for directives is helpful in assisting operators in understanding the deprecation of specic features, they do not provide insight into the higher level decisions made by operators (e.g., to keep system defaults, to follow recommendations, or to migrate to a cloud provider). Rather than focus on individual components Qualys’ SSL Labs Test and SSL Pulse [65] do, we consider a site’s conguration as our unit of analysis. Our focus is on the various sources of inuence on the security of the HTTPS ecosystem (defaults, providers, and online recommendations). While we analyze specic conguration choices in order to determine whether a server is set up securely, this is a rst step in understanding how operators arrive at a conguration, rather than the end result of our analysis. As far as we are aware, no prior work has analyzed server operator decisions at scale or with this intent. As we will show, analyzing individual directives provides a misleading picture of the security posture of the HTTPS ecosystem, as it masks many notable dierences among web server software and provider. SSL Grading.Qualys’ SSL Server Test [67] provides numeric and letter grades for SSL servers. Qualys’ scheme [64,66] grades sites on their protocol support, cipher suite support and strength, key exchange support and strength, and TLS vulnerabilities. Our grading scheme is based on SSL Lab’s, but diers in a few ways. First, Qualys rates servers on their certicate and HTTP conguration in addition to TLS conguration. We do not grade servers on these categories as our focus is on TLS directives that are user-congurable for servers like Nginx and Apache. Certicate values are not congured by server operators, and the introduction of the CA/Browser Forum Baseline Requirements has resulted in certicates being consistently issued by authorities [58]. Our grading schemes are comparable in leniency: Qualys’ A+ and A grades roughly correspond with our A grade, their A and B grades with our Bs, their Cs and Ds with our Cs, and their Fs with our Fs. TLS Handshake.In HTTPS, communication is encrypted using the Transport Layer Security (TLS) protocol [25]. TLS handshakes are initiated when the client sends aClientHellomessage, which species the TLS version, cipher suites, and extensions that the client supports. Each cipher suite consists of four components: authentication algorithm, key exchange method, symmetric cipher, and message authentication code (MAC). The client may choose to list these cipher suites in its preferred order. The server replies to the client with aServerHellomessage that contains the server’s selection of TLS options (e.g., protocol version, cipher suite, extensions) from the client’s presented list of support. For a more detailed reference, we refer the readers to RFC 5246. Web Server Conguration.Server operators are faced with several decisions when conguring a web server. While some operators choose to host websites on cloud providers like Cloudare, which leave a limited amount of conguration options for users, others use popular open source software such as Apache [2], Nginx [19], and Lighttpd [16], which come equipped with a default conguration. Beyond acquiring and installing a certicate, operators often choose to manually congure the default settings, by enabling more secure features such as server cipher preference and disabling insecure ones like RC4 ciphers. Operators can draw on several sources for guidance in this process: ocial server specic documentation [8,20], online recommendations such as the Mozilla SSL Conguration Generator [18], personal blogs by security experts, and automatic tools that congure servers [7]. Online tests such as SSL Labs’ SSL Server Test [67] provide a means of testing the security of TLS congurations and identifying security issues. We start our analysis by collecting and grading the HTTPS congurations of the Tranco Top Million websites. In this section, we describe our HTTPS scanner and grading methodology. To note, we build a scanner instead of using SSL Labs’ due to the scale of our study—we scan several million sites, which would not have been possible in a reasonable time frame using SSL Labs’ API. We dene a conguration in terms of the TLS options that are congurable in the four most common user-congurable web sites: Nginx, Apache, Lighttpd, and IIS. This includes TLS version, cipher suites, session ID resumption, extension session ticket, ticket lifetime hint, compression support, server cipher preference, DieHellman (DH) group size, and Die-Hellman group, but excludes library-controlled settings like TLS Heartbeat support. To avoid the exponential explosion of variable space and because cipher suites are typically introduced by cipher, we analyze cipher components (e.g., ECDHE, 3DES, RC4, MD5) rather than individual TLS cipher suites. All features are binary indicators, with the exception of DH group size and ticket lifetime hint, which we discretize. To collect congurations, we introduce a scanner that reverse engineers the HTTPS settings of websites by performing a series of HTTPS handshakes that present varying sets of cryptographic parameters. We detail the scanner and handshakes below: HTTP(S) Support.We rst attempt a TLS handshake that emulates a modern browser by oering TLS 1.2 support and the union of ciphers present in the recent versions of Chrome, Safari, Firefox, and Edge.If this handshake succeeds, we attempt an HTTPGET / over TLS. We exclude hosts that do not complete these two handshakes from our study as they would not be accessible to normal users. We also note the certicate signature algorithm to decide whether to oer ECDSA or RSA ciphers in future handshakes. TLS Version.We check SSLv3–TLSv1.2 protocol support by iteratively sending TLS Client Hello messages that indicate support for progressively older TLS versions. For every message, we present the set of versions older than the server’s last indicated support. For example, if a server selects TLSv1.1 in response to our TLS1.2 handshake, we would present TLSv1, and if successful, SSLv3. We oer commonly supported cipher suites and curves in each handshake. We test support for SSLv2 and TLSv1.3 separately because they use dierent handshakes or mechanisms for indicating version support. Cipher Suite Support.We test support for DES, 3DES, RC4, IDEA, SEED, Camellia, ARIA, ChaCha, and AES symmetric ciphers, MD5, SHA-1, SHA-256, and SHA-384 MACs, and NULL or EXPORT components. We do not test for widespread support of PSK, SRP, ECCPWD, KRB, DSS, DH, or ECDH-based key exchange methods, MD2 MACs, or Anon signature algorithms, because we nd that less than 0.1% of sites in the Tranco Top Million support these algorithms.To measure cipher suite support, we send a Client Hello that indicates support for all cipher suites compatible with the presented certicate (i.e., ECDSA or RSA) and iteratively remove the server selected cipher until the handshake fails. Although browsers typically present fewer than 30 cipher suites, we nd that including 97 cipher suites (the maximum we oer in our rst handshake) does not preclude any server from completing a handshake. Extensions.We test support for TLS extensions by sending a single handshake that indicates support for the following extensions: server name, heartbeat, session ticket, ALPN, OCSP stapling, secure renegotiation, extended master secret, and signed certicate timestamp, and checking for selection in theServer Hello. If the server indicates support for heartbeat, we also test for the Heartbleed vulnerability. TLS Compression.We attempt a handshake with TLS compression methods deflate and LZS [55]. Session Resumption.We test support for session ID resumption and session tickets by sending two handshakes each, to establish and attempt to resume sessions. We implemented our scanner in Go, using the ZCrypto TLS library [26]. We have released our scanner at https://github.com/ stanford-esrg/tls-webserver-conguration-scanner under the Apache 2.0 license. In total, our algorithm completes 14–93 handshakes per server. The large range is primarily due to the large number of cipher suites that a server can theoretically support. On average, we perform 40–43 handshakes per site. Inspired by Qualys’ SSL Server Test [67], we dene a grading scheme to quantitatively compare the security provided by different congurations (see Section 2 for a comparison between our algorithm with Qualys’ SSL Server Test). We assign a grade of A (optimal), B (non-optimal but safe), C (weak, vulnerable to academic attacks), and F (severely broken, simple MITM possible) grades to websites. We grade sites based on 7 categories and assign the minimum score across the categories: Protocol Support.To receive an A, sites must support TLSv1.2 or 1.3 and must not support SSLv2 or 3. Sites that support SSLv2 receive an F; sites that do not support TLSv1.2 or 1.3 receive a C. Key Exchange.Sites must only support ECDHE key exchange for an A; sites must support a minimum 2048-bit DHE group or an uncommon 1024-bit group for a B. Sites with 768-bit DHE groups receive a C, and sites with smaller DHE groups receive an F. Symmetric Ciphers & MAC Algorithm.To receive an A, sites must support AEAD ciphers, and not support any of: Camellia, ARIA, IDEA, SEED, RC4, or DES ciphers, MD5, NULL or EXPORT ciphers. For a B, sites must not support any of: RC4 or DES ciphers, MD5 MACs, NULL or EXPORT components. To receive a C, sites must not support DES ciphers or any NULL or EXPORT components. Otherwise, sites will receive an F for supporting DES ciphers or any NULL or EXPORT components. Preferred Cipher.Sites must support server cipher preference and must prefer an AEAD cipher and Perfect Forward Secrecy (PFS) to receive an A. All other sites receive a B. Compression.Sites that support TLS compression receive a C, otherwise, they receive an A. Ticket Lifetimes.Sites with session ticket hints longer than a week receive a C; 1–7 days, B; and under 24 hours, A. While a session ticket hint can dier from the ticket lifetime, Springall et al. showed that they are nearly always the same in practice [70]. Vulnerabilities.Sites vulnerable to CRIME[10], POODLE[35], or FREAK[71] receive a C. Sites vulnerable to Heartbleed receive an F. Sites not vulnerable to any TLS attacks to receive an A. We analyze 1.16M websites that appeared in the Tranco Top Million [63] in August 2019. We performed our scan between September 4–8, 2019 from 3 servers at Stanford University. We completed Figure 1: CDF of site count by grade and ASN rank.— Cloudare’s dominance and its small set of A-grade conguration is responsible for approximately 50% of As, lifting the average grade for all sites. handshakes over a 102 hour period and waited a random 0–2400 second period between each handshake in order to prevent overloading sites. Of the 1.16M candidate sites, we were able to resolve 1.06M names and successfully complete a TCP handshake on port 443 with 890K. Of those, 678K sites presented a browser-trusted certicate that matched the name on the website and responded to an HTTPS GET /request. In the event of a non-TLS related error, our scanner attempts another handshake before proceeding. This extra attempt accounts for potential network loss. We followed the best practices set forth by Durumeric et al. [47], conguring the HTTP page on scan hosts to redirect to a website that explained our study. We received only one exclusion request. We extract the server software from the HTTPServerheader [24] and use MaxMind GeoIP2 GeoLite [13] to geolocate sites at the country-level. We identify Content Delivery Networks (CDNs) and Software as a Service (SaaS) providers from their Autonomous System (AS) number and name. Finally, to understand whether dierent types of sites have differing security proles, we map a random sample of 100K sites to the Alexa Top Sites [1] 17 categories.We were able to successfully map approximately 67% of our sample to categories. Across the 678K sites in our study, we nd 7.7K unique congurations in over 16K ASes. The most popular conguration accounts for 14% of sites and belongs to Cloudare. The long tail begins thereafter, with the next most popular conguration being adopted by only 3.3% of sites and hosted across 1,421 ASes. Nearly 90% of all sites have secure HTTPS settings (A or B). Nearly 40% receive an optimal A grade, 10% receive Cs, and only 1% Fs. While this initially appears very promising, the aggregate number masks notable Figure 2: CDF of site count by grade and conguration rank.— Sites receiving As concentrate in higher-ranking congurations, whereas congurations that are less commonly used are more insecure. dierences in the distribution of grades across server software and provider, which we detail in the remainder of this section. A small number of CDNs and unique congurations account for the majority of secure sites (A or B grade). Ten ASes account for approximately 72% of sites with As and 38% of Bs; 100 ASes account for 86% of As and 67% of Bs. At rst glance, this concentration may not appear surprising. Infrastructure providers host a large number of all sites. The top 10 and vast majority of the top 100 ASes belong to SaaS companies, cloud providers, and CDNs. Indeed nearly 73% of all websites—regardless of grade—are hosted in 100 ASes and 33% of sites are hosted in 10 ASes. However, as can be seen in Figure 1, sites with poor security do not see this concentration, and are widely spread across a large number of ASes: 100 ASes account for only 57% of Cs and 30% of Fs. We investigate the sites in the top 100 ASes and nd that in many cases, there is a single or small handful of congurations in popular SaaS/CDN/cloud networks that account for a signicant fraction of sites. This suggests that providers exert inuence on operators’ choice of conguration options, whether it be via a default conguration, limiting conguration options, or providing clear recommendations that operators use in practice. Within the top ten ASes, the most popular conguration in each AS is used by a signicant proportion of sites, and in each case, it is secure (i.e., receives either an A or B grade). At the extreme, a single Cloudare conguration accounts for 52% of all sites in our study that receive an A grade. The top 100 congurations that receive an A grade account for 97% of all A websites. In contrast, the top 100 congurations that receive an F grade account for only 18% of sites with Fs. In some cases, this is due to the provider oering their own SaaS service, even when the top conguration does not account for the majority of sites on the provider. For example, the most popular conguration in Amazon ASes belongs to Cloudfront, which oers Table 1: Primary reasons for grade downgrades—Primary factors contributing to downgrades from each grade to the next lower one. Each value represents the proportion of sites downgraded to each grade (from better grades) by reason. clients six possible security policies to choose from [21]. The dominant conguration accounts for 14% of Amazon sites and 5.6% of all sites in Tranco. We also see evidence of smaller SaaS providers operating within the cloud providers. For example, Google’s most dominant conguration is used in 39% of its sites and belongs to a hosted third-party provider, WP Engine [22,23]. We empirically infer the default congurations for providers, and provide the ve most popular congurations within each of the top 10 ASes in Tranco in Table 4. The default TLS settings are typically not advertised online and we found it intractable to create accounts for each provider, especially as each provider typically oers multiple plans, including enterprise policies. Some CDNs may provide more or less than ve default congurations, however, as can be seen in Table 4, any defaults we have missed are only used by a small proportion of sites in the tail of the distribution and are thus less impactful on the ecosystem as a whole. We nd that all of the dominant congurations are secure, receiving either an A or B grade. While we cannot exactly quantify the improvement in security that SaaS providers are responsible for due to the tremendous number of providers globally, we observe an unambiguous positive contribution to improving the security of the overall HTTPS ecosystem from even the ten most popular. There is a clear disparity in the security prole for sites hosted on large, well-known SaaS providers versus individually-congured sites, which are likely manually congured servers by operators. We conrm this nding more generally by considering the top congurations independent of the AS they are in. A pairwise T-test with a Bonferroni adjustment for multiple comparisons conrms that conguration dominance (i.e., the proportion of sites that use a conguration) is correlated with grade: the unique congurations that receive higher grades are used by a larger number of sites than congurations that are insecure. Figure 2 shows the complete distributions of conguration rank in terms of the proportion of sites using each conguration. At the other extreme, we nd that for uniquely congured sites, the odds of the conguration being insecure (receiving a grade of C or F) is 1.30 times higher than being secure—57% versus 43% of uniquely congured sites are insecure. The same qualitative result holds even if we relax this threshold and consider congurations used in more than one site, although the eect is attenuated. For example if considering congurations used in at least 10 sites, the odds of having an insecure conguration is 1.09 times that of having a secure conguration. Next, we investigate the main reasons why sites are insecure, which are summarized in Table 1. Of sites that received a B, the primary reasons why servers were downgraded was a lack of cipher preference (12% of sites) and support for at least one suboptimal cipher (13%). Sites were downgraded to a C for key exchange (20% of sites used 1024 bit common DH parameters and are susceptible to Logjam) and support for ciphers (40% of sites supported RC4 and 32% supported MD5 MACs). To prevent a majority of downgrades to C, servers can generate fresh 2048 bit DH parameters with OpenSSL or use Mozilla’s predenedffdhe2048parameter [18] and remove support for RC4 and MD5 macs. Last, of sites that were downgraded to an F, 44% were downgraded due to support for SSLv2, 29% were downgraded due to a weak key exchange strength, 29% were downgraded due to supporting insecure ciphers (80–89% of these supported export grade ciphers, NULL cipher components, and DES ciphers), and 5% were due to having vulnerabilities (all sites receiving an F were vulnerable to Heartbleed, 90% supported compression and CBC ciphers). Patching Heartbleed requires an update of the cryptographic library. A comprehensive description of individual directive support is included in the Appendix. We caution that our analysis only captures a snapshot of the current state of the HTTPS ecosystem, and results may be volatile over time. Of sites that were downgraded to B because of their cipher preference, 74% did not have server cipher preference and 56% rst negotiated with non-AEAD ciphers. Of servers that were downgraded to B because of their cipher suite support, over 74–99% supported older, uncommon, and non-AEAD ciphers: ARIA, Camellia, SEED, or IDEA. This suggests that enabling server cipher preference and removing support for uncommon ciphers are simple changes that could upgrade servers to optimal security without aecting client compatibility. While we cannot conrm for certain whether an insecure site is left so intentionally, for example, in order to support legacy clients, previous work has documented the diculties that operators face when conguring servers [36,48,57], so it is likely that a signicant portion, if not all, of these issues are attributable to conguration mistakes or are congurations that have become outdated over time. Further, many of the miscongurations made do not improve compatibility with any version of mainstream browsers. To more quantitatively conrm our nding that cloud providers are primarily responsible for secure congurations, we model the relationship between server security and several variables related to the provider, server software, geographic location, site content, and site popularity in Tranco. For example, it could be that popular sites are more secure than unpopular ones, and popular sites use SaaS providers. We exclude Cloudare sites as there are few conguration choices left to the user and little variance in the grade—virtually all sites obtain an A. We treat the set of sites measured as a random sample of the most popular sites. We t a generalized ordered logistic regression model usingR’soglmxpackage [11] to understand the relationship between a server’s grade and several variables related to the server SquareSpace 0.98 1.00 1.03 Table 2: Marginal eect sizes in terms of odds for ordinal logistic regression. Only signicant predictors, with an absolute eect size greater than 1% are shown. The baseline categories for server is Apache, and “.com”. All coecient are signicant at the 0.05 condence level. software, geographic location, site content, and site popularity in Tranco. As is usual in these contexts, we assume that, underlying the observed discrete grade categories of a site i,𝑌, there is a continuous latent variable˜𝑌that captures the security posture of a site. We assume that the mean of the underlying latent variable may be modeled as a linear combination of explanatory variables: where𝛽is an intercept term,𝑠represents the server software, 𝑡represents the top level domain of the site;𝑚and𝑑represent the median and standard deviation of the site rank across the one month period, respectively; and𝜖is a mean zero error assumed to be logistically distributed across observations. We nd that server software and TLDs (especially country-level TLDs) are highly correlated with grade, while the other covariates have minimal eect. Microsoft-IIS and CPanel in particular stand out. The odds of obtaining a high grade decrease, from 1.10 times greater for a F/C, to 0.88 lower for an A. There is some evidence that top level domain and geographical location of the site matters. Sites with Japanese and Vietnamese TLDs are more likely to obtain a low grade. The odds of obtaining an F/C is 1.05 times higher for Japan and Vietnam, and the odds of obtaining an A is 0.94 lower for Japan, and 0.95 lower for Vietnam. In contrast, sites with .io, .co, and .ua are more likely to get an A, with odds of 1.09, 1.05, and 1.04 respectively. The popularity of the site does not seem to matter. The median rank was not found to be signicant, and the eect sizes for standard deviation of rank were small, even when signicant. In contrast, sites hosted on LiteSpeed, BigIP, Varnish, as well as several cloud providers: Amazon CloudFront, AWS elb/2.0, and Akamai increase the odds of obtaining an A. The eects are large and signicant. For example, the odds of obtaining an A (as opposed to a lower grade) is 1.77 times higher for a site hosted on Cloudfront, than for one one hosted on Apache. The complete model output including signicance results are given in Table 6. To better understand why so many individually congured sites receive B, C, and F grades, we investigate the default settings and online recommendation guides for the two most popular web servers, Apache and Nginx. Together, Apache and Nginx account for 70% of non-Cloudare Tranco sites. We primarily investigate Ubuntu defaults as Ubuntu is the most commonly identiable OS, accounting for 48% of sites that identify an OS in their server string in Tranco.. To identify default Ubuntu settings, we installed the last four Ubuntu LTS releases (12.04–18.04) with all compatible combinations of packaged OpenSSL (1.0.1–1.1.1) and Nginx (1.1.19–1.14.0) or Apache (2.2.22–2.4.29) packages. In total, we analyze 2,069 combinations and extract 11 unique congurations (Table 3) consistent with our denition of a conguration. We nd that no default receives an A grade; the majority (5/11) receive a B.All Ubuntu defaults support TLS 1.0–1.2, session tickets valid for 300 seconds, AES-128, AES-256, and AES-GCM ciphers, AEAD, CBC, Camellia and ARIA ciphers, RSA key exchange, as well as SHA-1 MACs. Five defaults on older Ubuntu versions support SSL 3.0 and two on the most recent version (18.04) support TLS 1.3. Two Apache on Ubuntu congurations support RC4 and three support 3DES ciphers; no defaults support DES or IDEA ciphers, MD5 MACs, or NULL or EXPORT components. We note that default security has improved over time, with the most recent versions obtaining B-grades. Nevertheless—they still lag behind cloud providers and servers that oer secure TLS settings by default like Caddy [5] of which 99% of sites receive an A grade. Both Nginx and Apache on Ubuntu fall short of an A because they support uncommon ciphers (e.g., CAMELLIA). Additionally, Apache congurations are capped at a B because they do not have server cipher preference. Encouragingly, the latest versions of Apache on 18.04 have TLSv1.3 support by default. Nginx on 18.04 has intermittent support for TLSv1.3. Only a small number of sites in Tranco use these exact default values—1.7% of sites. Of sites that identify as using Nginx, 1.8% support an Nginx default; of sites that identify as using Apache, 4% support an Apache default. It is unclear why operators change settings that do not improve site security. It may be a misguided attempt to improve security, or an attempt to x unrelated problems. The Ubuntu congurations of Nginx and Apache dier in several ways. Nginx on Ubuntu by default has server cipher preference in 16.04 onward. We note that this is a Ubuntu specic choice rather than an Nginx default [17], which has server cipher preference turned o. Other OSes such as Fedora [12] and Centos [6] do not set server cipher preference. Apache on Ubuntu does not use server preference in its defaults [3]. Additionally, Apache on Ubuntu by default supports session ID resumption [3] whereas Nginx on Ubuntu does not [17]. Starting with version 18.04, Nginx on Ubuntu also removed support for nite-eld-based Die-Hellman key exchange. ServerUbuntu verOpenSSLGrade% TrancoTSLv1.3TSLv1.2TSLv1.1TSLv1.0SSLv3.0SSLv2.0Server prefSesssion IDSession TicketRC4 Apache 12.041.0.1 Apache 18.04 1.1.0g Apache 18.04 1.1.0g Table 3: Default congurations for Ubuntu and OpenSSL on Nginx and Apache. A circle represents support, an empty circle indicates no support. Values represent the proportion of domains supporting each default out of the subset of sites running Ubuntu and each server in Tranco and CT (n=15K Apache and n=9.6K Nginx in Tranco; n=13K Apache and n=9.4K Nginx in CT). Several defaults had multiple server types as indicated by the footnotes: [1] includes Ubuntu versions 12.04, 14.04; [2] includes OpenSSL versions 1.1.0g, 1.1.1; [3] includes OpenSSL versions 1.0.1, 1.0.1f. With only a fraction of sites matching defaults and with defaults receiving Bs or lower, we turn our attention to HTTPS conguration guides to understand how operators try to securely congure sites. We collect a sample of likely-found recommendations by having four researchers independently compile a list of relevant search terms for Nginx and Apache, and then analyze the conguration guides from the rst three pages of Google results for each search. In total, the team generated 16 unique search terms for Nginx and 9 for Apache e.g., “secure SSL conguration apache”, “secure nginx ssl settings”.). In cases where websites recommended multiple congurations (e.g., for modern and legacy, or wide compatibility), we extracted all recommendations. To ensure our results are not biased towards English recommendations, we also searched for Nginx TLS recommendations in the next top three languages (after English): German, Russian, and French. These languages correspond to the countries where the highest number of non-Cloudare sites geolocated. We performed our searches over ExpressVPN using the country-specic Google search engine for each. Another concern is that the exact recommendations on each site may have changed over time and what we observe today may not be reective of what server operators may have seen when they were setting up web servers, potentially several years ago. For this reason, we also compiled a list of historical recommendations. Specically, we selected a random sample of 50 unique URLs for which we inspected historical snapshots from WayBack Machine [14]—a free online service that stores snapshots of websites over time. In total, we collected 1,162 search results, from which we extracted 466 unique recommendation sites, including 57 URLs in French, 76 URLs in German, and 58 URLs in Russian. About 40% of sites do not contain a recommendation. These sites tend to be websites related to SSL congurations but do not contain a specic, ready-to-use recommendation. For example, a large number of sites DES3DESExportARIACamelliaIDEASEEDCHACHAAEADAES-GCMDH GroupKE:DHEKE:ECDHEKE:RSAMD5SHA cover topics related to installing SSL certicate or setting up an SSL proxy. Usable recommendations typically specify a handful of settings (e.g., version, ciphers, and server cipher preference), but most do not account for all congurable options. About 26% of recommendations are from commercial sites (e.g., ocial documentation and cloud tutorials), 63% are blogs (73% of which are personal and 27% corporate), and 12% are forum posts on sites like Stack Overow. The highest ranked URLs tend to be ocial sources. The SSL Mozilla conguration generator and an ocial Nginx documentation page show up most frequently in search results, followed by posts from TechRepublic, DigitalOcean, CyberCiti, Apache, Linode, TechMint, and GeekFlare. The rst non-ocial URL is “haydenjames.io”, which appears in results from 6 of the 38 search terms. Measuring which websites follow a specic recommendation is complicated by the fact that applying recommendations to dierent versions of Apache, Nginx, and OpenSSL can lead to dierent TLS feature support. First, dierent versions of OpenSSL support dierent TLS versions, cipher suites, and extensions. Second, recommendations of SSL protocol versions and ciphers are often stated in terms of exclusions (e.g.,All -SSLv2) and components (e.g., ECDHE+AESGCM). For this reason, we check consistency with recommendations and check for support of allowed or disallowed options and cipher components instead of the exact cipher strings. For example, given the recommendationECDHE+AESGCM:!RC4, a conguration would be consistent with it if at least oneECDHE+AESGCM cipher suite is supported, no non-ECDHE+AESGCMcipher suite is supported, including no RC4 cipher suites. We thus oer an upper bound estimate on the number of sites that follow a recommendation. We limit our analysis to non-Cloudare sites hosted on Apache and Nginx. We nd that 4% of Apache sites and 20% of Nginx sites in Tranco are consistent with a recommendation. Of sites that identify themselves as running on Ubuntu, 18% of Apache sites are consistent with a recommendation and 7.3% of Nginx sites are consistent. Because we know the default values of Ubuntu, we can calculate the exact options for each recommendation by applying them to the defaults from all versions of Apache, Nginx, and OpenSSL on Ubuntu 14.04–18.04. In the case of a recommendation that is missing directives, we substitute the default setting. We nd almost no matches when searching for exact recommendations in our data—under 1% of both Tranco and CT sites. While many sites running Ubuntu likely do not include the OS in theServer header, the result conrms that our consistent metric signicantly overestimates the number of sites that follow a recommendation and should only be treated as a high upper bound. Security of online recommendations.We apply our grading scheme to the recommendations we collect to understand how they would aect server security. Interestingly, only 7.3% of unique recommendations receive a grade of A. The large majority—88%, receive either a grade of B or C, and 4.0% receive an F. We nd that secure recommendations rank higher than insecure recommendations. The average rank for recommendations receiving an A is 9.8, versus 14.4 for B and 12.6 for C (dierences are statistically signicant using an ANOVA test with a signicance level 0.05, p<0.001). In terms of individual TLS parameter support, several ndings stand out. First, only a small proportion of recommendations would result in a modern, A-grade conguration with only the most up-todate security parameters (only 22% recommend TLSv1.3, 30% recommend ChaCha ciphers). If applied to the default conguration of a server, many would not exclude insecure options. Specically, 8% of recommendations support SSLv3, 3% support DES, 18% support 3DES, 13% support RC4, and 8% support MD5. More recommendations still allow ciphers that are not widely used (38% Camellia, 16% SEED and ARIA ciphers). There are several options that are consistently recommended across the majority of sources. Just under a third of recommendations mention session tickets (31%). Where mentioned, few recommendations suggest that session tickets be turned on (11% of current). This is contrary to the wide support that we observe empirically—74% of non-Cloudare domains support session tickets in Tranco. Another option where recommendations are generally unanimous isssl_prefer_server_ciphers. This directive is mentioned in 75% of recommendations, 91% of which recommend that it be turned on. This is higher than the level of support we empirically observe in Tranco (63%). Historical recommendations follow a qualitatively similar patterns and are omitted for brevity. We do not nd signicant dierences between current and historical recommendations in terms of security posture, and they do not result in a higher proportion of matches. One possible explanation for observing such a larger number of insecure recommendations may be that they are outdated. The majority of sites display the publication date (77%), and we investigate whether the publication date has any impact on the security posture of the recommendation. Despite a long tail of publication years dating back to 2010, we nd that 39% of recommendations are “current”, meaning that they were published on or after January 1, 2019. Of sites that are current, 46% are secure, versus 56% of secure sites published prior to 2019. A Chi-square test conrms that there is no statistically signicant relationship between the security posture of a recommendation (secure versus not) and publication date (current versus not), (d.f.=1, p = 3.0112, p = 0.0827). This result points to a worrying trend that the security posture of recommendations is not improving over time. This may be in part due to the fundamental nature of the TLS protocol, which makes it such that servers wishing to support older clients need to adopt legacy recommendations that are inevitably less secure. These results highlight a surprising amount of variance and a high degree of inconsistency across recommendations—a pattern that has been observed in other areas of security as well [68,69]. Moreover, they do not consistently point users to the most secure congurations. This may be in part, because server operators must also consider backwards compatibility. Nevertheless, approximately 10% of recommendations still allow MD5 MACs and RC4 ciphers, neither of which are needed to support the modern browsers (Chrome, Safari, Edge, Firefox). We initially expected to nd large clusters of sites using the same congurations. We hoped that we would be able to match these common congurations to online recommendation guides, Stack Overow posts, blogs, server defaults, and administration tools like Certbot [7]. Instead, we nd a complex and fragmented ecosystem of HTTPS congurations with a long tail of individually congured sites. Our attempts to cluster congurations and nd commonalities were largely unsuccessful—there are simply a large number of unique, seemingly unrelated congurations deployed. In nearly all cases, when a large number of sites use the same conguration, it is due to SaaS providers deploying the same conguration on all sites. Despite the complexity of the ecosystem, there are several important high-level takeaways for the security community. Our results highlight the importance of doing analysis at the conguration-level, as opposed to adopting a uni-dimensional view that considers support for an individual directive at a time. Adopting such a uni-dimensional view may mask patterns that only emerge at the conguration-level, such as the inuence of geography, cloud providers, provider defaults, and online recommendations. We nd that using a cloud provider is one of the strongest predictors for a site being congured correctly. Most individually managed servers struggle to achieve secure congurations. It is an important distinction that operators are not getting better at conguring servers, but are instead migrating to platforms where they can sidestep the process. Although we cannot quantify exactly how much SaaS providers pull up the overall security of the internet, we provide a lower bound by manually labeling congurations from the largest and most well-known SaaS providers, and show that it is signicant enough in order for security researchers to distinguish it when evaluating the security posture of the overall internet. This may be relevant for a number of research directions: when the aim is to understand the decision-making process of server operators, when evaluating the adoption of new security features or technologies, as well as the overall security posture of the internet. It is unclear why we nd such little evidence of online recommendations being used in practice. It may be because very few server operators use online recommendations exactly as specied, or another component of the ecosystem that we do not observe is contributing to the process. For example, server operators may individually remove cipher suites over time as vulnerabilities are announced, they may use online grading tools such as SSL Labs and edit their recommendations to obtain good grades, or they may use additional software that automatically congures TLS (e.g., Certbot). Our results may also add important context to endeavors to invest in tools and resources to improve online recommendations, such as a recent eort from the Internet Society (ISOC), who is actively investing in and developing recommendations for a variety of server software [15]. Lastly, our results point to the importance of secure defaults that do not require operators to seek out trustworthy sources for how to securely congure sites post-installation—a system which appears to be fundamentally broken. Echoing previous studies [36,57], we encourage the security community to build future systems that prioritize being secure “out of the box”. We nd a complex and fragmented ecosystem of HTTPS congurations with a long tail of individually congured websites. While the majority of sites are securely congured, this is primarily due to cloud providers, which provide secure congurations for all hosted websites. Using a cloud provider is one of the strongest predictors for a site being congured correctly. Most individually managed servers, however, continue to struggle to achieve secure congurations. Few operators use server defaults for Nginx and Apache, and there is a lack of adherence to online recommendations, which may be in part because these are often incomplete and insecure. Our ndings point to the need for future analysis of HTTPS security to take into account these two disparate ecosystems, and for the security community to invest in solutions that bridge the security gap between the two.