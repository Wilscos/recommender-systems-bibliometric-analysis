Abstract—The Internet of Things (IoT) is a paradigm characterized by a network of embedded sensors and services. These sensors are incorporated to collect various information, track physical conditions, e.g., waste bins’ status, and exchange data with different centralized platforms. The need for such sensors is increasing; however, proliferation of technologies comes with various challenges. For example, how can IoT and its associated data be used to enhance waste management? In smart cities, an efﬁcient waste management system is crucial. Artiﬁcial Intelligence (AI) and IoT-enabled approaches can empower cities to manage the waste collection. This work proposes an intelligent approach to route recommendation in an IoT-enabled waste management system given spatial constraints. It performs a thorough analysis based on AI-based methods and compare their corresponding results. Our solution is based on a multiple-level decision-making process in which bins’ status and coordinates are taken into account to address the routing problem. Such AI-based models can help engineers design a sustainable infrastructure system. Index Terms—Smart Cities, Artiﬁcial Intelligence, Waste Management, Route Recommendation, Evolutionary Algorithms, Optimization. HE world’s population living in urban areas is expected to continue to grow at a fast pace. Such population growth can lead to an increasing waste generation. Today, big cities worldwide face various waste management challenges due to rapid growth in population and consumption. Generally speaking, waste management consists of different procedures like garbage collection, transport, processing, waste disposal, and monitoring [1]. The challenges in this ﬁeld include insufﬁcient infrastructure for waste collection, lack of ﬁnancial resources, health issues, and proper waste management planning [2]. In this work, we deal with waste collection and route optimization. A waste management process is explicitly identiﬁed as a service. It consumes a signiﬁcant portion of a municipality’s operating budget. A considerable amount of this budget goes on garbage collection and transportation. The scenario seems to be an unreasonable wastage of resources if bins are collected while partially ﬁlled up. To deal with this situation, bins should be built on a microcontroller-based platform to be monitored effectively. In this way, the information about the status of bins (i.e., the level of garbage in bins) can be obtained before dispatching garbage collector vehicles for garbage collection. The conventional way of collecting garbage is a cumbersome procedure requiring much individual effort, time, and cost [3]. Developing new enabling technologies can help alleviate the situation. Artiﬁcial Intelligence (AI) has made its way into different areas, e.g., engineering [4], [5], urban planning [6], and management [7]. AI-based models are incorporated in different ﬁelds of study, such as manufacturing, to solve various problems like process planning, route optimization, and extracting insights from sensor data [8]–[11]. AI and IoT technologies can pave the way to develop an efﬁcient system and automate waste management practices. They offer new strategies for reducing the cost, and the complexity of waste management [12]. AI-based approaches like Genetic Algorithm (GA) can be adopted to increase efﬁciency and reduce cost [13]. Their applications to waste management can make garbage collection processes smart. Such methods can substitute traditional ones for planning routes for waste collection while using fewer resources in transportation. Route planning in the context of waste management is deﬁned as the process of identifying and evaluating the feasibility of routes for collecting garbage efﬁciently. This process includes different phases, e.g., identifying pickup locations, clustering locations/bins, measuring the amounts of waste to be collected, and planning a route [14]. Proposing an efﬁcient and practical waste collection approach is consistent with the characteristics of a given problem. In this work, we develop our solution based on the inherent properties of the concerned problem using Evolutionary Algorithms. The problem is formulated and modeled based on two different scenarios, i.e., discrete optimization [15] and continuous one [16]. Spatial constraints are integrated into the implemented models. They are employed to address proximity issues to be explained later. First, we explain how a routing problem is modeled based on both approaches. Then, we compare them and show the former (i.e., the proposed discrete optimization model) can provide a much better solution than the latter. Finally, different discrete algorithms are compared with the proposed discrete model to validate the result. All bins are built on a microcontroller-based platform, embedded with sensors informing about the level of garbage using an Application Programming Interface (API). Our solution includes several phases. The ﬁrst phase deals with deﬁning different fullness levels, e.g., 60% capacity of a given bin. Whenever bins come to this predeﬁned level, they are given a priority upon their collection. Moreover, those bins whose capacity does not reach a minimum level (e.g., 20% capacity) are not considered in the second phase of the algorithm. It should be mentioned that considering this ﬂexibility can reduce the complexity of the algorithm signiﬁcantly. The status of bins is obtained by querying the interface using API. The second phase concerns planning the best path given the bins’ status determined in the prior phase. Dealing with spatial optimization problems is more challenging than nonspatial ones. Topological constraints should be considered when solving a spatial optimization problem; in other words, the physical properties of spatial points and their neighbors should be considered. The main contributions of an efﬁcient spatial optimization method include computational efﬁciency, ﬂexibility, and optimization quality. In line with the mentioned goals, we propose an approach that improves computational efﬁciency and achieves much higher optimization quality than existing ones. The contributions of this work are as follows: 1) An optimized IoT-based model including intelligent vehicle routing strategies coupled with spatial constraints is proposed to offer promising search capability in a discrete and continuous domain for waste management. 2) The model can maintain diverse solutions given different decision-making constraints for sustainability concerns. The remainder of this paper is organized as follows: some related work about the models that have been designed for waste collection is described in Section II; both implemented models are discussed in Section III; the experimental settings and the comparison results are shown in Section IV; and the future work and conclusions are presented in Section V. Recent studies have been focused on different ways to exploit the opportunities offered by AI and machine learning due to the limitations of conventional computational approaches [17]. In environmental engineering, leveraging IoT sensors has enabled access to data that can be traced throughout various planning phases, from higher-level strategic planning processes to lower-level operational planning. AIbased techniques such as Artiﬁcial Neural Network, multilayer perception, Adaptive Neuro-Fuzzy Inference System, and Evolutionary Algorithms have been implemented to address air pollution and emissions reduction [18]–[20]. Moreover, different technologies, such as cloud and edge computing [21]– [25], are also embedded in today’s urban infrastructures [26]– [29]. These technologies are used to store and process data from almost anywhere. They are being adopted across various enterprises to improve operations and develop better analytics to enhance decision-making ability. Given these technologies, intelligent data-driven mechanisms can be developed to enable authorities to manage waste effectively. Broadly speaking, route optimization is referred to as an NP-Hard problem. Therefore, most studies in this context are based on heuristic and meta-heuristic algorithms [30]–[34]. However, meta-heuristics can provide more robust, effective, and cost-efﬁcient solutions to multi-objective problems. The quality of solutions provided by these algorithms is much higher than those obtained by conventional heuristic ones [35]. Hence, meta-heuristics have received considerable attention for solving problems. Wy et al. [36] develop a heuristics method to model a rollon–rolloff waste collection vehicle routing problem. To do so, they propose a neighborhood search-based iterative heuristic approach. In [37], a parallel meta-heuristic approach based on simulated annealing (SA) is proposed to incorporate asynchronous and synchronous Markov chains. A residual capacity and radical surcharge algorithm have been considered to generate an initial solution for the model; then, local search methods are implemented to optimize the obtained solution. These models can be computationally expensive since heuristic and meta-heuristic algorithms are integrated. Wang et al. have introduced a memetic algorithm with competition to solve the routing problem [38]. Their solution is based on a k-nearest neighbor approach coupled with a SA strategy. First, they have implemented a permutation-based method to encode the solution. Then, an effective decoding method has been constructed. Finally, SA has been used to ﬁnd optimal routes. Different variants of the classical SA algorithm have also been adopted for route optimization in [39], [40]. However, a sequence of collection tasks has not been considered in these studies. To alleviate this concern, an optimization problem is solved by using metaheuristics such that the number of collection trips is minimized [41]. The work [41] provides a theoretical model for a routing problem with the characteristics of full loads and multiple trips. A traveling salesman problem [42], as a combinatorial optimization problem, has been considered to model vehicle routing problems [43], [44]. For these problems, diverse optimal solutions should be provided. GA has been used in waste management planning to model waste accumulation, facility siting, and generation [45]. Amal et al. have proposed a GISbased Genetic Algorithm for optimizing the route of solid waste collection. They use a modiﬁed version of the original Dijkstra algorithm in GIS to generate optimal solutions. They have also conducted a case study at Sfax city in Tunisia to validate the performance of their method [46]. Several approaches to route planning for waste management have been proposed in the literature. Some of them are based on periodic collection [36]; while in some others, the collection procedure is done within a speciﬁc time window [39]. Collection approaches can vary according to urban characteristics, i.e., residential or commercial/industrial areas. In residential areas, the collection is primarily on a door-to-door basis and carried out by vehicles passing along the streets to collect accumulated garbage from households. In commercial districts, trucks visit different locations, e.g., designated business locations like hotels and shopping malls or waste containers in industrial regions, to collect garbage. Despite the advantages of the existing models, they are not efﬁcient if used to solve our concerned problem. They cannot appropriately model the associations among spatial objects. Effective solutions are highly dependent on the characteristics of problems to be solved. For example, we deal with proximity issues in this work. To address such concerns, spatial constraints should be integrated into our approach. This work aims to present an efﬁcient approach given the problem characteristics while addressing all related concerns. It also compares its results with other methods. The proposed IoT-based model is based on integrated algorithms, including GA and an artiﬁcial neural network. The associated cost of the model is calculated by incorporating ANN into the model. Generally speaking, GA consists of different phases, i.e., parent selection, crossover, mutation, and creating the ﬁnal population [9]. Parent selection is a vital phase, consisting of a ﬁnite repetition of various procedures, such as selecting parent strings, recombining strings, and mutation operations. The reproductive phase’s goal is to choose cost-efﬁcient individuals from the population and produce new offsprings for the next generation. An effective mechanism should be considered to deal with the exploration and exploitation of an algorithm and avoid premature convergence. The mentioned concerns can lead to a loss of diversity. An efﬁcient solution should also eliminate the cost scaling issue and adjusts the selection procedure. All related concerns have been addressed in this work. We consider a selection pressure approach and adjust the balance between exploration and exploitation by recombining crossover operators to adjust their probabilities. Consequently, individuals are produced throughout the mating pool by establishing a hybrid roulette tournament pick operator. A discussion for determining the exploration and exploitation rate is presented throughout the paper. Given the proposed model, garbage collectors can be sent to respective locations to collect garbage based on all bins’ status. The implemented approach is practicable for different route planning. The information about bins is obtained by querying API of a waste management company (i.e., Bigbelly bins and Futurestreet) based in Dublin, Ireland. The model interactively submits Hypertext Transfer Protocol (HTTP) requests, and the server returns responses. The response contains spatial and non-spatial information, coordinates of bins in Docklands (i.e., a vibrant area in Dublin), and their corresponding fullness status (Fig. 1). The parameters of HTTP requests such as API Token, Station IDs, StartTime, and EndTime are also contained. We deal with spatial characteristics and associated complexities in this work. Spatial analysis can be much more challenging than traditional data processing due to the complexity of possible patterns. In such an analysis, observations should be deﬁned based on spatial relationships, e.g., spatial adjacency [47]. Different methods (e.g., graph-based, grid neighbors, K-nearest neighbors, distance-based, and higherorder methods) deﬁne adjacency for a point or areal data. Some of these techniques are based on inter-point distances like k-nearest neighbors, while others are based on neighbors of areal units. As explained, an effective spatial analysis should Fig. 1: Querying API to check the status of waste bins. Fig. 2: Distribution of bins in Docklands, Dublin. be developed based on such proximity measures. However, deﬁning adjacency criteria depends on the characteristics of a given data and relies on the spatial distribution of observations (e.g., bins together with all related features). The distribution of bins in Docklands (the area where our concerned bins are located) is demonstrated in Fig. 2. As can be seen, a river runs through the area where the bins are located. In this scenario, deﬁning a neighborhood list is challenging as ﬁnding shared boundaries among different areal units does not account for cross-area relationships segregated by bridges. Those units that are connected by bridges cannot be considered as neighborhood links. Therefore, we have implemented the neighborhood list used in the proposed algorithm based on a graph-neighbor approach to overcome such shortcomings. To that end, two different graph-based techniques, i.e., Delaunay triangulation and Gabriel graph methods [48], are used. We have found that the former results in a more robust outcome. By deﬁning this proximity measure, bins are automatically divided into two groups. As illustrated in Fig. 2, two groups of bins can be separated automatically. Suppose that, at n spatial data points (bins) b, i ∈ 1, 2, ..., n, we observe y= y(b). y(b) is the status of the ibin. This vector can be deﬁned as: Then, each bis deﬁned as: b= (longitude; latitude; Y; C), including the coordinates of all bins in Docklands, Yis the associated percentage of fullness of the iwaste bin b, and Crepresents the cluster that the ibin belongs to. It is worth mentioning that each bis implemented as a spatial data point, consisting of different slots, such as projectionstring, plot-order, and bounding-box. These features are used for projection purposes. The deﬁned spatial data points are the objects of Coordinate Reference Systems. The spatial-weights-matrix W is also deﬁned by considering all nearby bins as: the weights between pairwise adjacent bins band bsatisfy: w> 0 for any adjacent bins, and w=0 for any i. (3) Let G = (V, E) be an undirected weighted graph with n bins, where V = {V, V, ..., V} is a set of spatial nodes, and E is a matrix representing connecting edges (indicating the path between two nodes). i.e., where i and j represent bins i and j. The distance among bins is also considered as the edge’s length (e.g., the weight value of edge (i, j) is denoted as d). The desired path (the algorithm’s objective function) can be formulated as the permutation Θ. where Θ(k) is the kelement of permutation Θ. Based on the deﬁned list of bins and their pairwise distances, the aim is to search for the shortest path in a weighted graph such that each bin is visited exactly once. This problem is an NP-hard optimization problem and computationally expensive since the number of permutations of n nodes grows exponentially with n. Given the nature of this problem, it is challenging to propose a solution based on deterministic algorithms. Hence, we propose two different approaches based on meta-heuristic techniques to obtain near-optimal solutions. The implemented techniques are population-based models coupled with meta-heuristic search algorithms. Such approaches enable us to ﬁnd a near-optimal solution within a reasonable time while avoiding the need for exhaustively exploring the input space. It should be mentioned that most studies have been focused on proposing solutions based on a continuous optimization domain. We aim to ﬁnd an appropriate algorithm so that it can offer promising search capability and maintain diverse solutions. Since we deal with a combinatorial optimization problem, a GA is selected. It should be noted that some of the evolutionary algorithms, such as Particle Swarm Optimization (PSO) or covariance matrix adaptation evolutionary strategies, are originally proposed for a continuous search space [49]. GA includes a repetition of different operations sequences, i.e., parent selection, recombination, and mutation. We implement two variants of GA (with different genetic operators) in continuous and discrete cases. We show that the one conducting for the discrete space performs much better. The models treat all bins (chromosomes in GA terminology) as bit-strings. Both models rely on a population of individuals (candidate solutions) to explore a search space. These candidates are a set of chromosomes and encoded as strings. The models use an initial population and genetic operators such as crossover and mutation. These operations are implemented to produce a new generation by recombining a population’s chromosomes. Then, ﬁtter individuals are chosen given an objective function. The operators are also utilized for exploring and exploiting search space. It is of great importance to balance the exploration and exploitation of an algorithm. Exploring the input space is done to ﬁnd an optimal solution by using a crossover operation. Besides, a mutation operator is considered to avoid premature convergence of the algorithm. We have controlled the exploration/exploitation level by a selection pressure parameter (β in this work). This parameter β is used in the parent selection phase. All the procedures, iteratively, are repeated until some termination criteria are met. The best solution (the one with the minimum cost when the algorithm ends) is then selected. As explained, the goal is to ﬁnd the best route for waste collection. The ﬁrst step is to deﬁne an initial population. Then, dynamic crossover and mutation operators are developed. The deﬁned spatial objective function is used to minimize the total traveled distance. The procedures are described for both scenarios next. In this scenario, a discrete GA coupled with the deﬁned spatial objective function is implemented. To that end, an initial population is randomly generated (given the algorithm’s population size). The cost associated with each chromosome is measured based on the deﬁned objective function. These costs should be minimized. The initial population is deﬁned as individuals, including n-dimensional chromosomes. A path set (ζ) can be deﬁned as a permutation of n bins. Algorithm 1 represents the way in which the initial population is created. Then, cost-efﬁcient chromosomes from the population are sorted and selected. A parent selection phase is employed for creating a new population at each iteration. In the reproduction phase, permutative crossover and permutative mutation operators are implemented. These operations are to be explained later. All the procedures are repeated until a termination criterion is met. A feasible solution to the problem satisﬁes the discussed constraints. Let F be the set of all solutions; the aim is to ﬁnd an optimal one (f∈ F ) given the cost function. Algorithm 1: Pseudo-code for creating initial population given their cost (Discrete Scenario) Input : Spatial-Data-Frame (b, b, .., b) .position ← a random permutation .cost ← calculate cost given: In another word, we are looking for a permutation Θof n bins (b, b, ..., b) such that: The cost of each solution is calculated by using an ANN model. These costs are used for different purposes like parent selection and then the solution. The objective in the parent selection phase is to select two solutions (with lower costs) from the population such that newly created offsprings would inherit their parents’ characteristics. There are different methods to select parents, e.g., Random Selection, Rank Selection, Stochastic Universal Sampling (SUS), Tournament Selection, and Boltzmann Selection. We do not adopt the Random Selection since it has no selection pressure parameter. Rank Selection and SUS suffer from premature convergence. Applying these methods can easily lead to a local optimum. Instead, we have employed Boltzmann Selection. This method is inspired by Simulated Annealing and can help maintain a good diversity. The probability of a solution being chosen is measured given the below Boltzmann probability: where ηis the size of the initial population, and L is the deﬁned cost function. β is the selection pressure. Parents are determined according to probabilities, which are proportional to the costs calculated earlier. In other words, solutions with a lower cost are more likely to be selected than those with a greater one. It is worth mentioning that β is selected, suchP thatp= 0.7, where H is the set of half of the best solutions (population is sorted according to their cost values, and η/2 of them are selected). Consequently, the Roulette Wheel mechanism is implemented for sampling. This process is repeated until a predeﬁned number of parents are selected. Therefore, solutions with the greatest cost have a minimal chance of being chosen. These procedures are described in Algorithm 2. After selecting parents, a crossover operation should be employed. On this basis, the chromosomes of selected parents are combined to create new offspring. We deal with a combinatorial problem; hence, traditional methods (like onepoint, two-point, and uniform crossovers) for conducting the crossover operation are not suitable. Two cut points on each pairwise parent have been considered in order to create a permutative crossover. The portion after each cut point has been selected and exchanged (the selected bit strings of the ﬁrst parent are mapped onto the other parent’s string). All bits are then checked to ensure there are no conﬂict bits to guarantee each chromosome is permutation without repetition. In this way, new offsprings are created. To avoid being trapped in a local minimum, a mutation operator has been considered. It also maintains a good diversity in a newly generated population. Different types of mutation operations (e.g., insertion, inversion, and swap) have been considered in our model. Generally, one or more bits of chromosomes are replaced, such that generated offsprings also maintain permutation patterns. The pseudo-code realizing the algorithm operators is given in Algorithm 3. As stated, the goal is to minimize cost function L. To that end, an Artiﬁcial Neural Network (ANN) has been integrated into the model. The model gets the objective function (i.e., L) as an input. Then, the ANN is used to measure corresponding cost values in different iterations. Iteratively, different solutions (permutations) are generated and evaluated by GA’s operations. A Levenberg-Marquardt training algorithm consisting of two layers (15 neurons in the hidden layer) is utilized. It enjoys adaptive weights with full connectivity among neurons in the input and hidden layers. All costs are calculated, and the path is selected such that the corresponding cost is minimized. In this scenario, we implement GA that leverages random keys to encode solutions. Despite the method used above (where a stream of integers is used to represent the order in which bins are to be visited), in this model, each bit string in a chromosome is assigned with a random number drawn uniformly from [0, 1) and sorted in ascending order. Hence, each solution has two different parts, i.e., an integer part and a fractional one. The former refers to what we used for permutation, while the latter indicates random key numbers assigned to bit strings. The initial population is generated by creating n chromosomes, where n is the number of bins. Then, a real number drawn randomly from [0, 1) is given to each bin. New individuals are spawned in the algorithm’s reproduction phase given a predeﬁned crossover rate and mutation one. The procedure realizing the initial population generation is presented in Algorithm 4. After the initial population is generated, different operators are performed for passing the best solutions in the population Algorithm 2: Pseudo-code for ﬁnding an optimal path (Discrete Scenario) Input : CostFn, ← Size of crossover (based on θ) ← Size of mutation to the next generation based on an elitist strategy. First, two parents are selected, and a parametrized single crossover is considered for producing two new offsprings. In the deﬁned crossover, one random position in the array of bits is selected and exchanged. As discussed earlier, after the initial population is generated, the parent selection operation should be conducted in the reproduction phase. The objective is to choose solutions with minimal cost. The cost function and the ANN used for calculating costs are both the same as those described in the previous section. The newly added offsprings inherit bits based on a probability measure discussed earlier. Second, a mutation operator is implemented to ensure a diverse population. It should be mentioned that each time a new solution is generated, it is compared to previous solutions in the population to make sure no duplicate individuals are maintained. The maximum number of iterations (the algorithm termination criterion) is also set to 1000. Algorithm 5 realizes the elitist strategy in the random-key approach. Algorithm 3: Pseudo-code for deﬁning the algorithm’s operators (Discrete Scenario) Input : Two parents, (γ) Output: Offsprings and Insertion); probability of using Insertion operator; probability of using Inversion operator; RW (P r, P r, P r); Algorithm 4: Pseudo-code for creating initial population given their cost (Continuous Scenario) Input : Spatial-Data-Frame (b, b, .., b) ← Size of population n uniformly random numbers in the interval (0,1) In this work, we have proposed an optimized IoT-based waste collection model, including intelligent vehicle routing Algorithm 5: Pseudo-code for ﬁnding optimal path (Continuous Scenario) Input : CostFn, Fig. 3: Comparing the costs of both models in different iterations. strategies coupled with spatial constraints. The goal is to present an efﬁcient and practical waste collection approach given the characteristics of the concerned bins data. Dublin City Council has partnered with Big Belly Bins to install 110 smart bins across the Dublin Docklands area. All bins are built on a microcontroller-based platform, embedded with sensors informing about the level of garbage. These sensors provide real-time information showing the capacity of each of the bins. This allows us to see how much waste each bin contains in terms of percentages, i.e., 60% or 80%. The proposed IoT-based solution deﬁnes the level of fullness, and the optimal path is determined. We have proposed two different scenarios based on a hybrid approach. All experiments are conducted on an 18-core system with 192 GB memory. Two implemented hybrid meta-heuristic methods (integrated with ANN) evaluate various solutions to optimize the deﬁned objective function. The volume of the dataset and the number of bins are considered for deﬁning the initial population rate. The number of neurons is designated based on a trial and error method. Moreover, the volume of the concerned dataset Fig. 4: Comparing different discrete algorithms. has been considered in deﬁning the initial population rate. As stated, the cost of each solution is calculated by using an ANN model. These costs have been used for different purposes like parent selection. To that end, a multilayer perceptron with Levenberg-Marquardt training algorithm has been used (since it converges faster and more accurately towards our problem) consisting of two layers of adaptive weights with full connectivity among neurons in the input and hidden layers. Note that ANN is only used for cost calculation; hence, we have not included much information about this phase. The model queries API, and the information of bins (including their locations and level of fullness) is obtained. The optimal route is then detected after a series of iterative computations (given the termination criterion, e.g., the number of iterations or computation time). Fig. 3 displays the cost values in each iteration for both models. As can be seen, the algorithm based on discrete optimization converges much faster than the continuous one. The experimental results and the impacts of different parameter settings for the discrete and continuous methods are presented in Tables I and II, respectively. We have also implemented several discrete evolutionary algorithms and compared their results with the proposed discrete approach. Fig. 4 reveals the results obtained from different discrete evolutionary algorithms and shows the effectiveness of our approach. The suggested paths resulting from both algorithms are demonstrated in Fig. 5. As can be seen in this ﬁgure, the second approach (Fig. 5(b)) is trapped in an optimal local solution. As discussed throughout the paper, the level of fullness of bins has also been taken into account. When collectors are dispatched to collect waste, the level of fullness of bins is monitored. Fig. 6 illustrates the result given such consideration at a certain time. The level of fullness of bins depicted in blue in Fig. 6(a) is less than 20%, and 30% for those in Fig. 6(b). Given all results, we can conclude that the proposed discrete model is superior to the continuous one. Fig. 5: Results of two implemented models after 1000 iterations, i.e., a) optimal path given the disceret optimization model and b) optimal path given the continuous optimization model Fig. 6: Results of the discrete model given two different settings after 1000 iterations: a) the level of bins’ fullness is 20%, b) the level of bins’ fullness is 30% We have proposed an IoT-based model coupled with spatial constraints to solve a route recommendation problem in this work. We have modeled and solved the concerned problem through two different scenarios, i.e., discrete and continuous optimization approaches. Both methods are validated on a case study, and the results are compared. Although most studies have focused on continuous optimization methods, we have shown that a discrete algorithm is more efﬁcient in dealing with the problem. The latter can be easily trapped into local optima. Different types of operators (e.g., permutation-based crossover and mutation operations) are designed to maintain diverse candidates during a search operation. We have also implemented some speciﬁc measures to control the balance between the exploration and exploitation of both algorithms. An artiﬁcial neural network is utilized to calculate the associated cost in each iteration of the algorithms. Different discrete methods are also compared with our proposed discrete approach to validate the efﬁciency and effectiveness of the proposed model, and the results are illustrated. The main drawback of the state-of-the-art is that it cannot appropriately model the associations among spatial objects, consequently ﬁnd an optimal route. The proposed model can enable us to ﬁnd an optimal solution within a reasonable time. It should be mentioned that the model can recommend multiple routes. A driver can then select the most favorable route from the suggested ones. In this work, we only obtain information about bins that are located in Docklands. As a part of our future work, we plan to consider all bins in Dublin.