Abstract—The choice of log severity level can be challenging and cause problems in producing reliable logging data. However, there is a lack of speciﬁcations and practical guidelines to support this challenge. In this study, we present a multivocal systematic mapping of log severity levels from literature peerreviewed, logging libraries, and practitioners’ views. We analyzed 19 severity levels, 27 studies, and 40 logging libraries. Our results show redundancy and semantic similarity between the levels and a tendency to converge the levels for a total of six levels. Our contributions help leverage the reliability of log entries: (i) mapping the literature about log severity levels, (ii) mapping the severity levels in logging libraries, (iii) a set of synthesized six deﬁnitions and four general purposes for severity levels. We recommend that developers use a standard nomenclature, and for logging library creators, we suggest providing accurate and unambiguous deﬁnitions of log severity levels. Index Terms—log severity level, logging library, log entry, systematic mapping, multivocal Logs are often the primary source of information for system developers and operators to understand and diagnose the behavior of a software system [1]. According to Lin et al. [2] “engineers need to examine the recorded logs to gain insight into the failure, identify the problems, and perform troubleshooting”. As reported by El-Masri et al. [1], each log entry is usually composed of time-stamp, severity level, software component, and log message. Severity levels indicate the degree of severity of the log message [3]. For example, a less severe level is used to indicate that the system behaves as expected, while a more severe level is used to indicate that a problem has occurred [4]. The choice of severity level impacts the amount of log data that a software system produces [2] [4] [5] [6]. For example, if a system is set to Warn level, only statements marked with Warn and higher levels (e.g., Error, Fatal) will be output [4]. In this sense, when a developer choose severity levels inappropriately, the system can produce more log entries than it should, or the opposite, less log entries [7]. In both scenarios, the wrong choice of severity level can cause problems in the software system performance [4] [8] [9], in the maintenance [8] [10], as well affect log-based monitoring and diagnostics [7] [8] [11]. Developers spend signiﬁcant time adjusting log severity levels [12]. After an initial choice, developers may modify Universit´e du Qu´ebec`a Chicoutimi the severity level re-evaluating how critical an event is [9] [13]. They can re-evaluate if a statement, initially classiﬁed as Info, would actually be of Error level, or if it would not be an intermediate level between the two levels, i.e., a Warn [13]. Among the factors that make choosing the severity level a challenge are: (i) lack of knowledge of how logs will be used [14]; (ii) lack of understanding how critical an event is [6]; (iii) the ambiguity of certain events that seem to be related to multiple levels of severity [2] [13]. In addition, there is a lack of speciﬁcations and practical guidelines for performing logging tasks in projects and industry [10] [11] [15]. The consequence is that, in software development projects, “personal experience and preferences play an important role in logging practices” [11]. Considering the lack of guidelines and speciﬁcations for logging practices, we found studies in the literature that focus on “where to log” [13] [16] [17] and “what to log” [8]. However, we came across a gap in studies that speciﬁcally analyze the log severity levels. Thus, we address the following research question: What are log severity levels? To answer this question, we studied the state of the art and practice of log severity levels, surveying their nomenclatures, deﬁnitions and descriptions, using three different sources: (1) peer-reviewed literature, (2) logging libraries, and (3) practitioners’ point of view. Our results provide a panorama of log severity levels and show a convergence between academia and industry deﬁnitions. We observed that when putting the set of nomenclatures and deﬁnitions raised in perspective, we can see a convergence toward four purposes: Debugging, Informational, Warning, and Failure. Furthermore, we proposed deﬁnitions for these purposes and the six severity levels that characterize the logging’s state of the practice. Our study meets the needs of guidelines and speciﬁcations reported in the literature, supporting developers and system operators in generating reliable log data entries. Our study also supports the logging library creators that can use our results to adopt severity levels accordingly. The main contributions of this study are: and four general purposes for severity levels. This paper is organized as follows. The following Section presents the multivocal mapping of log severity levels covering the peer-reviewed literature, logging libraries and practitioners’ point of view. Section III presents the log severity levels synthesis. Section IV presents a discussion of the main ﬁndings, our recommendations, and the threats to validity. Section V closes the study presenting our conclusions and future work. We conducted our research on log severity levels using three sources: peer-reviewed literature to capture the state of the art; logging libraries to capture a vision of library creators; and, to capture the practitioners’ point of view, a Q/A website. All data are available in our reproducibility package at https:// github.com/Log-Severity-Level/multivocal-mapping-database. We performed a two-stage systematic search in order to identify the current literature on log severity levels, as shown in Fig. 1. On Stage 1, we adopted automated search as the search strategy. According to Keele et al. [18], automated search is the most common utilized search strategy to identify relevant studies for a Systematic Mapping. In Stage 1, our search query was: ("log level" OR "log severity" OR "logging level" OR "logging severity" OR ("severity level" AND (logging OR log)). We executed our search query on Scopus, using three metadata ﬁelds: title, abstract and keywords and we found 291 studies. Then we applied the inclusion (IC) and exclusion (EC) criteria, speciﬁcally: levels or deﬁne them; practices and the use of log severity levels. After applying the IC1, IC2, EC1, and EC2, we obtained 40 studies. We read the title and abstract of each of them and, after ﬁltering by IC3, IC4, IC5, and EC3, we kept 14 studies. We read all 14 papers, ﬁltering by IC3, IC4, IC5, and EC3; we obtained the seed data set with 9 studies. In Stage 2, we used our seed data set to perform three rounds of snowballing, backward and forward, detailed in Fig. 1. The ﬁnal data set included 27 studies (Table I). Distribution of included studies. The highest number of publications that include log severity levels were published in the last four years: ﬁve studies in 2017, ﬁve studies in 2018, ﬁve studies in 2019, and six studies in 2020. These 21 studies represent 78% of our included studies and make us observe that interest in the subject has been increasing in recent years. Most of the included studies deal with severity levels in general, presenting them to illustrate and clarify logging processes as a whole. Other studies address severity levels as one aspect of their research on logging practices [P02][P09][P12][P19], or in the study of log statements [P13][P16][P26]. Some studies deal with speciﬁc problems related to severity levels, where to log [P04][P10], which severity level to choose [P07], and automatic recommendation of severity levels [P23][P27]. Finding #1: Research on log severity levels has grown in recent years. Mentions of log severity levels. All 27 studies mention log severity levels (e.g., Debug, Info, Warn,...); 23 studies (85%) mention at least three severity levels. In contrast, only eight studies (30%) have deﬁnitions or descriptions for severity levels. As shown in Fig. 2, it is possible to distinguish two groups of severity levels: the most mentioned and the least mentioned. The ﬁrst one formed by the Error (26), Debug (25), Info (23), Warn (20), Fatal (17), and Trace (14) levels, makes up 93% of the mentions, and the latter formed by the Notice, Critical, Alert, Verbose, Panic, and Failure levels, making up the remaining 7%. The most representative group in the number of mentions is also the one that comes with the most deﬁnitions. Finding #2: Error, Debug, Info, Warn, Fatal, and Trace are the levels that stand out in the log severity level research. Categorization. Some studies propose categorizations related to log statements. He et al. [10] group the logging descriptionsinto three main categories: (i) “description for program operation”, (ii) “description for error condition”, and (iii) “description for high-level code semantics”. The descriptions of the ﬁrst category appear related to the Info severity level, describing three types of operations: complete operation, current operation, and next operation. The second category describes the occurrence of an error/exception; severity levels related to this category are Error and Info. In the third category, the logging descriptions essentially describe the code, e.g., variables, functions, and branches, such as if-else blocks; all examples of this category use Debug level. Yuan et al. [9] comment on two classes of levels: “errorlevel (e.g., error, fatal) (...) and non-error (also non-fatal levels), such as info and debug”. In the same way, Shang et al. [20] comment on other two classes considering average logging level: “Intuitively, high-level logs are for system operators and lower-level logs are for development purposes. (...) The higher-level logs are used typically by administrators and lower-level logs are used by developers and testers”. [20] Finding #3: Studies seek to categorize the severity levels or elements of log sentences. Deﬁnitions. Table II presents the deﬁnitions and descriptions found for the log severity levels. Four studies have deﬁnitions for a deﬁned set of levels (four or more levels) [P02][P12][P14][P24]. The other four studies present descriptions for only one or two levels to contextualize the idea of log severity level [P20][P23][P25][P27]. Finding #4: Only 15% of selected studies have a set of four or more deﬁnitions for log severity levels. Next, we comment on the levels with more than one deﬁnition in Table II. a) Debug: As described by its name, four of the deﬁnitions associate the Debug level with debugging tasks [P02][P12][P14][P24]. Its target phase of the software process is development, consequently consumed mainly by developers [P23][P24]. Debug level appears related to expressions like “verbose,” “ﬁne-grained information,” “details of events,” “useful for developers.” Kim et al. [3] describe it as “broadly used to designate the state of the variable.” b) Trace: The Trace level is described as “more ﬁner grained” than the Debug level [P12][P14]. c) Info: Info level messages are described as “important but normal events” [P02] [P14][P24], used to highlight and describe the application’s progress [P12][P25] “at coarsegrained level,” whose circumstances do not require action to take [P24]. d) Warn: Unlike the Info level, the Warn level deﬁnitions describe it as a severity level that requires action to be taken [P24] because it designates potentially harmful situations [P12] capable of causing system problems [P27]. e) Error: The deﬁnitions for the Error level do not say much beyond their goal of logging errors or failed operations [P02][P12][P14][P24]. However to [P12], Error level “designates error events that might still allow the application to continue running.” f) Fatal: The expressions used in the Fatal level deﬁnitions are “aborting” processes or applications [P02][P12][P14], “very severe errors” [P12], and “critical problems” [P23]. We use the PYLP index, a ranking of programming languages, as a starting point for library selection, selecting languages with a “share value” greater than 1.0%. We got 16 languages, so we took these languages and queried Google Search: logging library, concatenating the name of each language and used the ﬁrst result page for each query. We found 160 hits (blogs, forums, code repositories), and from them, we mapped 60 libraries. We inspect code repositories (when available), documentation and library guidelines to apply our inclusion and exclusion criteria: severity levels; stars. After applying the above criteria, we obtained 37 libraries. We manually added Java Util Logging, PHP logging, and Syslog-ng to the set. Our ﬁnal data set included 40 libraries (Table III) and 63 documents among source code, documentation and library guidelines. Table III presents the logging libraries selected for the study and the 19 different severity levels found in them. The levels are distributed from left to right, from the least severe to the most severe. The table does not show the pseudo-levels (e.g., All, Off, Notset, Log4Net Debug [L17][L40]) and groups the variant nomenclatures for the same level (Info/Informational, and Warn/Warning). Programming languages. The included libraries cover 14 of the 16 selected programming languages. The most signiﬁcant number of libraries are from C/C++ with seven libraries (20%), Java with six libraries (15%), JavaScript with ﬁve libraries (13%), and C# and Golang, both with four libraries (10%). Distribution of levels by library. Of the selected libraries, 91% have between ﬁve and eight severity levels, 39.5% have six levels, 23.3% have ﬁve levels, 14% have eight levels, and 14% have seven levels. The libraries with the lowest number of levels, Google Glog [L01] and Golang Glog [L02], have the four same levels: Info, Warn, Error, and Fatal. The libraries with more levels are Log4C [L39] and Log4Net [L40], with nine and 15 severity levels, respectively. Finding #5: Logging libraries has a median of six severity levels (σ ≈ 1.8). The lowest number of log severity levels in libraries is four, and the highest number is ﬁfteen. Occurrence of levels. When aggregating the data from Table III, we observe that six levels are present in more than 50% of the libraries, four levels of which are present in more than 90%: Info (100%), Warn (98%), Error (98%), Debug (93%), Trace (55%), and Fatal (52%). Finding #6: Six levels are present in over 50% of libraries, among them four in over 90%: Info (100%), Warn (98%), Error (98%), Debug (93%), Trace (55%), and Fatal (52%). Four libraries have one severity level that is unique to them: Fault in [L03], Conﬁg in [L29], Basic in [L32], and Success in [L34]. Another six levels are only present in up to 10% of libraries: Verbose (10%), Emergency (10%), Finer (10%), Finest (7%), Fine (5%), and Severe (5%). Finding #7: Basic, Conﬁg, Emergency, Fault, Fine, Finest, Finer, Severe, Success, and Verbose have low occurrence in libraries compared to other severity levels, less than or equal to 10%. Number of severity levels over time. Fig. 3 presents the medians of the number of levels of libraries by their release years. There is no linear variation over time in the number of severity levels that the logging libraries have provided. There is even a slight variation in quantity. The only point outside the curve is the year 2004, which features the 15 levels of the Log4Net library. Despite this high number, its documentation informs that it “categorizes logging into levels: DEBUG, INFO, WARN, ERROR and FATAL” [L40]. Finding #8: There is no trend towards a decrease or increase in the number of log severity levels in future libraries. The most severe level. The most severe level in 48% of the libraries is the Fatal level, followed by the Error (19%), Critical (14%), Emergency (10%), and Alert (5%) levels. The eight libraries, where the Error level is the most severe, have ﬁve logging severity levels. Numeric Values. In our data set, 38 libraries (95%) use numeric values associated with levels to sort them according to their speciﬁc degrees of severity (Table III), as indicated by the following quote: “Levels have a numeric value that deﬁnes the relative ordering between levels.” [L40] Table III shows that it is possible to organize the severity levels of almost all libraries equivalently when considering their numerical values, except for libraries [L17] and [L32]. [L17] presents the only variation in the numerical ordering between Alert and Critical. [L32] has a Debug level numbering different from all other libraries. Furthermore, 60% of libraries (25) have their levels sorted in ascending order and 31% (11) in descending order. Finding #9: There is consistency in the numerical ordering of severity levels across logging libraries. “Two Levels with the same value are deemed to be equivalent.” [L40] It is possible to observe libraries with the same numerical value for different severity levels, they are: (i) the Critical and Fatal levels in the Python library [L17]; (ii) Info and Notice, (iii) Error, Critical and Alert, in the PHP library [L36], when running on the Windows operating system; (iv) Finest and Verbose, (v) Finer and Trace, (vi) Debug and Fine in Log4Net [L40]. The fact that different severity levels have the same numerical value indicates redundancy of the log levels, which is well exempliﬁed by the following quote: “Why doesn’t the org.slf4j.Logger interface have methods for the FATAL level? The Marker interface (...) renders the FATAL level largely redundant. If a given error requires attention beyond that allocated for ordinary errors, simply mark the logging statement with a specially designated marker which can be named ‘FATAL’ (...) ” [L06] Finding #10: Three libraries have redundancy in the numeric values of their log severity levels. The “Marker interface”, mentioned in [L06], is an option provided by libraries [L06] and [L13] to add more context to a log statement and avoid redundancy, which allows using only the necessary log levels. Late Trace. The Trace level is present in 55% of selected libraries, however, analyzing the release notes of these libraries, in at least three of them, the Trace level was not present in the ﬁrst versions. It was added to Log4J [L13] in 2005, SLF4J [L06] in 2007, and JS-Logger [L09] in 2018. According to the SLF4J FAQ page, Trace level was used in several projects “to disable logging output from certain classes without needing to conﬁgure logging for those classes. (...) in many of cases the TRACE level carried the same similar semantics meaning as DEBUG.” [L06] Finding #11: There may be semantic similarity in using the Trace and Debug levels. Deﬁnitions. Table IV presents the deﬁnitions and descriptions found for the log severity levels on libraries. a) Debug: According to the libraries, the Debug level describes detailed [L14][L15][L40] and low priority/importance [L04][L05] information, which helps debug activities [L13][L16][L36][L40]. [L15] describes Debug as “too verbose to be included in ‘info’ level,” suggesting a similarity in the level’s purpose. Only one of the libraries uses the word “problem” to describe this level [L17]. b) Trace: The Trace level is described with the same characteristics as Debug but deepens the low priority: “very low priority” [L04], “very low importance” [L05]. c) Info: The Info level designates normal behaviors [L16], regular operations [L15], and their messages “highlight (overall) the progress of the application” [L05] [L40] “at coarse-grained level” [L40]. [L14] advises to keep them to a minimum, as messages at this level will generate data immediately. [L29] highlights that they have value for end users and system administrators. [L17] also uses the word “problem” to refer to this level. d) Warn: The Warn level is described as a “hazardous situation” [L04], highlighting a potential problem [L05][L17][L29][L40] that could be to an error [L13]. It is also described as a “almost errors” [L14], considering that the application is still running although unexpected [L14][L16]. Operators/end-users/system managers should be likely to be interested in messages at this level [L15][L29]. e) Notice: The Notice level resembles Info level in three deﬁnitions: it describes normal events [L35] [L36] and highlights the application’s progress [L40]. However, according to [L03], it can describe potential failures, likening the Notice level to the Warn level. f) Error: The expressions used to describe the Error level are “major problem” [L17], “very serious error” [L04], “unexpected conditions” [L14]. In addition, there are also descriptions that the registered event may or may not interrupt the application’s operation [L05] [L16] [L40]. Regardless, even if it does not stop the application as a whole, it can impede the good progress of a particular request [L06]. In the event of logs of this level, an operator must ﬁnd out as soon as possible [L15]. g) Severe, Critical, Alert, Fatal, Emergency: In the library deﬁnitions, ﬁve levels appear related to very severe error events: Severe [L40], Critical [L40], Alert [L40], Fatal [L13] [L14] [L40], and Emergency [L40]. Critical level definitions lead to believe that a “disaster” has occurred [L08]. In addition, Critical level requires immediate action [L35] [L36] [L40]. For the Fatal level, we ﬁnd more descriptions for the event: it “prevent the application from continuing” [L13], it “cause premature termination” [L14], the application “is going down/to stop” [L15] [L16], “lead to abort” [L40] or “become unusable” [L15]. Finding #12: Severe, Critical, Alert, Fatal, and Emergency have similar descriptions regarding severe error events in the libraries. h) Finest, Verbose, Finer, Fine: Descriptions for these levels appear in three libraries. In [L9], they are described similarly, without precise terms to distinguish their differences, such as the “most voluminous detailed”, “somewhat less detailed”, and “lowest volume” output. For [L12], these levels are useful to debug an application. i) Basic, Conﬁg, Success, Fault: These four levels are unique in four distinct libraries. According to [L32], Basic is an alias for the Debug level. In [L29], Conﬁg level describes messages “intended to provide a variety of static conﬁguration information, to assist in debugging problems.” [L34] is the only library to offer the Success severity level, but it does not provide a deﬁnition. Numerically, it lies between the Info and Warn levels. For [L03], Fault level “captures information about faults and bugs in your code”; the library, as far as we know, does not provide numerical values for the levels. Finding #13: From the libraries, we found 19 severity levels. Despite the diversity of nomenclature, the concepts of levels are consistent across the various libraries, suggesting a convergence towards concepts of greater granularity. In Garousi et al.’s guidelines [30], the importance of contextual information in the study suggests the inclusion of grey literature. Therefore, we adopted automated search on Stack OverFlow, “a major forum where practitioners post questions and discuss technical issues” [31], as the search strategy for capture the practitioners’ point of view. Our search query was: log levels, using the ﬁlter is:question. We found 742 hits (as of this writing: Jun. 2021). Following, we applied the inclusion (IC) and exclusion (EC) criteria: ﬁve of the log levels. another source such as logging libraries or RFCs). sages characteristic of log levels; ﬂow. After applying the criteria, we obtained 4 questions with 9 relevant answers (Table V). In the selected answers from Stack Overﬂow, six levels of log severity are described, among which the most discussed are Debug (9), Error (9), Warn (8), and Info (8); the other two levels are Trace (5) and Fatal (3). Finding #14: The severity levels discussed in the selected responses corroborate the most cited and deﬁned levels in the peerreviewed literature and logging libraries, respectively. Deﬁnitions. Table VI presents the deﬁnitions and descriptions found for the log severity levels on libraries. a) Debug and Trace: Compared to the ﬁrst two sources in our mapping, the similarity observed between the severity levels is not as striking in the responses selected from Stack Overﬂow. It would be best to prefer Debug over Trace for part of the answers [ASO1][ASO4][ASO5], and the opposite for another part [ASO2][ASO6][ASO9]. For [ASO3], both levels are intended for developers, Debug being the one that records variable values. For [ASO1], Trace level is used to ﬁnd a speciﬁc piece of code, while Debug level is classiﬁed as “helpful to people more than just developers.” b) Info: Among the levels discussed on the selected answers, the Info level has the most signiﬁcant convergence in the deﬁnitions presented. All answers describe it as a record of operations that start and/or end, describing “normal but signiﬁcant situations” of a software system [ASO1][ASO2][ASO5][ASO6], i.e., “expected situations” [ASO3]. [ASO4] points out that this level also describes typical business exceptions, and according to [ASO6], operators are the audience of Info messages. c) Warn: As in the libraries, the selected answers describe the Warn level messages as potential problems/unexpected events [ASO1][ASO2][ASO4][ASO5][ASO9] that can cause complications for the system [ASO1][ASO5], and therefore they need to be observed. Despite these events, the system remains running [ASO1][ASO3][ASO5], without the need for immediate human intervention [ASO4]. For [ASO3], operators are the public interested in this level of severity. d) Error, Fatal: There is also divergence at this level. For four of the responses [ASO1][ASO2][ASO3][ASO6], the Error level indicates a failure that did not stop the system execution but should be investigated by the system operators [ASO2][ASO3]. However, for another two responses, the degree of severity is more critical, and the “interested person” should be “get out of bed” [ASO4][ASO5]. This severity degree is the same that is attributed to the Fatal level by [ASO1][ASO2][ASO3]: errors occur that force the application to “shut down” and require immediate action. Analyzing our three sources, we observe redundancy in the numerical values of the levels, the semantic similarity of their deﬁnitions, and the low occurrence of some levels in the libraries. To reduce the similar or redundant levels, we abstracted the 19 severity levels to six levels, which constitute the logging’s state of the practice. Following, we explain the steps of our synthesis, as shown in Fig. 4. Finest, Verbose, Finer, Trace, Debug, Basic, Fine, Conﬁg. Finest and Verbose levels are present in six libraries. [L29] and [L32] provide the Finest level; [L10], [L12], and [L19] provide the Verbose level, and [L40] provide both levels. Besides the semantic similarity between their deﬁnitions/descriptions in six libraries, in [L40] they (Finest, Verbose) have the same numerical value. These facts suggest they can be merged on the same level. In Fig. 4, we chose to merge for the severity with the highest occurrence. We performed the same process for Finer and Trace, as well as Debug and Fine levels. The Basic level, present only in [L32], is equated with the Debug severity level in its documentation and merges to Debug. The resulting Verbose and Trace still have deﬁnitions with substantial semantic similarity, so we abstracted the level from Verbose to Trace. The low occurrence Conﬁg level, which provides information for debugging [L29], was merged with the Debug level. Info, Success. We observed that the Success level has a numerical value between Info and Warn levels in [L34]. Besides, the Success level has low occurrence and does not have a deﬁnition. We merged into Info as it goes against Warn’s purpose. Notice, Warn. In libraries, the Notice level has low occurrence. Also, it resembles the Info level at the same time that it resembles the Warn level. Considering the combination of its deﬁnition found in the literature and the level nomenclature, we merged the Notice level to the Warn level. Error, Fault. The Fault level is another level of low occurrence. For [L03], Fault level describes bugs in running software systems, and furthermore, it ranks before the Critical severity level. Consequently, we merged Fault to Error. Fatal, Alert, Critical, Emergency, Severe. Fatal, Critical, Alert, and Emergency levels are the most severe levels out of 81% of selected libraries, and their deﬁnitions have a prominent semantic similarity. In our abstraction, the Fatal level is the level that describes the failures situation, and it has the most signiﬁcant among the levels analyzed (Fatal, Critical, Alert, Severe and Emergency). The Fatal and Critical levels have the same value in [L17]. Finally, the Severe level has low occurrence, but its deﬁnition has semantic similarity with the Fatal level. These facts leaded us to merge Fatal, Critical, Alert, Severe and Emergency into the Fatal level. We performed the synthesis process, resulting on six stateof-the-practice log severity levels: Trace, Debug, Info, Warn, Error, Fatal. Thus, considering the results obtained from the three sources, we synthesized combined deﬁnitions for the six abstracted levels as follows. Debug severity level describes variable states and details about interesting events and decision points in the execution ﬂow of a software system, which helps developers to investigate internal system events. Trace severity level broadly tracks variable states and events in a software system. Info severity level describes normal events, which inform the expected progress and state of a software system. Warn severity level describes potentially dangerous situations caused by unexpected events and states. For this reason, they must be observed, even if they do not interrupt the execution of a software system. Error severity level describes the occurrence of unexpected behavior of a software system. For this reason, they must be investigated, even if they do not interrupt the execution of a software system. Fatal severity level describes critical events that bring a software system to failure. We observed a convergence of log severity levels across the three sources after the processes of abstraction and synthesis, and we noticed four main purposes for log severity levels: a) Debugging Purpose: it describes levels used to log variable states and events internal to the behavior of a software system. It groups Debug and Trace, while Trace extrapolates Debug’s characteristics of describing variables and events. b) Informational Purpose: it describes levels used to record the expected behavior of a software system. c) Warning Purpose: it describes levels used to warn unexpected behavior of a software system. It groups Error and Warn levels because both indicate problems (or potential problems) that should be investigated, but do not interrupt the system’s execution. d) Failure Purpose: it describes levels used to record failures of a software system. A. There is an excessive variety of severity levels among logging libraries. Two-thirds (68% – 13/19) of log severity levels can be considered redundant specializations of the recurrent severity levels (32% – 6/19) in peer-reviewed literature, logging libraries, and practitioners’ point of view. The excessive specialization of levels makes its choice difﬁcult, impacting the amount of log generated and, consequently, the reliability of monitoring systems. We recommend keeping a consistent nomenclature for the levels, and we recommend using six severity levels: Trace, Debug, Info, Warn, Error, and Fatal. We also recommend creating a policy to use severity levels, with practical examples to guide the choice of severity levels effectively. B. There is a lack of precision in the deﬁnitions of log severity levels. We observed a lack of precision in the deﬁnitions of log severity levels. For example, there are severity levels in library deﬁnitions without distinguishing speciﬁc purposes or only characterized by adjectives and superlatives. This lack of precision can cause a misunderstanding of severity levels and hinder logging practices. Thus, we suggest that logging library creators provide precise and unambiguous deﬁnitions for considering the log level purposes. C. The values of log severity levels help to understand the distinction between severity levels. The vast majority of logging libraries use a numeric value associated with severity levels. In the absence of precise deﬁnitions, these values clarify the library creators’ proposal regarding the degree of severity of each level. We suggest that logging library creators continue to provide these values. We also suggest that these values are ascending, considering the order between the six severity levels of the state of the practice, from the least severe to the most severe: Trace < Debug < Info < Warn < Error < Fatal. D. Explore the logging library features. Using a limited set of levels can lead to difﬁculties when there is a need to identify speciﬁc log data. We recommend that developers explore the library features like the “Marker interface”, which can add semantics to the log levels used in practice. We also recommend studying the logging library settings to use conﬁguration practices instead specialized severity levels.. E. Research on log severity levels has grown in recent years. The logging community recognizes that choosing the level of log severity can be challenging and can impact systems in development and production. Therefore, in recent years, log severity levels have been more generally investigated. However, despite this growing interest, the literature had not established what are log severity levels indeed. Thus, our study is a ﬁrst step towards establishing a systematic mapping of severity levels, deﬁnitions and purposes. F. Threats to validity a) Validation of deﬁnitions and purposes of severity levels: In this study, we do not validate deﬁnitions and purposes against actual logging entries. Therefore, empirical studies need to be done to observe the adherence of these deﬁnitions besides logging practices in software systems. Moreover, controlled experiments should be performed to assess the effectiveness of these deﬁnitions. b) Logging library mapping: The fact that our work does not cover an exhaustive set of libraries is a factor that can reduce the validity of the results. Nevertheless, we aimed to obtain a representative set of them, applying consistent inclusion and exclusion criteria, selecting only libraries to increase the validity of our results to mitigate this threat. The choice of log severity level can be challenging and cause problems in producing reliable logging data. In this study, we present a state-of-the-art and state-of-the-practice mapping of log severity levels. We extracted data from three sources: peer-reviewed literature, logging libraries, and practitioners’ point of view. Our study systematically mapped the selected sources, empirically analyzed the deﬁnitions, descriptions, and documentation of log severity levels. To summarize, we analyzed 19 severity levels from 27 studies and 40 logging libraries. Our results showed that there is redundancy and semantic similarity between the levels. Moreover, they converge the severity levels for a total of six levels: Trace, Debug, Info, Warn, Error and Fatal. Besides, there is consistency in ordering between the different levels in different libraries and that the levels are permeated with speciﬁc purposes. Our main contributions are: (i) mapping of the peerreviewed literature of studies dealing with logging severity levels; (ii) mapping of the severity levels in the logging libraries; (iii) a set of synthesized deﬁnitions for log severity levels, and four general purposes for severity levels. The results of our study (mapping, deﬁnitions, and purposes) provide evidence to create guidelines for choosing log severity levels that increase the data reliability. Furthermore, logging library creators can use our results to adopt severity levels accordingly. Finally, we present recommendations about log severity levels. In future work, we plan to expand this systematic multivocal mapping. We will add more logging libraries and grey literature sources, other Q&A websites, discussions and technical blogs that discuss the log severity level. Furthermore, we aim to leverage the results of this mapping, identifying a conceptual framework that supports developers and system operators’ logging practices in addition to metrics and approaches. Finally, we plan to organize a catalogue of log entry patterns, presenting metadata for each severity level as intent and practical examples.