Muhammad Sajidur Rahman, Blas Kojusner, Ryon Kennedy, Prerit Pathak, Lin Qi, and Byron Williams Email: {rahmanm, bkojusner,ryonkennedy, preritpathak, linqi, byron}@ufl.edu Abstract—Frequently advised secure development recommendations often fall short in practice for app developers. Tooldriven (e.g., using static analysis tools) approaches lack context and domain-speciﬁc requirements of an app being tested. App developers struggle to ﬁnd an actionable and prioritized list of vulnerabilities from a laundry list of security warnings reported by static analysis tools. Process-driven (e.g., applying threat modeling methods) approaches require substantial resources (e.g., security testing team, budget) and security expertise, which small to medium-scale app dev teams could barely afford. To help app developers securing their apps, we propose SO{U}RCERER, a guiding framework for Android app developers for security testing. SO{U}RCERER guides developers to identify domain-speciﬁc assets of an app, detect and prioritize vulnerabilities, and mitigate those vulnerabilities based on secure development guidelines. We evaluated SO{U}RCERER with a case study on analyzing and testing 36 Android mobile money apps. We found that by following activities guided by SO{U}RCERER, an app developer could get a concise and actionable list of vulnerabilities (24-61% fewer security warnings produced by SO{U}RCERER than a standalone static analyzer), directly affecting a mobile money app’s critical assets, and devise a mitigation plan. Our ﬁndings from this preliminary study indicate a viable approach to Android app security testing without being overwhelmingly complex for app developers. Mobile apps usage is increasing, and security vulnerabilities are corroding apps. In a 2021 mobile security report, Synopsis reported that out of the 3335 top mobile apps analyzed from 18 of the most popular app categories during the Covid-19 pandemic, 63% of apps contained known security vulnerabilities [1]. While apps ridden with security vulnerabilities are nothing new, one interesting observation is that 94% of these vulnerabilities have publicly-known ﬁxes available, and 73% of the discovered vulnerabilities were ﬁrst disclosed more than two years ago. As the onus of securing mobile apps is often placed on app developers, one cannot ignore asking: why do app developers fail to adopt security tools and guidelines when security practitioners and researchers share their decades of experience dealing with common vulnerabilities? The well-known secure development recipes frequently advertised to developers can be broadly categorized as either tool-driven or process-driven. Advocates for tool-driven security recommend that app developers use static analysis tools to detect and ﬁx vulnerabilities extensively. However, developers face challenges in understanding, contextualizing, and prioritizing security warnings from static analysis tools because of high false-positive rates, indecipherable warnings, and context-insensitive reporting [2], [3]. On the other hand, while process-driven threat modeling techniques (e.g., STRIDE, Attack Trees, Top-k lists of vulnerabilities) have been proposed and practiced in the industry, various factors like time, budget, dedicated security teams/experts, and a steep learning curve make threat modeling challenging and unadoptable for solo app developers or small teams that do not have structured organizational capacity [4]. Moreover, no tailored threat modeling process focusing on secure mobile app development is currently available. While app developers are aware of the mobile security knowledge base (e.g., OWASP Mobile Security Project), there is no straightforward recipe for app developers to jump-start the threat modeling process for security testing. Research has shown that solo and smallscale app developers want support to make the ‘right’ choices regarding thinking and implementing security controls [5]. We argue that ignoring the need for small scale app developers has already resulted in an app-insecurity problem, including clientside insecure TLS certiﬁcate validation (e.g., [6]), code injection through insecure Webview implementations (e.g., [7]), and privilege escalation attacks using third-party libraries to name a few of the commonly recurring app vulnerabilities. In an attempt to help app developers contextualize functional requirements of their apps during security testing, we propose SO{U}RCERER, a lightweight, developerdriven guiding framework for Android app security testing. SO{U}RCERER provides an easy-to-follow recipe for app developers to identify critical assets of an app, detect and map prioritized vulnerabilities affecting assets, and mitigate prioritized vulnerabilities based on secure development guidelines. We made the following contributions in this paper: 1. We situate the SO{U} RCERER framework by aligning its threat model and assets under the scope of Android app development (§II). We deﬁne three phases of activity for an app developer to conduct principled security testing. 2. We deﬁne a taxonomy of asset families for Android app threat modeling, which can be used to identify assets for apps operating in diverse business domains (§II-A2). 3. We provide a walkthrough of the framework by providing a case study and detailing the walkthrough of applying the framework to test 36 Android mobile money apps (§III). We present results (§IV) and discuss (§V) potential application areas of SO{U}RCERER in app security testing and developer security education. SO{U}RCERER is a guiding framework built on the principle of identifying critical assets to prioritize and mitigate vulnerabilities during app security testing. As app development is iterative in nature with shorter release cycles, developers face challenges in testing apps to address devices and OS version compatibility, accessibility, and UX, with little to no consideration for security testing [8], [9]. This gap in security testing motivates us to introduce SO{U}RCERER to guide Android app security testing. SO{U}RCERER framework and in §II-B, we describe the phases of SO{U}RCERER to conduct Android app threat modeling. 1) Threat Model for Android App Security: Recently, Mayrhofer et al. [10] proposed a multi-layered threat model for Android OS, which we adopt to discuss an adversary’s capabilities under the scope of developing a secure Android app. We assume that the adversary can sniff network data packets sent/received by an app, access the platform-provided API stack through the app, run code for harvesting sensitive data, and transfer sensitive data to adversary-controlled locations without user notice. The adversary does not gain physical access to an end-user device, but they can install an app in an adversary-controlled device to reverse-engineer the app. We assume the end-user trusts their device and the underlying Android OS. For the scope of this paper, we assume the following threats that an adversary can exploit because of the insecure app development process: (i) untrusted code execution on the device, (ii) untrusted content processed and stored by the device, and (iii) untrusted network communication. 2) Assets for Android Devices: In security threat modeling, an asset refers to any piece of information, device, or component of an organization’s systems deemed valuable – often because it holds sensitive data or can be used to access such information [11], [12]. An asset container refers to the physical or logical location where that information is kept. An adversary seeks to access or impact assets through vulnerabilities. Considering assets as sensitive information, Android devices hold a multitude of sensitive data (i.e., assets), which include but are not limited to personally identiﬁable information (PII), business data or corporate intellectual data, authentication data, device identiﬁcation data (e.g., IMEI, SIM serial no.), application generated data (e.g., cache data, app logs), usage history data (e.g., SMS/call log, browsing history), sensor data generated by tailored hardware (e.g., camera, GPS, gyroscope), user-generated data (e.g., keystrokes, no. of steps taken by user). After reviewing threat modeling and Android app analysis literature, we propose the following asset families for Android apps. We assume that members of asset families are not exclusive, and there could be overlap in membership among asset families. used to uniquely identify a device’s user, in the form of identiﬁers (e.g., name, address, email, social security number (SSN), phone number, date of birth, device identiﬁers) or quasi-identiﬁers (e.g., frequently visited locations, spending habit, call logs). Compromising user assets could result in either proﬁling or tracking users by an adversary. an app to provide advertised functionalities (e.g., money transfer, ﬁtness tracker) with the assumption of keeping user assets secured. Common examples of application assets include, but are not limited to, cryptographic keys, API keys/tokens to connect web/cloud services, proprietary algorithm/information. Compromised application assets can result in the loss of intellectual property, data breach, and loss of business reputation. served by the host operating system. For example, in Android, platform assets include, but not limited to, system APIs to perform sensitive operations, e.g., accessing local media storage/ﬁles (e.g., READ_EXTERNAL_STORAGE, READ_SMS, READ_CALL_LOGS), accessing rich sensors (e.g., CAMERA, ACCESS_FINE_LOCATION) for customized end-user services. We present SO{U} RCERER as a three-phased guiding framework for security testing of an Android app before the app is published on the marketplace. We assume that an app developer does not require formal security training to follow the process prescribed by the SO{U}RCERER framework. We also assume that the developer (or security tester) has complete access to the app source code for code review and business requirements documentation for reviewing app requirements. Followings are the activities involved in the three phases of the SO{U}RCERER framework that an app developer needs to follow through for app security testing: 1. Phase 1 - Asset Identiﬁcation: Identiﬁcation of assets from app requirements documentation. 2. Phase 2 - Vulnerability-to-Asset Mapping: Source code analysis for vulnerability detection and prioritization based on assets. 3. Phase 3 - Mitigation: Apply mitigations based on the vulnerability-to-asset mapping. 1) Phase 1 - Identiﬁcation: In the ﬁrst phase, an app developer analyzes the app’s functional/business requirements and identiﬁes an Android app’s critical assets and asset containers which provide or support certain functionalities in a particular business domain. An asset could belong to multiple asset families based on the app’s domain-speciﬁc requirements. For example, system-level Android API permissions can belong to both app-asset and platform-asset families, depending on the permission level. Consider a hypothetical ﬁtness app, VeryFiitt, asking a user to grant LOCATION permission to track user’s activities. The app needs to safeguard this permission so that no other apps can collude. App collusion happens if VeryFiitt sends the location data via an implicit intent (action=android.intent.action.SEND, MimeType = text/plain), and a malicious app without location permission can deﬁne an intent ﬁlter to accept the location intent, leading to escalated privilege violation. In this context, the app developer of the VeryFiitt app should consider LOCATION permission as both an app asset (malicious app collecting user location, thus violating user privacy) and a platform asset (malicious app accessing privileged permission API). In essence, asset identiﬁcation can be deﬁned as a function of an event where a system-level/third-party API accesses a sensitive system resource or data type to provide a service deﬁned by the app’s business requirements. 2) Phase 2 - Vulnerability-to-Asset Mapping: In Phase-2, an app developer focuses on source code analysis to detect vulnerabilities to map the vulnerabilities to assets identiﬁed in Phase-1. For example, a developer uses the source code analysis engine to check whether the app suffers from vulnerabilities such as cross-site scripting (XSS) and remote debugging enabled in WebView. In addition, the source code analysis engine determines whether private data (e.g., user credentials, device identiﬁers) are logged or sent over an insecure network connection. The source code analysis engine comprises multiple static analysis tools to provide a comprehensive and comparative security report that examines the codebase from multiple angles. A comparative security analysis is required because static analysis tools differ in sensitivity and vulnerability ranking, and not all static analysis tools can guarantee to cover all types of vulnerabilities [13]. The comparative security analysis reports vulnerabilities based on majority-voting of static analysis tools (a detailed walkthrough of creating a consolidated report based on comparative analysis is described in §III). This list of vulnerabilities is further inspected to verify whether they are exploitable to cause adverse impacts on assets identiﬁed on Phase-1. At the end of Phase-2, the developer is able to form a prioritized list of vulnerabilities that could impact assets (i.e., vulnerabilityto-asset map). 3) Phase 3 - Mitigation: With the knowledge of vulnerability-to-asset mapping, the app developer can implement security controls and mitigations advocated by bodies of industry-standard groups (e.g., NIST, OWASP, and MITRE). For our discussion, we choose OWASP Mobile Security as our knowledge base to ﬁnd mitigation techniques for the following reasons: i) Unlike other standards bodies, the OWASP Mobile Security project primarily focuses on common vulnerabilities that can be exploited client-side (i.e., end-user device). ii) The vulnerabilities usually arise from implementation-speciﬁc errors resulting from developers’ misuse, abuse, or misunderstanding of security instrumentation on a mobile device. To evaluate the SO{U}RCERERframework, we conducted a case study to seek answers to the following questions: 1. RQ1: How long does it take to conduct the three-phase activities of SO{U}RCERER? 2. RQ2: How does the vulnerability report obtained by following the SO{U}RCERER activities differ from a static analysis tool? 3. RQ3: How do the available open-source static analysis tools compare with each other? 4. RQ4: What are the common vulnerabilities in mobile money apps? Which assets are getting affected by these vulnerabilities? 5. RQ5: What are the common mitigations for these vulnerabilities? Three members from the authors ran the case study by following the prescribed activities of SO{U}RCERER, as deﬁned and explained in § II. All participants had intermediate to advanced level experience in Java programming language and intermediate level experience in Android app reverse engineering. We chose Android mobile money apps for the case study as these apps have revolutionized people’s access to the economy and ﬁnancial independence in developing countries in the last decade, yet the security posture of these apps is found vulnerable [14]. Based on GSMA mobile banking report [15], we chose 36 Android ﬁntech apps that are geographically diverse and are currently operational in developing countries from South-East Asia, Middle East, North and Central Africa, Central America, and South America. Each participating evaluator was assigned to conduct security testing of twelve apps based on the SO{U}RCERER framework. For a comparative static analysis, participants were instructed to use three static analysis tools: MobSF, AndroBugs, and QARK. These tools were chosen because they are opensourced, well documented, and extensively used in academic and industry app analysis for benchmarking open-source static analysis tools [16], [13]. In the absence of standard project requirement documents, we instructed participants to use the app descriptions available from the Google Play store as a proxy to identify the functional requirements and services provided by the apps. We asked each participant to measure time during each phase of the study and to take notes of any challenges faced during the study. Since the case study was based on static app analysis, no unexpected damage or any harm was not incurred to the afﬁliated ﬁnancial institutions or end-users. In the following, we describe the activities that a participant, Alice (pseudonym), conducted for security testing of the A2 app (a mobile banking app in India). In this stage, Alice manually examined the A2 app’s description from the Google Play store to identify the keywords that deﬁned either an action the end-user could perform or the type of service provided by the app. She identiﬁed the following text snippets which show the functionalities of the app: . . .instant digital payments through your mobile phone. . .link Mobile number with Bank account. . .phone should have an active SIM card. . .The active SIM card is linked to a bank account. . .You have a valid Debit Card for your Bank Account. . .Use your PIN to unlock device Based on these functional use cases, Alice listed the following asset family members: no., phone contacts, debit card no. using PIN) to login the device/app, proprietary cryptographic algorithms to keep data safe, secure communication channel. dangerous permission APIs (e.g.,READ_CONTACTS, READ_PHONE_STATE). [Note: Figure 1 lists the compilation of common assets found across three asset families by our participants.] Alice used three tools for comparative static analysis: MobSF, AndroBugs, and QARK. Since the security warning reports produced by each tools were heterogeneous in terms of reporting style and vulnerability ranking [13], Alice followed this heuristic of majority-voting inclusion criteria to reconcile the security reports and create an initial list of vulnerabilities for further inspection: a vulnerability V would be considered if at least two out of the three tools could detect V in exact source code locations (e.g., same class or methods). To verify these vulnerabilities, Alice used a Java decompiler IDE jd-guito inspect the source code manually. She checked the reported vulnerable methods and code snippets to verify that they were not part of unreachable code. Alice manually checked the data ﬂow of the vulnerable code location and veriﬁed if any assets identiﬁed in the previous stage are reachable. For conﬁrming the exploitability of vulnerabilities, she looked up code samples from a vulnerability benchmarking repository named Ghera [17]. After veriﬁcation, she mapped each vulnerability to the asset categories that were found to be affected. To implement security controls based on the vulnerabilityto-asset mapping, Alice browsed and searched by vulnerability keyword (e.g., SSL cert. error, insecure WebView) in OWASP mobile app security veriﬁcation standard (MASVS) [18] guidelines to identify prescribed security requirements. After Fig. 1: Summary results from the case study. The left column shows the list of assets identiﬁed by three participants after performing Phase-1 activities. The Middle column shows the vulnerability-toasset mapping. The percentages shown next to each vulnerability category show the ‘%’ of apps affected by the corresponding vulnerability. The rightmost column shows the mitigation strategies as deﬁned in the OWASP MSTG guideline. Mitigation Mprovides implementation strategy to thwart vulnerability V(where i == j), thus protecting the affected assets. IPC: inter-process communication; PII: personally identiﬁable information; WV: WebView. ﬁnding the security requirement, she further searched into OWASP mobile security testing guideline (MSTG) [19] to ﬁnd and implement recommended security practices. This section presents the preliminary evaluation results of SO{U}RCERER framework, based on the case study. [Note: For anonymization, we have reported only the aggregated results and avoided publishing the name of any speciﬁc mobile banking service. We have reported all our ﬁndings, detailed security risk reports, and a detailed guideline of performing security testing based on SO{U}RCERER to the related ﬁnancial organizations, with the expectation that they would enhance the security of their apps.] On average, it took participants 61 minutesto complete the SO{U}RCERER activities, from identifying assets of an app to ﬁnding vulnerability mitigations, with a minimum runtime of 51 minutes and a maximum of 75 minutes. Participants spent an average of 15 minutes for asset identiﬁcation, 30 minutes during vulnerability detection and prioritization, and 20 minutes to ﬁnd mitigations. On average, MobSF, QARK, and AndroBugs reported 9, 19, and 49 categories of vulnerabilities. On the other hand, using the SO{U}RCERER framework, our participants could prioritize only seven categories of vulnerabilities on average. Based on participants’ reporting, SO{U}RCERER effectively reduced prioritized security warnings in a range of 24-61%, compared to a standalone static analysis tool. Participants reported MobSF as a comprehensive tool for detecting the vulnerabilities found in mobile money apps. The average runtime for MobSF was 50 secs, while the runtime for AndroBugs was 72 secs. QARK was found to have the longest run time of 19 minutes. QARK also failed to analyze 33% of the apps during the case study. Participants reported both MobSF and AndroBugs being consistent in terms of sensitivity and vulnerability ranking throughout the analysis. D. RQ4: Common Vulnerabilities and Affected Assets in Mobile Money Apps Participants found that 75% of the apps had known vulnerabilities affecting all three asset categories. Participants found these vulnerabilities reported by static analysis tools, and later they veriﬁed the reported vulnerabilities by manual inspection, as reported in §III. SQL injection was the most critical vulnerability affecting user assets (64% apps), followed by sensitive information (e.g., mobile no., email, IMEI) logging vulnerability (47% apps). 78% apps have been found with hardcoded information (e.g., API keys) in plain text, thus affecting app assets. In terms of platform assets, 75% of the apps have accessed at least one of thirty dangerous permissions deﬁned in Android documentation. Interestingly, 63% of the apps have accessed READ_PHONE_STATE permission, which enables the apps to access non-resettable unique identiﬁers, e.g., IMEI. Accessing identiﬁers like IMEI is often tied with transmitting sensitive data to an ad-tracking network, which often shares data with data brokers without the explicit consent of end-users [20]. Our participants also noticed that 68% of mobile money apps using third-party tracking libraries (e.g., Tune, Branch, AppsFlyer, Amplitude, Crashlytics, FireBase), as reported by MobSF. While it was beyond the current scope of this paper, this ﬁnding certainly raises suspicions as to why sensitive apps like mobile money apps use tracking libraries and perform international data transfer, which may cause violation of federal banking laws of the operating countries [15]. 80% of apps have been found accessing external storage (platform asset). While accessing external storage is not a vulnerability, a close inspection showed that 53% of apps with external storage access had also logged and stored sensitive information in common storage. The middle column in ﬁgure 1 shows summary results of the vulnerabilities identiﬁed and the vulnerability-to-asset mapping catalog for 36 analyzed apps. Contrary to the severity of vulnerabilities, mitigations of these vulnerabilities are commonly known and well documented. Most of the vulnerabilities could be mitigated by following secure coding guidelines, e.g., avoiding logging app data in shared storage, avoiding keeping hardcoded data in source code (MSTG-STORAGE-3), verifying that the WebView only rendering JavaScript contained within the app package (MSTG-PLATFORM-7) [19]. The rightmost column in ﬁgure1 shows the mitigations identiﬁed during evaluation. Mobile app development is an agile process with highfrequency release cycles with a constant rush of adding new features. App developers keep pace with competitors and app market incentives, focusing heavily on fulﬁlling functional requirements (e.g., device and OS version compatibility) and putting less effort into testing non-functional requirements like security. Commonly available security guidelines are not readily adoptable by Android app developers for the following reasons: 1) Unlike legacy systems, android devices pose a diverse set of security and privacy challenges due to their rich set of sensors and always-connected nature over an unsecured network. 2) The app economy incentivizes developers for faster app publishing in the marketplace and 3) There is a rapid rise in app developer demographics, from hobbyist to independent, small or medium scale developer teams who cannot afford resources (e.g., time, money, security education) for dedicated security testing. Research initiatives have not yet produced any standard, reference model, or exemplar that can be used to capture what threat modeling and security testing entails for secure app development [4]. Therefore, it is not always clear to app development teams what to expect from app security testing. Despite publishing app security guidelines, OWASP too acknowledges that a one-size-ﬁts-all approach to mobile app security testing is not sufﬁcient because every mobile app is unique and requires a different level of security., e.g., a threat model for a book reader app would be different from that of a money transfer app. We argue that the list of commonly available security requirements and testing guidelines is too broad and can not be readily tailored and adapted by a developer to measure the security posture of her app. For example, some could believe that addressing the ‘top 10 threats’ is a valid substitute for systematic security testing. However, we believe that a common reference framework will help to clarify the value of systematic security testing for apps. Furthermore, a standard reference framework serves as the basis for exchanging threat modeling information in a standardized fashion and thus can underpin tools that support the security testing process. Research has shown that small- to mediumscale app developers need tool support and contextualized decision support regarding thinking and implementing security controls [5]. We believe SO{U}RCERER can be a guiding framework by bridging this current gap between knowledge and action. SO{U}RCERER helps an app developer prioritize and ﬁx vulnerabilities based on the critical domain-speciﬁc assets of an app without getting overwhelmed by a generic list of security advice or warnings reported by standards bodies or static analysis tools. We discuss related work in two key areas: investigations of security issues in Android app development, and studies of threat modeling techniques for secure software development. There have been some efforts to investigate security vulnerabilities in Android apps by developing static analysis tools. For example, Crylogger [21] detects cryptographic API misuses in Android apps; MalloDroid [6] detects potential SSL ManIn-The-Middle (MITM) vulnerabilities in apps; FixDroid [22] scans a developers’ code for common security pitfalls and provides feedback. It needs to be pointed out that working prototypes of academic static analysis tools are hard to ﬁnd in the real world, thus makes it challenging and harder for reproducibility and re-evaluation for future work, let alone to be used for actual app development phases, as found in systematic studies of Android static analyzers [16], [13]. Besides academic tools, industry-grade static analysis tools also present warnings to developers in a non-user-friendly and unintuitive format, which leads developers to confusion, due to either a lack of security knowledge or person-hours available to address the issues [23]. Threat modeling in the context of secure software development is involved in identifying threats to mitigate vulnerabilities. While various threat modeling approaches (e.g., STRIDE, PASTA) have been proposed and developed over time, the practice is not widespread and agile practitioners, and software developers have few sources available on adopting the threat modeling practice during development [24], [4]. For example, asset identiﬁcation is one of the greatest challenges faced by development teams [24]; developers need a baseline and a guiding framework to start modeling the system, eliciting security requirements, and ﬁnally reviewing the system to apply security controls as required [4]. Besides, the practice of threat modeling often poses challenges, e.g., steep learning curve, collaboration across teams, and internal or external security expertise. These challenges are critically hard to manage for small (or solo) to medium level app developers with limited to zero levels of organizational resource capacity [8], [5], [4]. In our work, we focus explicitly on the lack of a developer-driven security testing framework and propose SO{U}RCERER that would help developers contextualize functional requirements of their apps and prioritize threats for mitigation to secure the apps. Due to obfuscated source code, participants from the case study had to use their subjective assessment to choose whether a particular vulnerability would be critical or not. For example, one-third of the apps used weak hash algorithms, but participants could not conﬁrm whether the hash algorithms were part of an encryption mechanism or something benign. Also, the smaller sample size of human evaluators limited our ability to generalize our ﬁndings. For example, the average time reported by evaluators to complete SO{U}RCERER activities could be biased, as the participants had prior knowledge in reverse engineering, which may not be common to know for a general app developer. In an ideal case, an app developer might take more than an hour to complete the activities. Though we believe it is essential, we did not focus on improving vulnerability veriﬁcation through taint analysis except for leveraging the existing vulnerability benchmark available in the literature (see Phase-2 from § III ). Relying solely on manual inspection could bias the vulnerability veriﬁcation results found during the case study. During the reconciliation of security reports from multiple static analysis tools, the participants might disregard valid vulnerabilities due to applying a majority-voting heuristic, which could affect the results to be generalized. Besides, the observed results are based on a limited set of static analysis tools, and hence the observations regarding open-source static analysis tools may fall short in generalization. In response to these limitations, we point out the fact that our work’s primary focus was not to perform yet another app analysis to ﬁnd vulnerabilities. Instead, we proposed a guiding framework that could help app developers have a reference framework for threat modeling and security testing with a minimal learning curve and less friction to their regular development activity. Additionally, although we present a case study of SO{U}RCERER on ﬁntech apps, this framework can be readily repurposed to analyze Android apps from any business domain and apps from other smartphones OS (e.g., iOS). The work-in-progress consists of automating the manual steps (e.g., asset identiﬁcation, vulnerability veriﬁcation) and implementing a standard and bespoke tool for app developers to conduct the activities intuitively with less manual effort. Future work will consist of conducting a large-scale study by applying this framework to analyze diverse categories of mobile apps and developer study to measure the effectiveness and usability of SO{U}RCERER framework, comparing other off-the-shelf security tools. In this paper, we present SO{U}RCERER as a guiding framework for Android app developers to conduct security testing. The framework consists of three phases: identifying assets, creating vulnerability-to-assert mapping, and mitigating identiﬁed vulnerabilities. We conducted a case study of evaluating SO{U}RCERER framework on 36 ﬁnancial apps with three participants. Our initial ﬁndings showed that SO{U}RCERER could help app developers identify a concise and actionable list of vulnerabilities that could affect an app’s critical assets and devise a mitigation plan. We also found that study participants could complete the activities within a reasonable time frame. Our ﬁndings from this preliminary study indicate SO{U}RCERER being a viable approach to Android app security testing without being overwhelmingly complex for app developers.