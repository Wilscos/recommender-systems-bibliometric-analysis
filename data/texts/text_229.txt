Abstract—Being able to recommend links between users in online social networks is important for users to connect with like-minded individuals as well as for the platforms themselves and third parties leveraging social media information to grow their business. Predictions are typically based on unsupervised or supervised learning, often leveraging simple yet effective graph topological information, such as the number of common neighbors. However, we argue that richer information about personal social structure of individuals might lead to better predictions. In this paper, we propose to leverage well-established social cognitive theories to improve link prediction performance. According to these theories, individuals arrange their social relationships along, on average, ﬁve concentric circles of decreasing intimacy. We postulate that relationships in different circles have different importance in predicting new links. In order to validate this claim, we focus on popular feature-extraction prediction algorithms (both unsupervised and supervised) and we extend them to include social-circles awareness. We validate the prediction performance of these circle-aware algorithms against several benchmarks (including their baseline versions as well as node-embedding- and GNN-based link prediction), leveraging two Twitter datasets comprising a community of video gamers and generic users. We show that social-awareness generally provides signiﬁcant improvements in the prediction performance, beating also state-of-the-art solutions like node2vec and SEAL, and without increasing the computational complexity. Finally, we show that social-awareness can be used in place of using a classiﬁer (which may be costly or impractical) for targeting a speciﬁc category of users. Index Terms—link prediction, social circles, Dunbar’s model, Twitter In early 2021, the number of social media users worldwide has reached 4.2 billion, up 13% from the previous year [1]. Social media are now large ecosystems, where we gather to interact with people we already know or to join communities of people that share our interests. Clearly, being able to pair together people with similar interests is crucial for socialdriven and content-driven platforms like Facebook, Twitter, Instagram, Youtube, etc. This spurred intense research on link prediction, whereby algorithms suggest potential new links with users that are similar to each other. Solving this problem is equivalent to ﬁnding a needle in a haystack: online social networks (OSN) feature millions of users, the number of potential links between them grows with the square of the number of users, but the actually existing links are quite sparse. Link prediction algorithms can be broadly divided into feature extraction methods and feature learning methods [2]. The former are based on predeﬁned similarity metrics/heuristics, typically computed using topological information about the network, be it local information (such as the number of common neighbors) or global one (such as the length of paths connecting two nodes). Despite their apparent simplicity, local similarity-based prediction algorithms perform generally well, even when compared to more complex approaches [3], and are also computationally efﬁcient. Recently, various new link prediction methods (leveraging graph neural networks [4], [5], [6] and network embeddings [7], [8]) have been proposed, which automatically learn latent features that reﬂect the relevant structure of the graph, and, for this reason, are denoted as feature learning methods. These new methods have been shown to perform extremely well on the link prediction task [7], [5]. One of the well-known mechanisms that drive link formation is the homophily principle, which states that individuals tend to bond with those that are more similar to them [9]. Common-neighbors-based algorithms leverage this principle for predicting new links. However, ﬁndings from anthropology show that not all bonds are equal: some relationships are just acquaintances and do not imply a signiﬁcant cognitive engagement. With respect to the meaningful relationships, each individual organises them into concentric social circles where the intimacy progressively decreases from the innermost to the outermost circle [10], [11]. This model of how humans organise their relationships stems from the social brain hypothesis, which links our social life to cognitive constraints related to the size of our neocortex [12]. This hierarchical social structure is known to impact signiﬁcantly on who we trust [13], on the way information spreads in online social networks [14], and on the diversity of information that can be acquired by users [15]. This layered social structure is typically represented using an ego network graph [16], [17], [18], [10], in which the individual, referred to as ego, is at the center of the graph, and the edges connect her to the peers (called alters) with which she interacts. Figure 1 illustrates the classical ego network structure. Please note that the second layer includes all the alters in the ﬁrst layer, the third layer Fig. 1: Layered structure of the ego network. The red dot at the center corresponds to the ego. includes all the alters in the ﬁrst and second layers, and so on. The ego-alter tie strength is typically computed as a function of the frequency of interactions between the ego and the alter. The ego network structure is characterised by a striking regularity: the typical sizes of the layers are 1.5, 5, 15, 50, 150, with an approximately constant ratio of 3 between the size of consecutive layers. Online relationships have been shown to exhibit similar regularities [19], [20], thus proving that friendship links (which can be in the thousands for online social networks) not associated with online interactions do not change the innate social structure of humans. Since social links are not all the same, simply considering the set of common neighbors (or analogous topological metrics), disregarding the importance of each social link, might not give a precise estimate of the homophily between two individuals. Thus, in this paper, we set out to improve featureextraction link prediction algorithms with information about the different importance of social relationships. To this end, we exploit well-established models in the anthropology literature that describe the relative importance of our social bonds by grouping them into different social circles. Please note that the social circles we refer to are very loosely related to the concept of communities in social networks. In fact, social circles are (local) groupings entirely from the perspective of the ego, they include only nodes with which the ego is directly connected, and the links between the alters (which are crucial for regular communities) do not play a role at all here. Note also that our goal is not to propose a new prediction algorithm, but to add social-awareness to popular prediction solutions. To the best of our knowledge, the only other work in the literature that investigates ego networks in relation to link prediction is [21]. However, in the context of that work, an ego network is a different structure from the one studied here (only the links between the alters are considered), social cognitive models are not leveraged, and the effect of using information on the different social circles for link prediction is not investigated. While the general problem of link prediction entails recommending any of the useful links that a user may want to create with other users, in certain applications we may want to recommend links between users that share a speciﬁc common interest together. Predicting links in such contextualised communities might be much more relevant (and valuable) than predicting links between generic users. This could be the case, for example, of a third party service that wants to connect users interested in a speciﬁc topic. In this paper, we showcase one application of this concept by focusing on a set of gamers on Twitter, and we investigate how to make new link recommendations leveraging key properties of the way users allocate their cognitive capacity to social relationships. As discussed in Section III, we believe that focusing on such a target set of users, characterised by a speciﬁc type of online engagement, is particularly signiﬁcant for link recommendation in online social networks. Then, we apply the same method to generic Twitter users, in order to assess the efﬁcacy of the proposed solution also beyond the contextualised communities settings. The key ﬁndings presented in the paper are the following: tion approach (unsupervised or supervised), the speciﬁc heuristic or learning algorithm, and the metric (precision, AUC, F1 score) considered, leveraging social circles information outperforms the corresponding baseline in which circles are ignored. achieved precision varies with the recommendation algorithm considered. In unsupervised similarity-based approaches, innermost circles help policies with little or no penalization of high degree nodes, while outermost circles boost the performance of algorithms relying on high-degree nodes penalization. The precision of supervised strategies is generally considerably increased when only the innermost circle, corresponding to the small set (composed of 3-5 people typically) of the most intimate relationships, is considered. features is able to beat feature-learning link prediction algorithms like node2vec and SEAL, which exploit node embedding and graph neural networks, respectively. This happens when the most intimate circle is leveraged, which comprises only the two or three strongest relationships of the ego. Thus, using knowledge on a few common strong ties is more effective than complex black box approaches. performance as using additional classiﬁers on nodes, which might be impractical or costly to use. The rest of the paper is organised as follows. We review the related work in Section II. In Section III we present the two datasets that we leverage in our analysis. The ego-aware unsupervised and supervised link prediction approaches based on feature extraction methods that we study, and the feature learning methods that we use as benchmarks are presented Section IV. Their prediction performance is then evaluated in Section V. Finally, in Section VI we conclude the paper. An analysis of the computational complexity of the proposed approach is provided in Appendix F. According to the social brain hypothesis from anthropology [12], the social life of primates is constrained by the size of their neocortex. Speciﬁcally, for humans, the typical group size is estimated around an average of 150 members, a limit that goes under the name of Dunbar’s number. This limit is related to the cognitive capacity that humans are able to allocate to nurturing their social relationships. The 150 friends, in fact, do not include acquaintances, but only people with which a coherent quality relationship is entertained. In a modern society, this entails, at the very least, exchanging birthday or Christmas cards every year. Unsurprisingly, humans are not fair in how they distribute their cognitive attentions among the 150 important persons they have around them. To the contrary, it is possible to group our social relationships in circles of increasing intimacy, as illustrated in Figure 1. Typically, each of us has at least four circles of intimacy [10], [11]: the innermost one (support clique) includes our close family, the sympathy group comprises all those people whose death tomorrow would leave us deeply affected, the afﬁnity group includes colleagues, extended family, people you hang out with, and ﬁnally the active network is made up of all the people you meaningfully interact with at least once a year. The circles are conventionally concentric, with the inner layers contained in the outer ones. Many people also feature an additional inner layer (contained in the support clique) comprising on average 1.5 alters for which they have a very high emotional investment [20]. The social brain theory was developed for the ofﬂine world, in which relationships were nurtured via face-to-face interactions, letters, or landline phone calls. Many had postulated that this theory would not carry over to the online world, where OSN allow us to engage conveniently with a huge number of people scattered across the globe. However, Dunbar’s model stood the test of the cyberworld as well: Dunbar’s number hold for email communications [22], mobile phone calls [23], and Twitter [19]. More importantly, the same layered structure of social relationships has emerged on both Facebook and Twitter [20]. These ﬁndings are extremely important. In fact, since ego network structures are known to impact signiﬁcantly on the way information spreads in OSN, and on the diversity of information that can be acquired by users [15], embedding these models of human cognition into services for OSN may drastically improve the quality of service provided to the users. The literature on link prediction algorithms is large. Here we only summarise the main approaches and we refer the interested readers to [3], [24], [2] for detailed surveys on the topic. Following the taxonomy proposed by [2], we discuss separately feature extraction and feature learning methods 1) Feature extraction methods: Similarity-based methods make up the largest class of link prediction algorithms proposed in the literature. The rationale of this approach is that nodes are more likely to form links with nodes that are similar to them. This idea is grounded in the widespread and welldocumented social phenomenon of homophily [9]. Algorithms in this class differ in how they deﬁne the similarity between nodes. We can broadly distinguish them based on whether they use local information, global information, or a hybrid combination of the two (this approach is one of the least popular, hence we will not treat it further). For a given node pair, local similarity-based solutions rely on node neighborhoodrelated structural information, such as the number of common neighbors [25], an inverse function of the degree of common neighbors [26], [27], or a Preferential Attachment index [25]. Local similarity-based approaches are very efﬁcient, even on large networks, due to their easy parallelization. Their main theoretical limitation is that they are able to predict only new links between neighbors-of-neighbors. Their counterpart, global similarity-based approaches, rely on metrics computed considering the whole network topology. These metrics focus typically on the possible paths inside the network, such as the shortest paths [28], paths with different lengths by means of the Katz Index [25], random walks [29], or community membership [30]. Algorithmic methods map the link prediction problem into well-known algorithmic approaches. Within this category, classiﬁer-based methods treat the link prediction problem as a binary classiﬁcation problem [31], [32], [33], [5]. Each node pair can be characterised with a variety of attributes, including the similarity-based heuristics discussed above. This labelled set can be fed to virtually any classiﬁer (such as decision trees, SVM, k-nearest neighbors, random forest, neural networks). The advantage of this approach is that it can be extended and adapted to any new attribute that one wants to test, and that it generally signiﬁcantly outperforms purely unsupervised similarity-based methods [31], [33], [34]. Preprocessing methods are considered meta-approaches, as they are intended to be used in conjunction with other algorithms, for which they provide preprocessing/pre-ﬁltering intended to remove some noise in the network. As an example, the clustering method discussed in [28] suggests the removal of the weakest links (those between nodes with few or zero common neighbors). The solution that we propose in this paper falls into this category. The meta-approach that we investigate is based on considerations related to how people distribute their social capacity across their relationships, rather than on pure graph-related properties. Orthogonally to the above classiﬁcation, we can also distinguish between approaches that consider the weights of the links or not. Among the former, we mention [27], [35]. As discussed in [36], though, the performance of weighted indices is often worse than their unweighted counterpart. For this reason, in this work we do not consider the weight of links besides what is needed to compute the ego network structure. 2) Feature learning methods: Feature learning methods map the graph into a low-dimensional feature space. The difference between feature extraction and feature learning methods is that, in the latter, the features are learnt by the system and not hand-engineered. The mapping, or graph representation, can be learned and optimized via both supervised and unsupervised methods [2]. The random walk methods use graph exploration methods such as breadth-ﬁrst search (BFS), depth-ﬁrst search (DFS), and random walks to capture features and node properties such as centrality, being a hub, or community membership. DeepWalk [37] and node2vec [7] are the most popular methods of this category. For the link prediction task, the node feature vectors (node embeddings) are transformed into edge feature vectors (edge embeddings) using operators like the Hadamard product or cosine similarity. Extracted edge embeddings are fed to learning algorithms (such as SVM, regression methods, deep neural networks) to train a model that is used to predict future links. These methods are considered semi-supervised, since the information on the existence/non-existence of a link is already present in the studied graph. Graph neural network (GNN) models leverage neural networks to map the graph structure to a low dimensional vector space. Graph differentiable pooling, graph autoencoders, and graph neural networks have been used for the link prediction algorithms based on neural networks. In this study, we compare against the popular GNN-based link prediction algorithm SEAL [5], which relies on a CNN architecture. Note that network embedding methods and graph neural networks (GNN) are highly related to each other [38], as they both map the network to a lower-dimensional representation space. However, GNNs allow for greater ﬂexibility, by leveraging node features in the encoder, by sharing parameters between nodes in the encoder, and by ﬁxing the transductivity problem of shallow embdeddings [39]. From the link prediction perspective, GNNs typically provide end-to-end frameworks (i.e., the learnt presentation is optimised for the link prediction problem), while graph embedding methods capture topologylevel properties that are then used to train a separate classiﬁer for link prediction. As discussed in Section I, in this paper we investigate social circle-aware link prediction considering both a community of users with shared interests (gaming, in our case) and generic users. Before presenting the algorithms for predictions in Section IV, here we ﬁrst introduce the datasets that we use as case study. Without loss of generality, some deﬁnitions required in the prediction algorithms will be discussed with reference to these datasets. However, please note that each such deﬁnition can be used as-is for any other dataset describing different communities, and the algorithm works unchanged in all such cases. In the gaming-related dataset, we consider as shared topic of interest “indie games”. An independent video game, or indie game, is a video game that is often created without the ﬁnancial support of a publisher, although some games funded by a publisher are still considered “indie”. Indie games often focus on innovation and rely on digital distribution. Growing a community of interested users is thus a critical success factor for them. The goal of our link prediction task is to recommend users interested in indie games to other users interested in indie games. Our gaming-related dataset consists of 8,932 users (labelled as gamers) engaging in game-related conversations. We have collected (June 2018) their timeline (most recent 3200 tweets) using the Twitter Search API. Details on the collection process are provided in Appendix A. In the generic user dataset, we focus on a group of users whose interests are not associated with a speciﬁc domain. To this aim, we use a dataset presented in [40], containing the timelines (most recent 3200 tweets) of 1,930,802 Twitter users obtained by means of a snowball sampling starting from US President Barack Obama in November 2012. Please refer to [40] for further details on the collection process. Note that we use two Twitter datasets because Twitter is especially amenable to the computation of ego networks: social interactions are typically public and can be easily downloaded. For this reason, the vast majority of the literature on online ego networks (Section II-A) leverages Twitter data. Facebook interactions would be similarly suitable but they are not public, hence could not be accessed. The social network graphs available to the research community do not typically include information on the frequency of interactions, thus ego networks cannot be extracted. We ﬁlter the 8,932 gamers and 1,930,802 generic users and extract their ego network (including their social circles) using the same methodology as in [41], which we brieﬂy recollect here. We simply need a weighted social graph, whose edge weights correspond to the contact frequency between the corresponding nodes. In order to extract reliable information, we ﬁlter users according to the same policy used in [41]. We only consider users whose Twitter activity is regular (i.e., they post, on average, at least one tweet every 3 days for at least 50% of the total number of months of their activity) and stationary (i.e., they are not in their initial stage of engagement with the Twitter platform, which typically features a transient spike of activity). The strength of egoalter relationships is inferred from the frequency of direct tweets (mentions, reply, or retweets) between the ego and the alters. The optimal number of social circles per users is obtained using the Mean Shift clustering algorithms to group such frequencies. The code for computing the ego networks can be found at https://egonetworks.readthedocs.io/en/latest/. Approximately one third of the gamers passed all the ﬁlters described above, and this left us with 3,061 gamers with reliable ego network information. On the other hand, approximately 7% of the generic users passed all the ﬁlters, amounting to 148,105 generic users with reliable ego network information. We further ﬁlter them as suggested in [25] by considering only nodes that are connected to the giant component. Also, in order to have a generic user dataset with a similar size as that of the gaming-related dataset and to reduce its computational intensity, we sampled 3,000 egos from the giant component of the generic users network by snowball sampling [42]. We denote the set of nodes for which we have ego networks as V. In the gaming-related dataset all egos are gamers. Vice versa, in the generic users dataset, all egos are generic users. An exploratory analysis of the ego networks in our datasets, which is substantially in agreement with the results from the related literature [41], [20], can be found in Appendix C. Note that, when we focus on an ego i, its alters can now be associated with the social circle of i to which they belong. Note also that we do not typically have the ego network of the alters. In the gaming-related dataset, the alters of ego i can be generic users, other gamers, or even games. This implies that some nodes are domain-speciﬁc (in our case, gaming-related), while others are generic. Domain-speciﬁc nodes are homogeneous, since they share a common interest. Summarising, we have three classes of nodes in the gaming-related dataset: gamer users with ego network (V), regular (unlabelled) users without ego network (V), and domain-speciﬁc users that may or may not have an ego network (V, including games and gamers for which ego network information is not available or not reliable because they didn’t satisfy the ﬁlters discussed previously). On the other hand, in the generic user dataset, all alters of ego i are also generic users. Generic nodes make prediction more challenging with respect to the case of homogeneous nodes (as, e.g., in [25]), because they tend to differ more from each other. In the generic user dataset, we can identify only two classes of nodes: generic users with ego network (V) and generic users without ego networks (V) that are basically alters. The ﬁnal datasets are summarised in Table I and Table II. The imbalance ratio, i.e., the ratio between the negatives (potential links that do not exist in practice) and the positives (links actually existing) in the class of both gamers and generic users is around 10:1, which is quite high. This is a wellknown problem in link recommendation for online social networks (remember from Section I that links are sparse). This implies that special care should be taken in the evaluation, as explained in detail in Section V-B. We denote with G = (V, E) the graph modelling the relationships in our dataset. Since our goal is to evaluate the contribution of social circles to link prediction, we will focus on the subset of nodes in V for which social circles can be computed. Thus, predictions will be made for the set of possible edges between nodes in V. A. Similarity-based unsupervised learning with circleawareness In order to showcase the effect of social circles for unsupervised link prediction, we focus on the simple, yet effective class of similarity-based approaches. Like for all similaritybased link prediction algorithms, the goal of the proposed algorithm is to associate each non-existing link between two users i, j in Vwith a score proportional to the likelihood that the link will actually be formed in the future. Hence, the goal of the link predictor is to associate with each edge in V× V− Ea probability/conﬁdence that the link will indeed appear in the future. Qualitatively, this is equivalent to suggesting users to other users for possible interactions, friendships, etc. In order to study the effect of the social circles on link prediction, we propose to slice the social graph based on the membership to a speciﬁc circle (recall that our concept of social circles is different from that of communities). Let us focus on a user i ∈ V. We denote with C, C, . . ., the sets comprising the neighbors of i that belong to i’s ﬁrst, second, . . ., social circle, respectively. We have discussed how to obtain these circles in Section III-A. Thus, the graph G sliced according, e.g., to circle C, is the graph including only links between egos and their alters up to layer 3 (remember that Cincludes Cand C). More formally, it can be deﬁned as G= (V, E), where E= {e∈ E : i ∈ V, j ∈ C}. Note that the slicing introduces asymmetry in the graph (e.g., a relationship i, j can be in C4 for ego i and in C3 for ego j). However, it is exactly this edge ﬁltering that helps link prediction, as we will show in Section V. Social-circles slicing can be extended to include also domain-based slicing for domain-speciﬁc datasets. For example, from Gwe can retain only domain-speciﬁc nodes and edges (i.e., nodes in V∪ Vand edges in E∪ E). We generalise the notation related to the slicing preprocessing by denoting with ω the speciﬁc slicing considered, and with Gthe resulting graph. In Section V, we will discuss the performance of link prediction both with social-based slicing and with social-based plus domain-based slicing. We anticipate here that when the social circles information is not used for the prediction, leveraging the category information provides a signiﬁcant advantage. Vice versa, social-circles awareness makes information on the category less relevant (and this is extremely important, since the extraction of categories typically requires an additional, domain-speciﬁc, classiﬁer or manual labelling). In order to perform unsupervised link predictions, for each user-user pair i, j for which a link does not exist in E, we follow Deﬁnition 1 below. Note that each slicing will yield different predicted links. Hence, we will treat each slicing choice as a separate link prediction approach. Deﬁnition 1 (UNSUPERVISED CIRCLES-AWARE LINK PREdiction algorithm suggests, to a user i, K users j (with j ∈ V∧ (i, j) 6∈ E) associated with the top-K sim(i, j) values, where ω denotes the selected slicing and sim(i, j) is the similarity computed on G. The deﬁnition of a new similarity function is out of the scope of the paper. What we want to do here is to evaluate popular similarity functions available in the literature when they are enriched with knowledge about the ego network circles. In order to isolate the effect of social-circles awareness, we need approaches that are simple (so it is easy to gauge the role of social circles) yet effective. For these reasons, our choice fell on the strategies described below, often used in the related literature. In summarising them, we denote with Γ(i) the neighborhood of node i in G. the number of common neighbors between users i and j as the Jaccard similarity of the set of common neighbors of users i and j in G: duces the importance of common neighbours having high degree: to the Adamic-Adar one, but it penalises even more the common neighbors with high degree: Among these four link prediction algorithms, RA is the one that consistently performs better in the related literature [36], [43], [35]. In Sections V-D and V-E we will investigate if this is still the case when the policies can leverage the knowledge of the social circles. Each topological metric discussed in the previous section captures a single possible mechanism yielding to the formation of new links in the network. Ref. [44] discusses how this unsupervised approach can take advantage of adding supervised learning on top of it. They show that simple ranking of heuristics is outperformed by supervised classiﬁers, because the latter have the capability of identifying multiple differentiating boundaries in the similarity score domain, even when just a single heuristic is used as feature. Thus, in this section, we cast our social-aware link prediction problem into a supervised learning problem. This entails computing a vector of features for each user pair i, j. Each of the metrics in Section IV-A becomes a feature that describes the user pair. Each pair is also labelled to mark whether the link exists or not. In order to test the different performance of different supervised approaches, in this work we consider the following learning algorithms (in parentheses we report the link prediction papers in which they have been previously used): logistic regression [45], Random Forest [44], decision trees, na¨ıve Bayes, and SVM [31], the latter with both linear and polynomial kernels. We use their R implementations (glm, randomForest, rpart, klaR, kernlab, respectively) together with the caret package for training and test. Parameter optimization is applied on the training set with 10-fold cross validation. In the literature, there are newly suggested link prediction methods based on learning latent features of the graphs, where these feature vectors are low-dimensional vector representations produced by approaches such as graph representation learning [46] and graph neural networks (GNN) [38]. For a detailed description and classiﬁcation of the methods, the reader may refer to [38], [2], [47], [46] and Section II-B1. In this work, we select two feature learning algorithms to be used as benchmarks for comparison with our social-aware approach. Speciﬁcally, we have selected one of the most popular graph embedding methods, node2vec [7], and one most the most popular GNN-based link prediction methods, SEAL [5]. For details on the two algorithms and their settings, please refer to Appendix B. Note that, differently from Sections IV-AIV-B, the selected feature learning approaches are not modiﬁed to include social-awareness. In fact, the key idea of feature learning is to autonomously learn the important graph features. Thus, our objective, in this case, is to assess whether the automatically learnt features are better than the social-aware hand-engineered ones in predicting new links. In this section we carry out the performance evaluation of the link prediction approach proposed in Section IV using the Twitter datasets described in Section III. For obtaining longitudinal data, we downloaded (December 2019) the Twitter timeline of the gamers in Eone year and a half after the initial download, and timeline of the generic users in Eeight years after the initial download. We then identiﬁed the links between gamers in the gaming-related dataset and between generic users in the generic users dataset that have appeared in the meanwhile. These new 843 links between gamers and new 1216 links between generic users constitute the set Eof links to be predicted, while Econtains the links existing in the ﬁrst temporal snapshot. While the above considerations are sufﬁcient for unsupervised link prediction, with supervised learning we also need to assign the negatives (i.e., missing links) to the train and test sets. To this aim, we split them 90%-10% between train and test. Clearly, the set of edges selected for test set may offer only a partial view of the performance (i.e, they may be easier or harder than average to predict). For this reason, we perform a k-fold cross-validation [24], with k = 10, each time selecting a new 10% of the negative links for the test set. The performance metrics are aggregated via microaveraging [48]. Using the 90% of negatives for training entails training supervised schemes on millions of negatives and only thousands of positives (Table I, Table II). While the impact of class imbalance is typically limited for similarity-based unsupervised approaches like the ones discussed in Section IV-A, it can create serious problems for the scalability and reliability of supervised learning. In order to mitigate the problem, the common approach in the related literature [31], [49], [5] is to undersample the negative class. Despite its widespread use, this technique is not without drawbacks [50]. In order to provide reliable measurements, we will show both the results obtained with undersampling (Section V-E) and the results obtained with the complete negative class (Appendix E). Similarly to the related literature [25], [35], [24], unsupervised link prediction algorithms are evaluated using a topK analysis, i.e., we compare their performance in predicting K new links. This allows for a fair comparison among the different approaches, as it avoids ﬁxing a similarity threshold for approaches in which the same threshold may have a different meaning. In order to span a reasonable K range around the number of positives in the test set (which, as we discussed in Section V-A, are 843 and 1216, for the gaming and generic users datasets respectively), we consider K ∈ {100, 843, 1000} for the gaming-related dataset and K ∈ {100, 1216, 1500} for the generic users dataset. For a given slice ω and for a ﬁxed K, each unsupervised link predictor described in Section IV-A outputs a list Lof K pairs in V× V− E, which are the newly predicted links (each with its associated conﬁdence in prediction, which, in our case, is the similarity value). Then we can compute classic metrics such as: Supervised approaches automatically label all the elements in the test set (without the need to set the K or a similarity threshold), hence the number of positives predicted is part of the workings of the supervised approach. In this case, thus, we do not pick the top K potential edges, but we directly rely on the labelling of the trained predictor for the test edges. It is then straightforward to compute the above metrics (for example, T P s are those edges in Ethat are marked as new by the supervised prediction algorithm). The related literature on evaluating systems with class imbalance suggests using metrics like precision (=), recall (aka TPR) and Fscore. As already argued by [49], in the context of link prediction, precision is more important than the other metrics (such as recall), because if the precision is high, one can live with some false negatives. Therefore, the focus of this evaluation will be mostly on precision. For the completeness of results, we also provide, when relevant, the AUC of the precision-recall curve. The results for the F1 score can be found in Appendix E. Precision and recall are evaluated based on metrics (TP, FP, TN, FN) which corresponds to speciﬁc realizations of a target phenomenon. Thus, the question arises of how conﬁdent we can be about the results obtained on a particular collection that is the result of random sampling (as in the case of cross-validation or subsampling of negatives for supervised prediction). To quantify this conﬁdence, we use credible intervals [51]. For further details, please refer to Appendix D. We are interested in comparing the performance obtained using the baseline approach (no social circles information, all edges are considered) and the other strategies in which only edges belonging to the ego network circles are considered. The majority of egos in our datasets feature approximately ﬁve circles in their ego networks (Appendix C, Figure A.1). For this reason, in our circle-based slicing we will consider circles from C1 to C5, then we group together into the ACTIVE circle all the circles beyond C5 (for those nodes that have more than ﬁve circles). Note that, since social layers are concentric and the i-th also include the (i − 1)-th up to the ﬁrst one, for egos with less than ﬁve circles the predictions in, e.g. C5, are simply based on the last non-empty social layer (which includes all the innnermost ones). Recall that the alters in the ACTIVE circle are all those with a signiﬁcant relationship with the ego, i.e, they interact with the ego at a frequency of at least one contact per year [11]. We denote with ALL the situation in which all relationships are considered, which implies considering both the nodes in the ACTIVE circle (signiﬁcant bonds) and those outside (acquaintances). This corresponds to the baseline from the related literature: all relationships are treated as equal, without factoring in the role of social circles. As anticipated in Section IV, we will consider two scenarios. In the ﬁrst one, denoted as ALLEDGES, we consider the full graph G, slicing it based on the social circles both in the gamingrelated dataset and the generic dataset. In the second one (DOMAINSPECIFICEDGES), we perform both social-based and category-based slicing, by only retaining edges between nodes that are domain-speciﬁc (i.e., gamers and games, in our case) with the gaming-related dataset. We start the evaluation with the unsupervised case. Note that credible intervals are not provided here, because in the unsupervised case there is no sampling of negatives and the links to be predicted are, deterministically, those that have actually appeared between the ﬁrst and second download. 1) The ALLEDGES case with the gaming-related dataset: The precisionfor varying K (number of new links recommended) is shown in Figure 2a. The maximum precision across all policies decreases when we increase K: the more the links recommended, the more the mistakes (as it is generally the case in the related literature). RA clearly outperforms the others in the gaming-related dataset, and this is consistent with previous ﬁndings in the related literature [36]. RA seems to beneﬁt signiﬁcantly from circle-awareness. Speciﬁcally, ignoring the outer circle gives a clear advantage to RA, which at least doubles its precision for all K values. Thus, the mechanism whereby high-degree penalization and social-awareness work hand in hand is very effective from a link prediction standpoint. It is also interesting to note that this advantage seems lost when only the innermost circle is considered. Fig. 2: Precision in unsupervised settings - ALLEDGES. However, leveraging only the innermost circle C1 means using very little information (only a few links per ego, as can be seen in Figure A.2, Appendix C). This can be an advantage in case of resource limitations (in terms of computational time, computing the similarity is faster on smaller neighborhoods, as we discuss in Appendix F). In such cases, we can have a good prediction (still better than that at ALL) by using only C1. Thus, the predictive power of using only the most intimate relationships unexpectedly outperforms baselines relying on all relationships. The drastically different performance of AA with respect to RA in Figure 2a tells us that the way we penalise high-degree nodes impacts on the effect that social circle information has on link prediction effectiveness. However, it is interesting to note that while in general RA is better than AA, this is not the case when resource constraints are considered. When only the most intimate links are kept in the ego networks, AA performs at its best and its precision is not only equivalent to that of RA, but also comparable TABLE III: ALLEDGES scenario with gaming-related dataset: AUC (×10) for the precision-recall curve of unsupervised link prediction. We highlight in bold the social layer in which each policy performs at its best. We underline the best two AUC overall. to the precision of RA in the baseline (ALL). In this case, then, strong degree penalization seems to be less important than strong intimacy. The Common Neighbors policy performs quite similarly to AA, even if, in CN, all neighbors contribute the same to the similarity score, regardless of their degree. This is evidence that here AA is working in a regime in which all nodes weight approximately the same (i.e., its logarithmic degree penalization is not enough). Given the similarity with AA, the same considerations we made for AA hold for CN. Finally, we highlight the poor precision of the Jaccard-based strategy, for all Ks and for all circles in the gaming-related dataset. Jaccard similarity gives more weight to neighborhoods that are very similar to each other. This means that not only the overlapping part is considered, but also the number of nodes that are not in common (union of neighbors). As testiﬁed by the plots, this restriction does not give an advantage for link prediction in the gaming-related dataset. With respect to social-circles awareness, Jaccard seems to suffer from using only the intimate relationships, while using the ACTIVE layer yields the same precision as the the baseline ALL while saving computational resources. We report in Table III the Area Under the prediction-recall Curve. Recall that the AUC is not dependent on K, since it is obtained by exploring the whole range of similarities for making recommendations. When considering the relation between precision and recall through the AUC, we observe that the best overall results (values underlined in the table) are achieved by RA that leverages C4 and C5. Looking at the layers that, for each policy, provide the best AUC, we note that the ALL case (which is the baseline for similaritybased policies from the related literature) is never the best performing. From the circle-awareness standpoint, there seem to exist two classes of policies, those that beneﬁt most from using the outermost circles and those that beneﬁt from the innermost ones. 2) The ALLEDGES case with the generic users dataset: Similarly to the gaming-related dataset, we observe that the maximum precision across all policies decreases when we increase K (Figure 2b). In this case, though, the baseline results (i.e., those without social-awareness) are different: while, for the gamers network, RA was already the best predictor in the ALL case, here we observe a generalised advantage of the JC approach for all K values. Given this different starting point, let us study how the prediction policies react to circle-awareness. RA preserves the characteristics we observed for the gamers, and still very much beneﬁts from social-awareness: all the circle-based scenarios have better or comparable precision than the baseline ALL. Note that, as mentioned in the gaming-related dataset results, even if the prediction precision is similar – as it is the case in Figure 2b for C1 and ALL with large K – using the most intimate links in C1 gives us the advantage of smaller computation time against traditional methods (see Appendix F for a thorough discussion). Turning our attention from RA to AA, Figure 2b shows that AA performs signiﬁcantly better compared to what we observed for the gaming-related dataset: here, AA substantially mimics the performance of RA, both in terms of achieved precision and in terms of social circles in which it performs best (speciﬁcally, around C4). Interestingly, AA was mimicking instead the performance of CN in the gamingrelated dataset, with peak performance in C1 and a generally poor precision both in the other social circles and in the baseline ALL. The fact that this difference is due to the different structural properties of the generic users graph with respect to the gamers one follows directly from the deﬁnitions of RA, AA, and CN in Section IV-A. Indeed, all the three policies are based on the principle that the more the common neighbors, the better for link prediction. Then, in CN all common neighbors weight the same, while in AA and RA the common neighbors with high degree weight less (much less in RA than in AA, since in RA the penalization is linear while in AA it is logarithmic) than those with small degree. The fact that the performance of AA is approaching that of RA implies that the degree of the common neighbors is not very high (hence the logarithmic penalization of AA and the linear one of RA are in a regime in which they yield similar scores). Taking into account the degree of the common neighbors still provides an advantage, though, as highlighted by the worse performance of CN with respect to AA and RA. As a ﬁnal remark, note that while JC is performing extremely well with the generic users dataset in the baseline ALL, its performance rapidly deteriorates as we incorporate circle information. This tendency was already present in the gamers datasets (Figure 2a) but was somewhat masked by the generally poor precision achieved by JC regardless of the circle/baseline considered. It is interesting to speculate on why circle-awareness does not help JC in general. To this aim, let us consider the deﬁnition of the Jaccard similarity in Section IV-A. JC captures the fraction of common neighbors out of all neighbors for a pair of users i, j. Thus, its very nature requires “useless” neighbors (i.e. those that are not in common) to be present, in order to differentiate between high and low neighborhood overlap. However, the slicing based on social-circles effectively remove “useless” nodes, hence impairing the discriminating capabilities of the JC score. In Table IV, we report the Area Under the predictionrecall Curve for the generic uses dataset. Again, recall that the AUC captures the trade-off between precision and recall and that it is not dependent on the speciﬁc K value considered, as it spans the whole K range. The best overall precisionrecall performance is achieve by RA when it leverages social information in C5. The second best AUC is provided by JC in the baseline case (no circle-awareness). AA and CN provides TABLE IV: ALLEDGES scenario with generic users dataset: AUC (×10) for the precision-recall curve of unsupervised link prediction. We highlight in bold the social layer in which each policy performs at its best. We underlinethe best two AUC overall. the highest AUC when leveraging C5 information. Overall, from the results in Table IV, we can thus conclude that, even though the advantage of circle awareness is less evident in the generic users dataset, it still outperforms non-circle-related approaches. 3) The DOMAINSPECIFICEDGES case: Recall that, in this case, for any social-based slicing, we also remove all nodes (and associated edges) that are not domain-speciﬁc (this is only relevant to the gaming-related dataset). All the nodes left after this additional, category-based slicing are either gamers or games, i.e., they belong to the speciﬁc community for which we are making link recommendations. Making a link prediction is now much easier, because the network has been pruned by nodes potentially irrelevant or misleading. Indeed, as shown in Figure 3, the precision of AA and CN signiﬁcantly improves with respect to the ALLEDGES scenario in Figure 2a. This improvement is also present when no social-circle information is used (ALL circle in Figure 2a). This implies that when social-circle awareness is not used for prediction, leveraging the category information provides a signiﬁcant advantage. Vice versa, social-circles awareness seem to make information on the category unnecessary. Since the extraction of user categories typically requires a domainspeciﬁc classiﬁer or manual labelling, being able to skip this phase without affecting the link prediction quality would be very important. The precision of the Jaccard-based approach remains very low also when considering domain-speciﬁc edges only. We conclude this part on the DOMAINSPECIFICEDGES scenario by analysing the AUC of the precision-recall curve, reported in Table V. Table V shows that, also in this case, the best performance is achieved by RA in the outermost circles (speciﬁcally, ACTIVE and C5). We observe again the duality of behaviours with respect to the gain from social-circles awareness: RA and AA achieve their best AUC in ACTIVE, CN and JC in C1. The baseline ALL is never optimal (neither from an absolute standpoint nor for speciﬁc policies). This further conﬁrms the advantage of using social circle awareness in general. In this section we assess the advantages brought about by including a supervised classiﬁer in the link prediction approach. As discussed in Section IV-B, our classiﬁer uses as features the similarity-based metrics introduced in Section IV-A. The supervised approaches that we test are logistic regression, decision trees, na¨ıve Bayes, Random Forest, SVM. Fig. 3: Precision in unsupervised settings - DOMAINEDGES (only relevant to the gaming-related dataset). TABLE V: DOMAINEDGES scenario with gaming-related dataset: AUC (×10) for the precision-recall curve of unsupervised link prediction. We highlight in bold the social layer in which each policy performs at its best. We underline the best two AUC overall. Recall (from Section V-A) that with supervised learning we investigate the performance both on the original dataset and on the undersampled one. Also, with supervised learning we do not carry out a top-K analysis but we allow the algorithms to freely classify all the edges in the test set. Figures 4a, 4b, and 5 show the results, for the ALLEDGES and the DOMAINEDGES case respectively. Recall that, as explained in Section V-A, these results are obtained with the negatives undersampled to make the positive and negative classes balanced. In Appendix E we also investigate the link prediction performance when no undersampling is carried out (the ﬁndings are substantially conﬁrmed). Figure 4a shows the precision of the supervised link prediction approaches in the ALLEDGES scenario of gaming-related dataset. We can identify two important results. First, all approaches that rely on C1 information provide better precision than with any other layer. In particular, using all edges (case ALL) is never better than using C1 alone. Second, all circle-based approaches that leverage information on the outermost social layers perform at least as well as the baseline (ALL). When considering the generic users dataset (Figure 4b), we observe that the peak performance in C1 is conﬁrmed for Random Forest and na¨ıve Bayes. However, for the other learning strategies, the precision drastically drops in C1. For generic users, we can Fig. 4: Precision (with credible intervals) - SUPERVISED ALLEDGES on the undersampled datasets. The ALL scenario of feature learning algorithms is also included (it will be discussed in Section V-F). Fig. 5: (Gaming-related dataset) Precision (with credible intervals) - SUPERVISED DOMAINEDGES on the undersampled dataset. The ALL scenario of feature learning algorithms is also included (it will be discussed in Section V-F). conclude that all the social circles but the ﬁrst one provide approximately the same precision as the baseline ALL. Finally, please note that, for both datasets, the precision achieved with supervised strategies is much higher than that obtained with unsupervised ones (consistently with the results in the related literature [49]). In the DOMAINSPECIFICEDGES scenario for the gamingrelated dataset (Figure 5), again na¨ıve Bayes and Random Forest achieve the highest precision when leveraging only C1 relationships. Differently from the previous case, the precision of decision trees in C1 is lower than with other layers. The remaining learning strategies still gain from using C1 information, but the marging is smaller in this case. Differently from the unsupervised case, supervised learning seems able to overcome the difﬁculties of predicting new links in the ALLEDGES scenario, hence the relative advantage of ﬁltering out links not domain-speciﬁc is partially lost. In summary, supervised learning consistently yields better predictions than their unsupervised counterparts. This may be due to more ﬂexible identiﬁcation of boundaries between positives and negatives (with respect to the simple thresholdbased approach of similarity-based heuristics) or to a smart combination of the similarity-based heuristics. Regardless, social circles again prove very effective in boosting the precision of link prediction strategies, especially in the gamingrelated dataset. In particular, supervised strategies seem able to effectively exploit the innermost layer C1 in the domaindependent dataset and the active network layer in domainindependent dataset much better than the unsupervised cases. F. Comparison against link prediction methods based on feature learning Until now, we have studied the social-aware link prediction method by embedding the intimacy levels of Dunbar’s ego network model into existing unsupervised and supervised approaches. The ego network model is a way of capturing the local information of relationships of the individuals. Since the aim of the study is to understand the contribution of the social circles to the performance of the link prediction methods, we selected prediction methods where the feature calculation is not a black-box, and the link prediction method is not an endto-end method. All the methods discussed so far were based on explicit graph features. In this section, we compare the prediction performance of the methods based on latent features (node2vec and SEAL, discussed in Section IV-C) to feature extraction methods leveraging social circle information. Table VI shows the precision results of node2vec (for the best (p, q) pair), SEAL (whose best precision is achieved with h = 1 without embeddings), and the best supervised socialaware algorithms (whose the best results always occur with C1) on the undersampledgeneric users and gamers datasets. Recall that we are using node2vec and SEAL approaches as baseline methods where all edges are included without any slicing (this corresponds to the case ALL in the previous section). Please note that this comparison is fair, since we are studying machine learning-based algorithms trained on explicit features against a machine learning-based algorithm trained on latent features. Vice versa, we do not consider the unsupervised approaches from Section V-D as they do not leverage machine learning techniques. Table VI shows that the best circle-aware link prediction methods always outperform latent feature–based algorithms. Looking at Figures 4a, 4b, and 5 for a circle-by-circle comparison, we observe that either or both TABLE VI: Precision scores of node2vec with best (p, q) combinations, SEAL with h = 1 without embeddings (always the best conﬁguration in our scenarios), and the best circleaware supervised methods (all use C1 only, the learning method is RF-Random Forest, NB-na¨ıve Bayes). The bold cells represent the best precision score per column/scenario. feature learning strategies always provide the best precision in the ALL case. As expected, feature learning strategies are also generally very competitive in the other cases, outperforming circle-aware approaches for several slicing. However, they are never able to surpass the precision achieved by the best circleaware strategy. The implications of the above results are far-reaching: by using knowledge on a few common strong ties, circleaware link prediction consistently beats black-box approaches. This advantage is not even paid in terms of computational complexity: as we show in Appendix F, all the strategies in Table VI are linear in the number of edges. In this paper, we have studied the performance of circleaware feature-extraction link prediction algorithms. Speciﬁcally, relying on very well-established models from anthropology, we have considered the social circles in individual ego networks, using the circle as a proxy of intimacy. We have selected four benchmark heuristics and we have modiﬁed them to include awareness of the social circles. Our results show that social-circles-based link prediction is generally extremely effective. Speciﬁcally, in the vast majority of cases, regardless of the prediction approach (unsupervised or supervised), the speciﬁc heuristic or learning algorithm, and the metric (precision, AUC, F1 score) considered, leveraging social circles information outperforms the corresponding baseline in which circles are ignored. In addition, using only information about the innermost social circles guarantees the same performance achieved when using the whole network. Using social circles information also seems to provide the same performance as using additional classiﬁers on nodes, which might be impractical or costly to set up. Finally, and most importantly, circle-aware supervised link prediction outperformed recent state-of-the-art feature learning-link prediction approaches, including a GNNbased solution. Interestingly, the best-performing circle is C1, which comprises only the two or three strongest relationships of the ego: by using knowledge on a few common strong ties, circle-aware link prediction consistently beats black-box approaches.