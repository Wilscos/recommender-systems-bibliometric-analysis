Department of Electronic EngineeringDepartment of Electronic Engineering zhuzr17@mails.tsinghua.edu.cnchgao96@gmail.com Department of Electronic EngineeringDepartment of Electronic Engineering lin17@mails.tsinghua.edu.cnjindp@tsinghua.edu.cn Abstract—Incorporating social relations into the recommendation system, i.e. social recommendation, has been widely studied in academic and industrial communities. While many promising results have been achieved, existing methods mostly assume that the social relations can be homogeneously applied to all the items, which is not practical for users’ actually diverse preferences. In this paper, we argue that the effect of the social relations should be inhomogeneous, that is, two socially-related users may only share the same preference on some speciﬁc items, while for the other products, their preferences can be inconsistent or even contradictory. Inspired by this idea, we build a novel social recommendation model, where the traditional pairwise “user-user” relation is extended to the triple relation of “user-item-user”. To well handle such high-order relationships, we base our framework on the hypergraph. More speciﬁcally, each hyperedge connects a user-user-item triplet, representing that the two users share similar preferences on the item. We develop a Social HyperGraph Convolutional Network (short for SHGCN) to learn from the complex triplet social relations. With the hypergraph convolutional networks, the social relations can be modeled in a more ﬁne-grained manner, which more accurately depicts real users’ preferences, and beneﬁts the recommendation performance. Extensive experiments on two realworld datasets demonstrate our model’s effectiveness. Studies on data sparsity and hyper-parameter studies further validate our model’s rationality. Our codes and dataset is available at https://github.com/ziruizhu/SHGCN. Index Terms—Inhomogeneous Social Recommendation; Hypergraph Convolutional Networks; Triplet Social Relation As an effective remedy for information overloading, the recommender system has been deployed in a multitude of real-world applications. With the rapid development of online social networks, how to better exploit social relations for recommender system has gained its increasing popularity and various methods have emerged. The major approaches can be divided into two categories. Some works [1]–[3] propose to use regularization methods or multi-task learning to make the distance between friends as short as possible. Some other works [4]–[6] propose to smooth the friends’ embedding by sharing latent representations between friends. Nevertheless, these existing works have ignored the signiﬁcant fact that users share inhomogeneous interests with friends, resulting in inferior recommendation performance. For example, a user may share similar interests in books with classmates and share the same taste with family members on food or dressing. In other words, social relations have an inhomogeneous inﬂuence on users’ behaviors. It is worth mentioning that there are some works of social recommendation modeling the various strength of social relations [7]–[9]. However, such strength only represents the extent of social closeness but cannot handle the inhomogeneous inﬂuence. Such inhomogeneous effects are of importance but hard to capture, since at most times we can only obtain the two-tuple social relations. Recently, social e-commerce platforms such as Pinduoduo.com are gaining popularity. In this new kind of e-commerce platform, users can share products with their friends on the social network, as is illustrated in Figure 1a. When a user shares an item with his/her friend, the shared product can reﬂect the ﬁne-grained common interests between them, to some extent. Another case in this platform is groupbuying where two (or more) users launch a buying group and Fig. 1: Two examples of triplet social relation buy a speciﬁc item together, as is shown in Figure 1b. The inhomogeneous effect plays an important role here, considering that people would buy different items with different friends, e.g. rackets with tennis buddies and laptops with colleagues. These behaviors provide us a precious opportunity for studying the inhomogeneous social inﬂuence on user behaviors. It is not difﬁcult to summarize the preceding examples as triple relation of ”user-user-item” in a uniﬁed form. However, modeling the triple relation of “user-user-item” is seldom explored by existing works. Directly considering inhomogeneous social relations as homogeneous or giving them unidimensional weights cannot represent the inhomogeneous social relations instinctively. There are two main challenges, social relations involve three sides, two users and a shared item. The relations between them are not clear, and it is quite challenging to construct the representation, compared with existing works where there is only a scalar value for representing the pairwise relation of two users. reﬂect complex and ﬁne-grained common interests between two users, indeed. Given the triplets, it is challenging to distill the prediction signal and fuse it into preference learning. Inspired by the recent advances in graph learning [10], [11], we propose to construct a hypergraph, which generalizes the graph by introducing hyperedges that can connect more than two nodes. More precisely, we utilize hyperedges to connect two user nodes and an item node for representing complex triplets. To capture complex social inﬂuence and learn user preferences, we propose a hypergraph convolutional networkbased model, named SHGCN. With the carefully designed embedding-propagation layers, the model can effectively learn users’ latent preferences through messages passing on the hypergraph constructed by the triple social relations. Our contribution can be summarized as follows, a novel perspective of inhomogeneous social inﬂuence. In this setting, social inﬂuence is modeled from a ﬁnegrained perspective, which is more general compared with traditional social recommendation. both the complex triple social-relations and user-item interaction data. Speciﬁcally, the hyperedges on the hypergraph can well encode the triple social-relations. We then propose a hypergraph convolutional network-based model to capture the inhomogeneous social inﬂuence and user preference for recommendation. uate our proposed model. The empirical results demonstrate that our model can outperform the state-of-the-art baselines by 2.18% to 13.26%. Further studies conﬁrm our model’s effectiveness for both sparse users. We also ﬁnd that our model is not sensitive to various hyper-parameter settings, verifying its high application value in the real world. The remainder of this paper is as follows. We ﬁrst formulate our problem in Section II and present our solution in Section III. We then conduct experiments in Section IV and review the related works in Section V. Last, we conclude our paper and discuss future works in Section VI. The traditional social recommendation is deﬁned as to recommend based on user-item interaction data and binary socialrelation paired data. Different from it, in inhomogeneous social recommendation, the social-relation data is in the triple form, which is illustrated in Figure 1. For example, a user can share an item to or co-purchase an item with his/her friends, which reﬂects their ﬁne-grained common interests. Generally, the social-relation can be represented as <user, user, item>. Then the problem of inhomogeneous social recommendation turns to recommend with user-item interaction data and triple social-relation paired data. Assume that the set of users/items is U/V and there are M users and N items. The user-item interaction data can be denoted as a set Y, deﬁned as follows, The triple social-relation data can be denoted as a set of triplet E, deﬁned as follows, E =e = (i, i, j), i, i∈ U, j ∈ Vuser iinteracts with friend iwith respect to item j Then the studied problem in this work can be formulated as follows, Input: User-item interaction data Y and triple socialrelation data E. Output: A recommendation model that can estimate the probability that a user i will interact (purchase) with an item according to the predicted scores and then select the top-ranked items as the recommendation results. (short for SHGCN) can be summarized as four parts as follows, social relation that involves multiple users and items, we ﬁrst construct a hypergraph, which generalizes the concept of edge in existing graph-based models. The traditional graphbased models then can be regarded as a de-generated case where all edges’ degrees are two, also called two-uniform hypergraph. Then triple social relation can be modeled as hyperedge with a degree equal to three. pergraph, we assign it with a trainable low-dimensional embedding vector in the latent space, which is the fundamental of the following hypergraph convolutional layer. Here we consider the users or items as the same to ensure they are represented in the same space. homogeneous social inﬂuence through the triplet social relation represented as hyperedge, we propose the hypergraph convolutional layers that propagate embeddings on the hypergraph, making the embeddings of both vertexes and hyperedges can absorb in the neighbours’ information. results, we utilize the simple yet effective i.e. inner product, which is also very efﬁcient demonstrated by existing works [12], [13]. We deploy the widely-used Bayesian Personalized Ranking (BPR) loss [14] to optimize the model parameters. 1) Hyperedge and Hypergraph: Firstly, we give a brief introduction of hypergraph. Hypergraph generalizes the classical graph that only models pairwise relations between objects by replacing edge with hyperedge. A hyperedge can connect any number of vertices. The formal deﬁnition can be summarized as follows, Deﬁnition 1: Hypergraph. A hypergraph H can be deﬁned as H = (X , E), where X is a set of nodes (also called vertices), and E is a set of hyperedge. Each hyperedge connects several vertices, and thus it can be regarded as a non-empty set of vertices. A hyperedge can connect any vertices, and thus a hyperedge e ∈ E is an element of P\{∅}, where P denotes the power set of X . For ∀e ∈ E, the cardinality of e is also called the degree of e. Therefore, according to the deﬁnition above, hyperedges connecting just two vertices can be regarded as the classical graph edge. For the sake of simplicity and precision, in this paper, we refer to hyperedge as the hyperedge with a degree larger than two. 2) Hypergraph-structured data: Traditional social recommendation algorithms cannot well handle triple social relations since they are designed to tackling classical graph-structured data. Essentially, the input data of inhomogeneous social recommendation is a hypergraph constructed by all kinds of interactions between users and items as mentioned in section II. If we must adapt these methods to the hypergraph, then we should degrade hyperedges to classical edges, which will make the high-ordered interaction information revealed in the hyperedges discarded. We represent user and item as nodes, which is a commonlyaccepted manner in existing works [13], [15]. To construct our data as hyperedge, we ﬁrst build a hyperedge between user i, user iand item j for any triple social relation (i, i, j) ∈ E; for the user-item interaction (i, j) ∈ Y, we build a classical edge between user i and item j. Then the task of inhomogeneous social recommendation turns to predict the existence of classical interaction edge between a given user and a given item on the built hypergraph. It is worth mentioning that the hyperedges actually can connect any number of users and items. In our problem, we only consider the hyperedge connecting two users and one item, which represents triplet social relations. But no matter how, the proposed manner of hypergraph construction can easily handle more complex relations with more users or items. We describe a user i (an item j) with a low-dimensional vector P∈R(Q∈R), where d denotes the embedding size, following the paradigm of existing recommendation models [15], [16]. Then the full embedding matrix, containing both user and item, can be formulated as follows, where M and N denote the number of users and items, respectively. In the following sections, we use E=[P, Q] to represent the embedding matrix obtained by k-th hypergraph convolutional layer. We have E=E here. Existing graph-based methods always only assign trainable embedding matrices to nodes and ignore the explicit representation of edges. In the input data, the hyperedge encodes the triplet social relation and reveals inhomogeneous social inﬂuence. Therefore, it is essential to assign representations to these hyperedges. However, providing each hyperedge a freely-trainable vector will cost extremely high memory, since the space of hyperedge is huge. Therefore, we seek to make a trade-off that we generate a representative vector Cfor hyperedges e from the vertices connected by e. In the following section, we address it via hypergraph convolution operations. In this section, we would give an elaborate description of the whole hypergraph convolutional layer. Firstly, we derive representation of hyperedges to explicitly capture the inhomogeneous social inﬂuence that hyperedges reveal. The representation of hyperedges will be further exploited to model useruser social relations, users, and items. The overall structure is illustrated in Figure 3. 1) Hyperedge Representation: To make it easier to understand, we can regard hyperedges as virtual nodes, as is shown in Figure 2. For a virtual node of hyperedge, it is adjacent to the nodes it connects as a classical edge. Then message propagation of hypergraph convolutional network to obtain the embedding Cfor hyperedge e can be reformulated as the propagation in graph convolutional network as follows, where K(e) denotes the set of nodes connected by hyperedge e, σ(·) is the activation function, Edenotes the embedding matrix at the (k − 1)-th layer. Note that we do not distinguish the user and item embeddings, and w denotes the uniform index of user or item. For the l-uniform hypergraph, we can concatenate all the embedding of adjacent nodes and then use a multi-layer perceptron (MLP) as an aggregator to generate the embedding of hyperedge. However, we have observed severe over-ﬁtting issue in experiments. Therefore we choose the simple yet effective way following traditional graph convolutional networks [6] as follows, where W∈Rand b∈Rdenote the transformation matrix and bias to be learned, and we choose LeakyReLU as the nonlinear activation function. The triplet social relation encoded by hyperedges conveys the inhomogenous social inﬂuence between users. Since two users can be connected by multiple hyperedges, to well model the social relation, we need to aggregate the effect of different hyperedges. Therefore we design the following hypergraph convolutional layer to obtain the representation of social relations. 2) Social Relation Representation Module: The existing work of modeling complex relations among nodes [17] tries to learn a function f deﬁned on the power set of the node-set, of which the output would describe the relation between the input nodes. However, this modeling method, which roughly takes the node-set as input, ignores the internal structure of the graph. To address it, we build a vector Rto represent the social relation for two users, iand user i, who are friends. To obtain the representation, we design the graph convolutional layers as follows, R= σaggregateC|e ∈ N (i, i), t = η(i, i where N (i, i) denotes the set of hyperedges connecting to both user iand user i, and η(i, i) is the mapping function that outputs the index i-irelation for embedding lookup from R. We would like to emphasize the advantages of this socialrelation modeling method. We obtain a low dimensional vector representation of the two social-connected users in the process of message passing from the triplet social relations. Since the triplet social relation, such as item-sharing or co-purchase behaviors, reﬂects the inhomogenous social inﬂuence, this process of message passing can help adaptively aggregate all triplet social relations between two users. In our design method, we implement the aggregation in Eqn (6) with the graph convolutional networks, propagating the message from hyperedge to relation embedding. Then Eqn (6) can be re-formulated as follows, The empirical evidence in Section IV shows that this aggregator works well on real-world datasets. 3) User Modeling Module: In social recommendation, a user’s characteristics are partly built from his/her friends’ characteristics. This commonly-known social-trust effect, is widely considered in existing social recommendation works [2], [6]. However, these works are limited to only using scalar weight, which means the strength of social-relation describing the social trusts. In our method, as we have obtained the social relations’ representations, it becomes possible to further enhance the modeling of the social trusts. The key idea here is to additionally use the social relation representation calculated in equation (6) to model the social relation between two users in a ﬁne-grained manner. We can deploy a message passing-based aggregation process formulated as follows, σaggregateC|e ∈ Z(i)+ σaggregateP|w ∈ N (i), where the messages from hyperedges help address the limitations of existing works that can only aggregate messages from social network. Here Z(i) denotes the set of hyperedges connected to user i. As shown above, we also add a self-loop operation for the user embedding, of which the embedding of the previous layer would be directly added to the embedding of the next layer. This would help prevent the vanishing or exploding gradients problem. Messages from hyperedges aim to capture the latent signals of inhomogeneous social effects, while messages from social network mainly concentrate on social homophily modeling. In other words, the ﬁrst term varies between different items while the second term measures how similar two users are in general. In our experiment, we implement the aggregation in Eqn (8) via an attentive graph convolutional layer. Speciﬁcally, multilayer perceptron is adopted to generate the attention weight of user w with respect to P. Therefore the equation (8) can be reformulated as follows, where MLP is used to learn the attention weights αfor all the friends of user i. In our experiment, we ﬁnd that the recommendation performance is not sensitive to MLP’s structure. 4) Item Modeling Module: As for the item, it can also take full use of the hyperedges’ representations for capturing item features. In fact, the internal features of a speciﬁc item are indeed shaped by the characteristics of the triplet social relations that involve this item. For example, the item-sharing behaviors in social network are highly related to the item itself, besides the two users. Therefore, we can propose a propagation module to aggregate the hyperedges’ representations formulated as follows, where Z(j) denotes the set of hyperedges connected to item j. Similarly to Eqn (8), there is also a self-loop term P. We implement the aggreation via the plain GCN aggregator and then Eqn (10) can be reformulated as follows, where Wand bare learnable transformation matrix and bias vector. Note that we normalize the output embedding of each layer to ensure the numerical stability. It is worthmentioning that although some more complicated aggregator such as attention-base aggregator can also be adopted, this GCN aggregator has shown promising experimental results. Therefore we leave the exploration as the future work. D. Prediction and Optimization 1) Prediction Layer: After the propagation of L layers, we can obtain L different embeddings of both users and items {E, · · · , E}. Follow existing works [13], we concatenate the output of all layers to generate the ﬁnal representation of users and items as follows, We then choose the simple yet effective inner product as our prediction function as follows, 2) Model Optimization: To optimize our model parameters, we adopt the BPR loss [14] that is widely used in implicit recommender systems [6], [7], [13], [16] as follows, Loss =− ln σ(r− r) + λkΘk where O = {(i, j, j)|(i, j)∈Y, (i, j)∈Y} denotes the pairwise training data with negative sampling, and Y and Ydenote the observed and sampled unobserved user-item interaction set, respectively. Thanks to the Automatic Differentiation framework like TensorFlow [18] and PyTorch [19], we are freed from the complex gradient computation process. Therefore, we omit the computation of gradient with respect to parameters. We would like to ﬁrst discuss the model size and time complexity of our proposed model. Model Size. It is worth mentioning that SHGCN is a fairly lightweight model, although we introduce four embedding matrices (C, R, P, Q) at each hypergraph convolutional layer (k denotes the depth). The trainable parameters of SHGCN contain three parts, embeddings matrices of users and items, parameters of MLP, and parameters of four linear transformations in each layer. For the ﬁrst part, only the full embedding matrix of the 0-th layer E=E=[P, Q]∈Ris trainable. For the second part, we employ a two-layer MLP in our experiment, so we only have 2L·dextra parameters. For the last part, each linear transformation operation introduces parameters with size d(d + 1) and in total it introduces 4L·d(d + 1)-size parameters. Considering the fact that min(M, N) max(L, d), we can claim our SHGCN is as lightweight as MF [20] — one of the most concise embedding-based recommender model (only has the ﬁrst part of parameters). Take our experimented Beibei dataset as an example. There are 150K users and 30K users in Beibei. If we set the embedding size as 32 and use 3 propagation layers, MF has 5.76 million parameters while our SHGCN introduces only 18K additional parameters. In other words, our model uses only around 3% more parameters compared with MF. Time Complexity In the whole process of training, the most time-consuming part of our model is four aggregate operations in the hypergraph convolutional layer: hyperedge representation module, social-relation representation module, user modeling module, and item modeling module. The time complexity of these four modules are O(|E|d), O(|T |d), O((|T | + |E|)d), and O(|E|d), respectively. Here |E| and |T | denote number of hyperedges and social relations. As we can observe, our model has a linear time complexity with respect to the scale of the dataset. Empirically, hyperedges are very sparse, thus the additional time expense is relatively small. In our experiment, MF and our SHGCN cost around 14s and 20s per epoch on Beibei dataset, respectively, under the same embedding size, when training on a Tesla V100 GPU. In contrast, a complicated hypergraph convolution network-based method, MHCN [21], costs around 60s, which is twice more time-consuming than our model. The proposed framework is blessed with the natural advantage of hyperedge, and thus it can be adapted to hyperedges with arbitrary degrees, which guarantees the prospect of extensive application scenarios. Even though we only evaluate on tackling triple social relation, the proposed method, as presented by Eqn (4)-(11) remains the same when deploying our model on much more complex interactions. Actually, some well-studied problems such as productlist recommendation can also be regarded as a problem of handling one-to-many relations. We argue that the framework of SHGCN can also help in those scenarios, and we leave this for future studies. In addition, in the process of propagation, two intermediate embeddings are derived, namely the embedding of hyperedges and social relations. The derived embedding of hyperedges and social relations can also be used in downstream tasks like link prediction or classiﬁcation, which will be an interesting research problem. In this section, we conduct experiments on two real-world datasets to evaluate the proposed model. We aim to answer the following three research questions. of-the-art models? Does introducing the explicit modeling of triple social relations via hyperedge improve the recommendation performance? sue? In other words, can our model still steadily outperform baselines for users with fewer interactions? recommendation performance? In other words, does our model need lots of effort in tuning hyper-parameters to achieve good recommendation performance? A. Experimental Settings 1) Dataset: We conduct experiments on two datasets with different scales collected from real-world applications. The statistics of two utilized datasets are reported in Table II. Beidian, which is an e-commerce platform that supports users sharing products’ URL links in social network. This dataset contains two parts of data, purchase-behavior logs and item-sharing logs. Therefore the triplet social relation involves a user sharing the item, the shared item, the user receiving the shared item. Beibei, which is the largest e-commerce platform for maternal and infant products in China. In this platform, similar to Pinduoduo.com, group-buying is the most popular manner for users to purchase products. A user can launch a groupbuying and invite his/her friends to join via sending URL links in social network. Each entry in this dataset represents a group buying behavior, and we select the group buying logs having two users and one item since most group-buying behaviors are at the two-user size. Therefore the triplet social relation involves two users in the group and the purchased item. These two datasets to evaluate our model reﬂect two of those representative real-world scenarios where we can collect the data reveals inhomogeneous social relation, item-sharing and group-buying. Since these scenarios have achieved remarkable commercial success such as Pinduoduo.com, our studied problem has vast and valuable applications. 2) Evaluation Protocals: Following existing works [16], we apply the leave-one-out evaluation protocol to evaluate the performance of our model, and datasets are divided into the training set, validation set and the testing set. To evaluate the overall performance of all models, we adopt the two most commonly used metrics, Recall and NDCG, in recommender systems, deﬁned as follows, the probability that the true positive item is present in the top-K recommended list in a statistical sense. (NDCG) is an enhancement to Recall by taking the ranking location into consideration instead of merely counting whether the true positive item is hit. Specially, NDCG is equal to Recall when the metrics are evaluated in Top-1 list. 3) Baselines: We adopt the following representative and state-of-the-art methods as baselines for performance comparison. These methods are generally divided into three categories, including collaborative ﬁltering methods, social recommendation methods and adapted methods. Collaborative ﬁltering methods refer to those models that can only utilize user-item interaction data. The collaborative ﬁltering methods we choose are introduced as follows: which is the cornerstone of most state-of-art recommendation algorithms. social recommendation model. This method optimizes a pairwise loss, introducing an additional social regularization term to model social relation, calculated as the distance between a user and his/her friends’ weighted sum. TABLE IV: Overall Performance on the Beibei dataset (CG-version methods in Beibei dataset is equivalent to their EG counterparts as user-item interactions is actually extracted from the group-buying triplets; all p-value<0.01). most widely used GCN framework which enriches node embedding with its neighbors’ information by embedding propagation and aggregation. We deploy GraphSAGE to the user-item Bipartite Graph and name it as GraphSage-BG. Therefore it is a collaborative ﬁltering method. based models which exploits the user-item graph structure by modeling high-order connectivity and injecting the collaborative signal through propagation. We deploy NGCF to the user-item bipartite graph and name it NGCF-BG. Social recommendation methods can leverage the social network as side information to infer user preferences. In our experiment, we construct the social network by treating two users as connected as long as they ever appear in a same hyperedge. The compared social recommendation methods are as follows: the user-item bipartite graph to get an Extended Graph. We then conduct the propagation and aggregation of GraphSage on the extended graph and name this method as GraphSageEG. GraphSage-EG. The propagation on the extended graph makes NGCF aware of the social network structure even though it is originally designed to exploit the user-item graph only. method for social recommendation. It adopts the graph convolutional layers in the social graph and achieves state-of-art performance due to its ability to simulate the recursive social diffusion process through a layer-wise inﬂuence propagation structure. graph convolutional network-based method which works on multiple motif-induced hypergraphs. An InfoNCE-like [25] loss is added to MHCN’s learning objective to maximize the hierarchical mutual information. Some classic and commonly used baselines cannot even tackle hyperedges as input. Thus, we adapt the following methods to make them more compatible with our problems. undirected Complete Graph structure and deploy GraphSage on this graph. More speciﬁcally, for each hyperedge, we connect every pair of nodes in this hyperedge with an ordinary edge. We name this version GraphSage-CG. GraphSage-CG to enable it to tackle the hyperedge input. We name this version NGCF-CG. 4) Hyper-parameter Settings: All models mentioned above, including baselines and our SHGCN are trained with the BPR loss [14], which is commonly used in recommender system. We randomly select eight items for one entry in the train set as negative samples to train all the model. We adopt sampled metrics to evaluate the performance of all methods following [6], [16], where we randomly select 100 items for one entry in the test set. Following existing works [6], [26], we deploy Adam optimizer with the 4096-size mini-batch and ﬁt the embedding size d = 32 for all aforementioned methods. The learning rate is tuned in {3e-4, 1e-3, 3e-3} and Lregularization term is searched in {1e-8, 1e-7, 1e6, 1e-5, 1e-4, 1e-3}. We ﬁxed the message dropout and node dropout to 0 when it comes to GCN-based methods, as the methods preventing over-ﬁtting is not our main concentration. We set the number of GCN layers to three, which has been demonstrated good choice by existing works [13], [27]. B. Overall Performance (RQ1) We ﬁrst present the overall performance on two utilized datasets in Table III and Table IV, respectively. For the two top-K metrics, we set top-K to {1, 3, 5, 10}, a widely used range in existing works [6]. From these results, we have the following observations. two real-world datasets. As we can observe from Table III and Table IV, our SHGCN outperforms all the baselines signiﬁcantly on all Recall@K and NDCG@K metrics. We arbitrarily select ﬁve random seeds, repeat the training process, and report the averaged results. The p-values of independent two-sample t-tests are smaller than 0.01 for all metrics showed above, demonstrating the performance improvement is signiﬁcant and steady. From these results, SHGCN’s effectiveness is well validated. dimensional social relations. We can observe from Table IV and III that directly incorporating the social interactions to the graph does not make GraphSage or NGCF performs better due to they fail to capture the latent signals passed by the inhomogeneous social relations. In contrast, SHGCN explicitly extracts messages from triple social relations and uses social relations’ representation to shape the user embedding. From this point of view, our model succeeds in utilizing the triple social relations by effective hypergraph and graph convolutonal layers. lize triple social relations. Traditional social recommendation methods utilize the social network structure by minimizing the distance of connected users in the embedding space. SocialMF directly adds the distance term to its learning objective, while GCN-based methods implicitly achieve this purpose through the propagation on the graph. Hypergraphbased baseline MHCN highly depends on manually designed motifs and channels based on human expertise, and thus it lacks the ability to generalize when facing new datasets whose underlying semantics are different. As we can observe from Table IV and Table III, MHCN fails catastrophically on Beibei dataset. Our SHGCN is designed in a more elegant way as it does not depend on any manually designed motifs or propagation paths. Message passing patterns are learned automatically in the process of hypergraph convolution. Therefore, we can expect a more consistent performance on different datasets, and empirical results also turn out this way. C. Data Sparsity Issue (RQ2) Data sparsity issue is one of the main concerns of existing recommender systems. More speciﬁcally, the recommendation performance would decrease when the users’ interactions become sparse. Therefore, it is meaningful to study whether our propose SHGCN can still work well for those users with sparse interactions. We study the performance of proposed model and baselines when it comes to different sparsity level. Speciﬁcally, we divide users into several groups according to the number of purchase behaviour, and then evaluate models in different groups. We make sure each group has enough users or items to make the results stable. For each group, we report the averaged values of recommendation performance. We present the Recall and NDCG metrics of both Beidian dataset and Beibei dataset in Figure 4 and Figure 5. To make it clear, we only show the two most competitive baselines, Diffnet and NGCF-BG. As we can observe from the ﬁgures, our SHGCN achieve better performance in all four groups with different sparsity levels. This demonstrates the effectiveness of our model in alleviating the data-sparsity issue. In short, our model show promising recommendation performance when faced with the data sparsity issue. Fig. 4: Recommendation performance for users with different number of interactions on the Beidian dataset D. Hyper-parameter Study (RQ3) Selecting proper hyper-parameters is always one of the most challenging issues for almost every deep learning models. Some models are very sensitive to the changes in hyperparameters, which causes unstable model performance or costs a lot effots in tuning hyper-parameters. In our experiment, we carefully search the learning rate and Lnormalization coefﬁcient as mentioned in Section IV-A4. The empirical results show that our model outperforms all the baselines under this setting. Furthermore, the setting of minibatch size varies in {256, 512, 1024, 2048, 4096}. These are three important hyper-parameters of our proposed model. The detailed results with different choices of hyper-parameters are reported in Figure 6 and Figure 7. From the results, we can observe that our SHGCN is not sensitive to the change of hyper-parameters. The ﬂuctuation of NDCG@10 is limited to 1.16% in the Beidian dataset and 2.07% in the Beibei dataset when we vary the Lregularization term. Besides, if we vary the mini-batch size, then the ﬂuctuation of Recall@10 is limited to 1.20% in the Beidian dataset and 1.94% in the Beibei dataset. These results show that our proposed model’s performance is not sensitive to the setting of hyper-parameters. This promises its high practical application values in industrial scenarios. In short, our proposed model is robust to the change of hyper-parameters and effort-saving in tuning hyperparameters. We present the related works from two aspects: social recommendation and graph/hypergraph-based recommendation. erally deﬁned as leveraging social-relational data to enhance recommendation systems. Since the user may have closer preferences with friends compared with strangers, socialrelation data can help better capture users’ preferences, which bringing better recommendation performance. Existing works on social recommendation can be divided into two categories, social regularization and social smoothing. Social regularization methods try to set constraints to friends’ embedding distances. Some works design regularization terms in the objective function [1]–[3] and some other works adopt multitask learning on the preference learning and social-relation prediction [4], [5]. Actually, these works follow the common assumption of social trust, that friends tend to have similar preferences. Some recent works start to study the more complex social relations in recommendation. Yu et al. [28] proposed that some friends do not share interests and design generative adversarial networks [29] to identifying these unreliable friends. Chen et al. [30] model the different strengths of social relations with attention networks. Although more complex social relations are considered, these works only use scalar weights to distinguish different strengths. Therefore, the modeling of the social trust effect of existing works is still limited. Distinguishing different social relations merely by strengths is not enough to fully capture the social inﬂuence in the real world. Compared with these works, in our work, we study social recommendation from a ﬁne-grained perspective based on the user-item-user triple social relation. Graph-based and Hypergraph-based Recommendation. Recommendation, in general, can be regarded as a kind of linkprediction task on the graph. Besides, the input data of recommendation system can be well organized by a graph structure, and thus graph-based models become the mainstream solution in today’s recommender systems. The early works [31]–[34] apply random-walk based methods and consider the visited nodes as the recommendation results. These works do not learn the latent representation of nodes, resulting in inferior recommendation results. To improve them, some other works [35]–[38] adopt graphembedding methods to learn embedding vectors of users and items in recommendation. The recommendation results are then obtained via embedding matching. Yang et al. [36] proposed to ﬁrst capture user-item high-order connectivity with the graph structure and then introduce a matrix factorization model for recommendation. Chen et al. [37] utilized the neighboring nodes to calculate the similarity between users and items, and the similarity was further used for embedding learning in recommendation. Recently, graph convolutional networks (GCN) [39]–[41] have become the state-of-the-art graph learning models, which can learn high-quality node embeddings. The basis of GCN is conducting embedding propagation between neighbor nodes which can not only leverage the node features but also capture graph structure. Due to their strong representation ability, GCNs are widely applied in recommendation tasks [13], [15], [27], [42]–[44]. Ying et al. [15] applied GCN to pin-board graph in Pinterest with neighboring sampling for recommendation. Berg et al. [42] proposed GCN-based model for rating-prediction recommendation. Wang et al. [13] proposed the GCN model for the general recommendation tasks. Besides collaborative ﬁltering, GCNs also achieved great success in other recommendatoin tasks, such as session-based recommendation [44], bundle recommendation [45], knowledge-aware recommendation [27], social recommendation [6], etc. Recently, hypergraph representation learning has been developing rapidly and has been applied to recommender systems. By generalizing the concept of edge to hyperedge, hypergraph can help resolve more complex relations compared with traditional graphs. Van textitet al. [46] proposed a user-based collaborative ﬁltering method for item recommendation incorporating information from social networks with hypergraph, which calculates the similarity of users with the hypergraph embedding. To smooth the latent factors in Low-rank matrix completion, Rao et al. [47] ﬁltered the latent factors with hypergraph regularized terms. Yu et al. [48] proposed a spectral clustering-enhanced pairwise ranking method (SPLR) with the Laplacian matrix of the hypergraphs of users and items. Ji et al. [49] proposed dual-channel hypergraph collaborative ﬁltering(DHCF) to explicitly model the high-order correlations among users and items with a hypergraph. In this work, we ﬁrst construct the hypergraph representing triplet social relations as hyperedges and then propose a hypergraph convolutional network-based model. The model can learn the inhomogeneous social inﬂuence from the triple social relations via embedding propagation and aggregation. In this paper, we approach the problem of inhomogeneous social recommendation, which studies the ﬁne-grained social inﬂuence between friends. We propose to construct a hypergraph that can well represent both the triple social relations and user-item interaction data. We develop an effective hypergraph convolutional network model that effectively learns from the hypergraph. Extensive experimental results on two real-world datasets demonstrate the effectiveness of our model. Further studies conﬁrm that our model can help alleviate the datasparsity issue signiﬁcantly. We also show that our model’s recommendation performance is not sensitive to hyper-parameter settings. For future work, we ﬁrst plan to test our model’s performance in more scenarios, such as group-buying in social networks, where more than two friends share one item. Leveraging more auxiliary data, such as multi-relational information or explicit ratings of these complex interactions, is right on the drawing board to examine the effectiveness of our model on other tasks such as relation prediction or classiﬁcation. We are also planning to take temporal information into consideration further to enhance the recommendation performance in more complicated applications. This work is supported in part by National Natural Science Foundation of China (No. 62102420 and No.61832017), Beijing Outstanding Young Scientist Program NO. BJJWZYJH012019100020098, Intelligent Social Governance Interdisciplinary Platform, Major Innovation & Planning Interdisciplinary Platform for the “DoubleFirst Class” Initiative, Renmin University of China.