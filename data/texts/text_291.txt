Key Laboratory of Aerospace Information Security and Trusted Computing, Ministry of Education, School of Cyber Recently, micro-video sharing platforms such as Kuaishou and Tiktok have become a major source of information for people’s lives. Thanks to the large trac volume, short video lifespan and streaming fashion of these services, it has become more and more pressing to improve the existing recommender systems to accommodate these challenges in a cost-eective way. In this paper, we propose a novel concept-aware denoising graph neural network (named Conde) for micro-video recommendation. Conde consists of a three-phase graph convolution process to derive user and micro-video representations: warm-up propagation, graph denoising and preference renement. A heterogeneous tripartite graph is constructed by connecting user nodes with video nodes, and video nodes with associated concept nodes, extracted from captions and comments of the videos. To address the noisy information in the graph, we introduce a user-oriented graph denoising phase to extract a subgraph which can better reect the user’s preference. Despite the main focus of micro-video recommendation in this paper, we also show that our method can be generalized to other types of tasks. Therefore, we also conduct empirical studies on a well-known public E-commerce dataset. The experimental results suggest that the proposed Conde achieves signicantly better recommendation performance than the existing state-of-the-art solutions. • Information systems → Recommender systems. Micro-video Recommendation, Graph Neural Network, Graph Denoising ACM Reference Format: Yiyu Liu, Qian Liu, Yu Tian, Changping Wang, Yanan Niu, Yang Song, Chenliang Li. 2021. Concept-Aware Denoising Graph Neural Network for Micro-Video Recommendation. In Proceedings of the 30th ACM International Conference on Information and Knowledge Management (CIKM ’21), November 1–5, 2021, Virtual Event, QLD, Australia. ACM, New York, NY, USA, 10 pages. https://doi.org/10.1145/3459637.3482417 Information overload has become an increasingly crucial challenge for today’s world. In the past few years, micro-video sharing platforms like Kuaishou have harnessed a huge user base on a global scale. Users on these platforms can share micro-videos ranging from a few seconds to minutes with their friends and the public. Due to the signicant cognitive load reduction empowered by visual communication, micro-videos have become the new time killer. As of early 2020, there are more than 300M daily active users (DAUs) and over 20B videos on the Kuaishou platform. Faced with a massive upsurge of micro-video data trac, the key techniques to alleviate the information overload problem is recommender systems, which aim to precisely rank items in terms of the user’s preference. A myriad of recommendation algorithms have been proposed in the past, including sequential based recommendation [17,18], graph-based recommendation [16,34] and a range of CTR prediction models that are practical in industrial settings [7, 9, 22, 23, 33, 36]. Nevertheless, the following three unique characteristics in microvideo sharing platforms impede the existing recommendation techniques to deliver good performance: C1:The existing multi-modal models that extract visual content are infeasible for micro-video sharing platforms due to the continuous and large trac volume nature of the latter. On the other hand, exploiting the rich story expressed in a micro-video will help understand the user’s preference to its maximum. C2:Although micro-video platforms provide users with "like" and "comment" buttons to interact with the video, the vast majority of user actions are still just swiping up to the next video, leaving very sparse user feedback. Without an explicit user interaction, it is hard to tell whether the user really likes what she/he watches. Although we can utilize watching time to speculate the user’s preference (i.e., analogous to click behavior), there would still be many false positives which hinder the eective preference learning for recommendation. C3:The average lifecycle of a micro-video is extremely short. In our data analysis over user behaviors from a large scale micro-video Figure 1: A snapshot of the popular micro-video platform kuaishou and its international version Kwai. The text information within a micro-video contains rich semantics, which can be extracted as millions of concepts in our work. sharing platform, it is observed that the number of user interactions over a micro-video reduces sharply just two days later after its announcement. Moreover, most of the user behaviors fall on the micro-videos uploaded by a few Internet celebrities. Specically, the micro-videos that have less than 10 user clicks comprise about 85% in our dataset. This number goes up to 96% when we use 50 as the cuto threshold. These long-tail ones are rarely recommended. The feedback loop underlying the recommender system further aggravates this recommendation bias, which is called "Matthew Eect" [3]. All these characteristics together give rise to sparser user interactions and poor performance for micro-video recommendation, especially for long-tail ones. To this end, in this paper, we propose a novelconcept-awaredenoising graph neural network (named Conde) to address the above challenges. In Conde, we aim to build a marriage between textual information and graph neural network to support video content extraction and user preference learning. As illustrated in Figure 1, the caption and comments associated with a micro-video serve as a good proxy for the video content. Hence, to account for the rich semantics in a micro-video, we resort to extracting concepts mentioned in the captions and the comments of micro-videos. Here, the concepts are dened as the named entities and semantic key phrases (e.g., “heartwarming”, “classic HK movie”). By connecting the micro-videos to the associated concepts and users to their consumed micro-videos, we can form a tripartite heterogeneous graph, in which the concepts work as a backbone with rich semantic information. It is intuitive that not all concepts of a micro-video can reect all dierent users’ preferences equally. Moreover, as aforementioned, there would be many false positives for user-video edges in the graph. Hence, we further introduce a personalized denoising procedure for each user when we derive her/his representation via graph convolution. Specically, Conde utilizes a three-phase graph convolution process to derive user and item representations. In the warm-up propagation phase, we rstly apply convolution by propagating semantic concept information to the related micro-videos and users through the aggregation order: concept→micro-video →user. Afterwards, we further perform another layer of convolution over the user-video edges to exploit the collaborative signals. With the user and item representations calculated by the warm-up phase, graph denoising phase aims to extract a subgraph for a given user where the noisy micro-videos, concepts and other users in the neighborhood are removed in a breadth-rst search fashion. It is expected that the resultant subgraph could reect the user’s preference more precisely. At last, in preference renement phase, we again perform the same convolution as in the warm-up phase over the subgraph to derive the user representation. The extensive experiments over a large scale internal microvideo dataset and a traditional E-Commerce dataset in dierent languages demonstrate that the proposed Conde achieves signicantly superior recommendation performance to the existing state-of-theart technical alternatives. In summary, the main contributions of this paper are as follows: •We fully exploit textual information to support video content extraction. The rich semantics in micro-videos demonstrate great potential in representing the user’s preference. •We propose a denoising phase for graph neural networks to help recommendation systems, especially those in a streaming fashion, get rid of noisy information and catch user’s highly dynamic preference more precisely. •To the best of our knowledge, this is the rst attempt in recommendation systems to study the heterogeneous graph neural network with a denoising purpose. Since our work is related to micro-video recommendation, graphbased recommendation and denoising for graph and recommendation, we therefore mainly focus on reviewing existing methods in these three lines. Dierent from item purchase in E-Commerce sites, micro-videos contain much more storylines. To enable better semantic learning for micro-videos, MMGCN [32] incorporates multi-modal information into a collaborative ltering framework. It captures modalspecic user preferences by separately constructing a user-item bipartite graph for each modality. ALPINE [11] also designs a graphbased sequential network for recommendation tasks, which can better model a user’s diverse and dynamic interest. THACIL [2] proposes a hierarchical attention mechanism for modeling both short-term and long-term behaviors. Though encouraging performance is achieved by these eorts, they all require visual feature extraction. However, this heavy treatment could be too expensive to be adopted for a real-world application. Recent years have witnessed the superior performance of graph neural networks in many elds that require network embedding and structure modeling. In practice, GNN methods have more expressive capacity than traditional feature-based methods. The key idea of GNN is to recursively aggregate information from local neighborhoods. Graph Convolution Networks [10] is the rst work that introduces the convolution operation over a network structure, which gathers the information from source nodes’ one-hop neighbors via the neighborhood aggregation, and achieves message passing by stacking multiple GCN layers. Graph Attention Network (GAT) [27] introduces the attention mechanism into GNNs, which enables the model to learn the importance of dierent neighbors during the information aggregation. These solutions are mainly devised for homogeneous graphs where all nodes or edges are of the same type. To deal with heterogeneous graph that contains dierent types of nodes and edges, HAN [31] extends the original GAT model with a semantic attention layer to learn the importance of dierent meta-paths. The major idea underlying these works has been widely adopted for dierent kinds of recommendation tasks. Specically, a heterogeneous graph is generally built by considering users, items and relevant entities (e.g., side information) in a knowledge graph as nodes, and users’ behaviors like click, purchase, add-to-cart and other semantic relations as edges. Based on the real recommendation scenario, [1,4,5,35] extend the recommendation framework as a heterogeneous graph modeling mainly by aggregating the neighborhood information via meta-paths. GraphSAGE[6] extends the standard graph convolution network to the inductive setting, and utilize batch training and neighborhood sampling to support recommendation on large-scale graphs. AGNN [19] designs an attribute graph based on user-item interactions and utilizes VAE to learn the distribution of attributes for cold-start users/items. PinSAGE [34] combines random walks and graph convolution layers to aggregate and propagate neighborhood information. MG-BERT [12] utilizes the transformer architecture on the item homogeneous graph to pretrain the item representation, including graph structure reconstruction and masked node feature reconstruction. With rich semantic information in a knowledge graph, many eorts are devoted to explore auxiliary connections between users and items, therefore making recommendations more accurate and explainable. RippleNet [28] is a path-based method that rst assigns entities in the KG with initial embeddings and then samples ripple sets from the KG based on the user’s historically clicking items. It uses attention networks to simulate user preferences on sampled ripple sets to represent a user. Some of its extensions [21,24,30] focus on using the embedding propagation mechanism on the item Knowledge Graph. DKN [29] is another representative work that incorporates knowledge graph representation into news recommendations. Performing data denoising in a task-dependent fashion is a promising strategy to alleviate the adverse impact of noisy information. For example, kicking out task-irrelevant edges have been validated to enhance the performance of node classication [13,37]. Very recently, [20] chose to remove the irrelevant historical records for better sequential recommendation. [26] perform knowledge pruning iteratively by removing irrelevant triples covered by the knowledge graph for better news recommendation. In this section, we present a concept-aware denoising graph neural network for micro-video recommendation. Specically, the proposed Conde aims to derive the representations for users and microvideos by propagating the conceptual semantics to both relevant users and micro-videos. Illustrated in Figure 2, Conde consists of three phases: warm-up propagation, graph denoising and preference renement. In the following, we describe each phase following their usage order in Conde. Figure 2: The tripartite heterogeneous graph which is composed of three disjoint vertex sets: users, items, and concepts, such that no two graph vertices within the same set are adjacent. Firstly, after concept extraction for micro-videos, we form a tripartite heterogeneous graphG = (V, E), whereVandEare the node set and the edge set respectively. A node𝑜 ∈ Vcould be a user𝑢, a micro-video𝑚or a concept𝑐. Moreover, there are two kinds of edges inE, which connect a user with a micro-video when the user clicks the latter, and a micro-video with a concept when the concept is extracted from the micro-video. Figure 2 illustrates an example of this tripartite heterogeneous graph. Since we plan to inject the conceptual information into the user and item representations, at the beginning, we perform a series of graph convolution operations in terms of concepts in V. Specically, given a micro-video𝑚with a set of concept neighborsC, the hidden feature vectorhof micro-video𝑚can be derived by aggregating the embeddings of its concept neighbors: h= 𝐴𝐺𝐺 (e, {e, ∀𝑐 ∈ C}), wheree, eare the embedding vector for micro-video𝑚and its concept neighbor𝑐respectively. Given the simplicity and eectiveness, we choose graph attention network[27] to instantiate 𝐴𝐺𝐺 (·) function as follows: where𝛼is the attention weight indicating the importance of concept𝑐,𝜎is the LeakyReLU activation and∥is the vector concatenation operation. It is expected thathcould encode semantic information regarding the content of micro-video 𝑚. Following similar operation, we then derive the hidden preference vectorhof user𝑢by using micro-video neighborsMof the latter:h= 𝐴𝐺𝐺 (e, {h, ∀𝑗 ∈ M}), whereeis the embedding vector of user𝑢, andhis the hidden feature vector of micro-video neighbor𝑗derived in Equation 1. It is clear now that we propagate the semantic information rst from concepts to micro-videos, and then from micro-videos to users. So far, the whole propagation process is purely concept driven. Note that not all micro-videos are well expressed by their concept neighbors. Plus, the collaborative signals are not exploited during this process. Hence, we then apply another convolution operation for micro-videos by aggregating their user neighbors back. Specically, the hidden feature vectorhof micro-video𝑚is updated with its user neighbor setU:h= 𝐴𝐺𝐺 (h, {h, ∀𝑢 ∈ U}). In this sense, we can propagate the conceptual semantics across the uservideo bipartite part further, enriching the feature representation of micro-videos, especially the long-tail ones. It is intuitive that dierent users would be interested in dierent aspects of the micro-video content. Plus, there are inevitably some noisy concepts and false clicks to distract the eective representation learning for users. Although we have an attention mechanism in Equation 2, the irrelevant and noisy information still complicates the learning process. Here, we introduce a user-oriented denoising process to lter the micro-videos and the concepts in a breadth-rst search fashion. Specically, we adopt a gated recurrent unit (GRU) as the compositer to rstly identify the relevance between user𝑢and each of her micro-video neighbors as follows: wherehworks as the initial state of GRU, andfencodes the relevant information. Then, we perform the neighbor denoising as a sampling without replacement to retain only𝑛micro-video neighbors:M= 𝐷𝑒𝑛({f, ∀𝑚 ∈ M})and|M| = 𝑛. These𝑛 micro-videos are expected to convey the user’s preference more precisely. In detail, we can utilize a fully-connected layer with a softmax function to derive the likelihood of retaining each microvideo neighbor 𝑚 as follows: wherewis the parameter vector for graph denoising. Note that instead of attention mechanism, the denoising process produces discrete selections, which are not dierentiable for model learning. Hence, we choose Gumbel-Softmax[8] to instantiate𝐷𝑒𝑛(·)for dierentiable discrete sample generation: where𝜖= − log(− log(𝑥))and𝑥is i.i.d sampled from Uniform(0,1). The temperature parameter𝜏controls sharpness of the likelihood distribution. When𝜏is small, Equation 5 produces a multi-modal distribution. On the contrary, when𝜏is large, the resultant distribution is nearly equivalent to a uniform one. Afterwards, we continue the above denoising process for the user’s two-hop neighbors via each micro-video𝑚inM. Note that we only consider the concept of neighbors of𝑚:N= C. We have tried mixing user and concept neighbors in this second phase, which turns out to be inferior to using concept nodes only. We speculate that putting dierent types of nodes in GRU simultaneously could complicate the model learning, since heterogeneous information is dicult to be fused together. Then, we still utilize the same compositer in the rst-hop denoising to calculate the relevance information: wherehis the representation of two-hop neighbor𝑣. Here, the concept embeddingeis used (i.e.,h= e). Also, when we consider the neighboring users together, when𝑣is user𝑢, the hidden preference vectorhis used instead (i.e.,h= h). Then, we apply the similar denoising process forNand obtain𝑛two-hop neighbors for user𝑢via micro-video𝑚:N= 𝐷𝑒𝑛({f, ∀𝑖 ∈ N})and |N| = 𝑛. We can see that the whole denoising process is performed sequentially by starting with each user. Since the GRU-based compositor is initialized with the user preference vector of the warm-up phase, the user’s neighborhood inGis reshaped to express the user’s preference more precisely in a subgraphG, where the nodes are {𝑢, M, N, ∀𝑚 ∈ M}, and the corresponding edges between them in G are remained. Now, it is straightforward to rene the hidden preference representation for each user based on the correspondingG. Specically, for each micro-video𝑚inM, we rstly rene the hidden feature vectorhfor𝑚:h= 𝐴𝐺𝐺 (e, {h, ∀𝑣 ∈ N}). Here, as toh, we adopt the same setting as in Equation 6. Then, we rene the hidden preference vectorh:h= 𝐴𝐺𝐺 (e, {h, ∀𝑚 ∈ M}). At last, the ranking score for a micro-video𝑚w.r.t. user𝑢is calculated as follows: wherehis the hidden feature vector derived in the warm-up phase for micro-video 𝑚. Besides the embedding vectors and parameters for graph convolution, the key of Conde is to perform graph denoising in a personalized way to enhance the user preference learning. Following the work in [37], for each user𝑢, we can generate𝑘subgraphs {G, . . . , G}by repeating the denoising process𝑘times. After that, we calculate the cross-entropy loss with each subgraphG as follows: L= 𝑦log(ˆ𝑦) + (1 − 𝑦) log(1 −ˆ𝑦 where𝑦is the ground truth of micro-video𝑚clicked by user𝑢, ˆ𝑦is the corresponding ranking score calculated with subgraph G. Finally, the total loss function is as follows: where∥Θ∥represents𝐿2 regularization over model parameters and 𝜆 is the corresponding coecient. Discussion.After model training, we follow the order of warmup→graph denoising→preference renement for each user and generate the corresponding subgraphGand user preference vectorh. We then maintain these preference vectors in memory for online service. There is no need to re-run the graph denoising and preference renement each time, since we believe that the learnt model is eective in capturing the user’s preference. The marginal change in the subgraph structure would introduce ignorable variations. Actually, all micro-video hidden feature vectors could be reused in the warm-up propagation phase for each user, by calculating hbeforehand. We evaluate our proposed Conde on two real-world datasets, hoping to answer the following three research questions:RQ1How does Conde perform compared with state-of-the-art graph-based methods?RQ2How do dierent components aect Conde’s performance?RQ3Can Conde provide reasonable explanations about user preferences towards items? In what follows, we rst present the experimental settings in detail, (i.e., the datasets, baselines, evaluation protocols, and the parameter settings), then compare our model’s performance with state-of-the-art methods, followed by answering the above three questions. Micro-Videodataset is collected from a popular large scale Chinese micro-video sharing platform. It serves to record and share videos taken by a user and matches content to targeted consumers with the help of a recommender system. The recommendation model serves in a streaming setting, where users can swipe up on the touch screen to watch the next video one by one. To be as consistent as possible with the real-world online training setting, we construct a dataset by randomly sampling 100𝐾users and their watched micro-videos over a period of two days. After ltering the users and micro-videos with no click behavior, the dataset consists of 82,193 users and 784,863 clicked micro-videos, which is referred to as Micro-Video dataset in the rest of this paper. The user behaviors in rst-day are used for training. We then shue and split the second-day’s data equally for validation and testing respectively. Amazon Electronics[15] is a widely used benchmark whose task is to predict whether a user will write a review for a target item given her historical reviews (in English). Initially we wanted to nd a public micro-video recommendation dataset in English but failed. So we have to turn to data from other elds. Surprisingly, Conde works out quite well on other types of tasks and thus proving its robustness. Here, we select the rst 70% of historical interactions as the training set. The last 10% interactions are used as the testing set. The remaining 20% is used as the validation set for hyper-parameter selection. We refer to this benchmark as the Amazon dataset. As for the Micro-Video dataset, we build a concept inventory by merging several proprietary knowledge bases and internal video tagging systems. Specically, the resultant concept inventory contains about 2.32M named entities and semantic key phrases, covering a wide spectrum of topics in Micro-Video. The average length of a concept is 4. The concepts are extracted from textual information of a micro-video including comment, caption and hashtag by performing a longest match. As the user generated content contains a lot of Internet buzzwords and slangs, we lter the corpus rst by removing stop words, punctuation and emoji. After concept extraction, we calculate the TF-IDF score for each concept and micro-video pair, and retain the informative ones with a threshold ltering. In total, we obtained 415,796 unique concepts. For the Amazon dataset, we utilize the TextBlob toolkitto extract the noun phrases as the concepts from the reviews written for each item. Similarly, a TF-IDF weighting scheme is adopted to lter noisy concepts. The detailed statistics of the two datasets are reported in Table 1. • GraphSage[6] is a state-of-the-art method of GCN that aggregates neighborhood information into center nodes. In particular, it considers the structure information as well as the distribution of node features in the neighborhood. For a fair comparison, we form two homogeneous graphs based on user-item interaction. • PinSage[34] is designed to employ GraphSAGE on useritem graph, which performs ecient, localized convolutions by sampling the neighborhood around a node and dynamically constructing a computation graph. In this work, we employ two graph convolution layers as suggested in the user-item interaction graph. • GAT[27] introduces a multi-head attention between each node and its neighbors to calculate aggregate coecients. • HAN[31] is a heterogeneous graph neural network with attention mechanism based on GAT, which deals with heterogeneous nodes via dierent meta paths to aggregate neighborhood information. We modify the model for topN recommendation. In detail, we make use of four types of meta-paths: user-item-user, user-item-concept-item-user, item-concept-item, and item-user-item. Therefore we construct four homogeneous graphs from the original graph for model learning. • NIA-GCN [25] models the interactions between neighbors with element-wise products by a bi-linear neighborhood aggregator. The Euclidean distance between users and items with their positive neighbors are added in loss function. The experimental setting is the same as the original NIA-GCN paper. This is the uptodate state-of-the-art solution in the paradigm of GNN. For those network embedding models (i.e., GraphSage, GAT and HAN), we also utilize Equation 7 to calculate the ranking score for a fair comparison. With the extracted concepts, a heterogeneous concept-aware graph is built by connecting the items to the associated concepts and users to their consumed items. Recall that we aim to propagate semantic concept information via graph convolution to represent users and micro-videos for preference learning. In the warm-up propagation phase, we derive coarse-level representations for micro-videos and users following the aggregation order of concept→micro-video→ user. Note that the concept-aware graph is not perfect but contains lots of noisy information. . At last, we again perform the same convolution as in the warm-up propagation phase over the subgraph to rene the user representation for recommendation. Evaluation Metrics.For performance evaluation metrics, we choose AUC (Area Under Curve), HIT@5, NDCG@5, MAP@5 which are widely adopted in many related works [20,26]. Note that we use UAUC here, which means AUC score for each user, and we calculate the mean of all users’ AUC scores as the nal result. Meanwhile, We treat all unobserved interactions as the negative instances when reporting performance. It is worthwhile to mention that the positive and negative instances are highly imbalanced. As for model training, the ratio of true and negative samples in real production scenarios is approximate to 1:1. Hence, we also choose the same number of unobserved items for each user in evaluation. Hyperparameter Settings.Following PinSage [34], we perform mini-batch training and edge sampling for better training eciency. According to the average number of concepts that an item contains, we randomly sample a subgraph for training by randomly picking𝑝 neighbors in every epoch. We set𝑝 =40 for the Micro-Video dataset and𝑝 =100 for the Amazon dataset after grid search. The proposed Conde will select a xed number of neighbors out of this subgraph Table 2: Performance comparison between methods on the Micro-Video and Amazon dataset. The * indicates the best p erformance of the baselines. The best results are highlighted in boldface. (i.e.,𝑛 < 𝑝). For fair comparison, after grid search, we x the embedding size and all hidden sizes to be 128 and 50 for the Micro-Video and the Amazon dataset respectively across dierent methods in comparison. As for Conde, we rstly apply Word2Vec [14] to pretrain the word embeddings over the textual information of items in the Micro-Video dataset. Here, the textual information associated with a micro-video is merged as a single document. For the Amazon dataset, we use pre-trained GloVe word embeddings. The concept embeddings are xed as the averaged embedding of their constituent words, and are not further ne-tuned during the model training. Recall that the temperature parameter𝜏in Equation 5 could aect the sample probabilities signicantly. The higher the temperature, the smoother the sampling probability is. Starting from a higher temperature, the model can gather information from more neighbors in the rst few minibatches. In our experiments, the temperature starts at a high value and gradually anneal to a small one as follows: where𝜏is the initial temperature to start with,𝜂is the hyperparameter, and𝑥is the number of minibatches. We set𝜏to be 10, and𝜂to be 0.0002 and 0.001 for the Micro-Video and the Amazon dataset respectively. Table 2 reports the overall performance compared with baselines. For each model, we run ve times and report the average results. From the results, we make the following observations. •Conde consistently yields the best performance on all datasets. This result demonstrates the superiority of our conceptaware denoising framework for recommendation. •It is no surprise that methods based on a bipartite graph like PinSage [34] and NIA-GCN [25] consistently yields poor performance on all evaluations, which indicates that learning user and item representations simply on a bipartite graph is not adequate. •The results of GraphSage [6] show that homogeneous graphs with directly connected items and users can not make up for the negative impact of noisy information. Attention mechanism contributes a lot to GAT [27] performance improvement and HAN [31] are more powerful in information utilization and aggregation with item-concept connection when constructing item-item, user-user graph homogeneous graph. •However, according to our experiments, none of them ever achieves the best result, which veries the advantages of the denoising optimization process of our proposed model. Long-Tail Performance.As to Micro-Video dataset, we divide the entire item space into hot and long-tail items by click frequency. We set 50 as a threshold and nd that long-tail items take up a percentage of 96.0% in the entire item space. However, the majority of user-item interactions in the test set are dominated by hot items, leaving only 34.48% records for long-tail ones to share. We split the test set into two parts according to click frequency=50 and do the experiments on them separately. From Table 3 we can observe that the performance of each model for hot items is always much higher than that of long-tail items, which indicates the distributions of hot and long-tail items are inconsistent. What’s more, the improvements of Conde over the baselines are remarkable. Therefore we can draw a conclusion that Conde shows its strong robustness on both hot and long-tail items, and proves its ability to learn better features in the entire space for dierent datasets and applications. Table 3: Performance comparison between the methods with Conde and other baselines on Micro-Video dataset. “Hot” represents hot items in the test set, “Long-tail” represents long-tail items in the test set. Ablation Study.We conduct ablation studies on the Micro-Video dataset for each proposed component to justify its eectiveness. For each setting, we run 5 times and report the average results. Note that our graph is tripartite, which is composed of three disjoint vertex sets: users, items, and concepts, such that no two graph vertices within the same set are adjacent. Therefore we perform the denoising algorithm in a two-phase strategy. Starting from a user, GRU rst picks some candidate micro-videos out of its neighbors in the rst phase. Then for every remaining micro-video, the same GRU picks some candidate concepts out of its neighbors in the second phase. The whole process can be split into two phases, hence we can do some ablation studies as follows: For better comparison, we split the denoising process into two phases and remove either phase with a random module, which randomly selects some micro-videos instead of denoising, to check if denoising operation really makes some dierence. Table 4: Ablation study on the Micro-Video dataset. From the results shown in Table 4, we make the following observations: 1) Cut out either denoising phase is detrimental to the nal result. 2) The second phase of denoising plays a more important role. 3) The best performance appears when two phases work together, indicating that two phases should work together to enhance representation learning. This is reasonable since the user’s representation is rened in terms of the relevant micro-videos whose representations are also dependent on the relevant concepts. This pipeline convolution nature for user representation learning requires us to denoising the irrelevant information in each step. Number of Remaining Neighbors.Given the graph to denoise, we choose a xed number of nodes for information aggregation. To concentrate on crucial points, we mainly discuss the concept denoising in this paper. Note that we have also tested a dierent number of one-hop neighbors for each user, where we decide to pick 6 micro-videos for every user out of her 10 neighbors. Here, we test the number of remaining concepts amongst{6,10,20,30} out of 40. The number of subgraphs is xed to be four in this case. From Table 5 we can draw a conclusion that if we leave too many neighbors, noisy information will still exist and harm the model training. Yet if we leave too few neighbors, the model is likely to be over-denoised and miss much important information. In general, this parameter is not very sensitive for model performance. We could suggest using a relatively small value to enhance computation eciency. Number of SubgraphsApparently, the number of subgraphs is also an important parameter to Conde. Similarly, we test the number of subgraphs amongst{2,4,6}, and Table 6 indicates that adding the number of subgraphs improves the performance further. However the improvement of evaluation metrics can not keep the same Table 5: Performance over dierent 𝑘 values. Remaining NeighborsMicro-Video pace with the resultant increasing training time. As the training cost is proportional to the number of subgraphs and the model can not obtain further remarkable performance gain by adding more subgraphs, we use 𝑘 = 4 in this paper. Table 6: Performance over dierent 𝐺 values. Impact of Dierent Temperatures.We also test Conde’s sensitivity to dierent temperatures. Specically speaking, we set different starting temperatures and annealing ratios, and the model performs best when 𝜏 = 10 and 𝜂 = 2𝑒 − 4 on Micro-Video dataset as shown in Table 7. Table 7: Performance over dierent temperature settings. We further investigate whether Conde can lter out noise and retain more meaningful information. To better visualize the results, we pick some users and their corresponding tripartite subgraphs, with items and concepts connected to each other. As ID is not explicit to describe an item, we use each micro-video’s concept neighbors instead, to facilitate better understanding of its content. In order to demonstrate the explainability of Conde, we rst choose two user pairs, each of which share at least one same relevant item after performing denoising, according to Conde’s result. As demonstrated in Figure 4, the concepts of the item are split out by orange and blue lines are the relevant ones after 2-phase denoising for the two users respectively. Here we use the Micro-Video dataset and translate every concept in English for easy understanding. We can observe that although two users have the same relevant item, they focus on dierent points of interest. Figure 4 further indicates that a micro-video itself can include various points of interest. What’s more, we nd another pair of users who interacted with the same item, and this item is deleted for one user but kept for the other by Conde. We compare the related item and all remaining concepts of these two users in Figure 5. The result shows that there is an obvious divergence between their preferences. Overall, these results suggest that Conde is able to discover informative yet relevant concepts out of noisy ones, besides enhancing the recommendation performance, but also support recommendation explainability. In this paper, we propose a novelconcept-awaredenoising graph neural network (named Conde) to address information redundancy challenges. To make full use of the textual information in microvideo recommendation scenarios, we extract concepts from captions and the comments associated with micro-videos. In this way, we can form a tripartite heterogeneous graph by connecting user, microvideo, and concept nodes. As a user will interact with hundreds of micro-videos and a micro-videos will receive lots of comments everyday, neither all micro-videos nor all concepts of a micro-video can reect users’ preference precisely. Hence, we propose a personalized denoising methodology to derive user and item representations via graph neural network. The extensive experiments over a large micro-video dataset and a traditional E-Commerce dataset in two dierent languages demonstrate the eectiveness of Conde. By abundant ablation studies with dierent experiment settings, the proposed Conde has proven its excellent potential to reect the user’s preference. This work was funded by Kuaishou and National Natural Science Foundation of China (No. 61872278). Chenliang Li is the corresponding author.