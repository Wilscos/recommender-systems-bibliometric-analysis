include such actions as additions, modiﬁcations and deletions of functional or non-functional requirements [1]. Such RCs naturally impact the cost, quality, and schedule of the project [2]. Hence, they are crucial to understand during software development. In traditional software development contexts, introducing an RC can be considered an intervention – sometimes unexpected – during the software development process. In agile contexts, requirements are welcomed “even late in development” [3]. Either way, an RC acts as a stimulus in the development environment with the potential to elicit responses from the practitioners handling the RC. Humans respond to stimuli in various ways. One such way is through emotions. Emotions are deﬁned as “a sequence of interrelated, synchronised changes in the states of all the ﬁve organismic subsystems (information processing, support, executive, action, and monitoring) in response to the evaluation of an external or internal stimulus event as relevant to central concerns of the organism” [4], for example excitement, satisfaction, anxiety, and fatigue [5], and reaction to a given stimulus through emotions is called emotional response [6]. Emotions act as behavioural motivators [7], and have direct linkages to cognition [3], productivity [7], [8], [9], and decision-making [10]. Research on understanding emotions of developers during software development contexts is gaining momentum. Several studies have focused on emotions and productivity of individuals in the software development teams [11], [12], [13], [14], [15], [16]. However, only a few studies have focused on emotions of software development teams during requirements engineering (RE) [7], [17]. Through an interview-based preliminary study, we found that software development teams show emotional responses to RCs at stages of receiving, developing, and delivering the RC [18]. This preliminary study motivated us to conduct a more in-depth study on how emotions vary over the RC handling life cycle. Consider a software development team working “enthusiastically”. Suddenly, the customer decides to change an already implemented requirement. Kash, who is a developer in the team, gets “angry” because of this RC arriving, which distracts from current work, potentially wastes previous efforts, and goes against requests the customer previously made. Kash thinks that the customer does not understand Kash’s job and its demands. At the same time, this RC makes her peers “angry” and even “depressed” about ﬂowon consequences of the new RC. The team disagree about certain things about handling the RC. Kash feels that her manager can not appreciate her team’s emotions. However, she has no other option than working on the RC with her team. Therefore, she starts to implement the requested RC. At the beginning, Kash begins to feel more “energetic” while updating the code, and once she is done with coding, she feels “inspired” by solving the customer’s new challenge. Then Kash decides to test the code, and during delivery she is “excited”, and “inspired”. Once the RC is delivered, Kash is fully “relaxed”. Is the reality for practitioners similar or very different to this imaginary situation? What emotions do practitioners actually experience when responding to different kinds of RCs from different people at different times? Is RC the only stimulus that triggers practitioners’ emotions? How do practitioners and their managers handle problematic emotions, and how do they encourage positive emotions? To gain a more comprehensive understanding of emotional responses to RCs in software teams, our broad question is as follows: To answer this research question, we conducted a worldwide surveywith the participation of 201 software practitioners. We utilised the Job-related Affective Well-being Scale (JAWS) [5] which assesses people’s emotional reactions to their job during the past 30 days and a set of open-ended questions. We used a combined approach using descriptive statistical analysis, JAWS and socio-technical grounded theory (STGT) [19] to analyse the data. In this paper, we use the terms “emotional responses” and “feeling emotions/ respond with emotions/ experiencing emotions” interchangeably. In simple terms, “emotional response” is bringing “emotion” into play. Our analysis resulted in identifying the following key ﬁndings: common emotions felt by practitioners when handling RCs; uli, such as the RC, the individual practitioner, the team, manager and customer, can all lead to the triggering of different emotions; ments changes handling life cycles: We found the phenomenon of emotion dynamics in software team contexts. i.e., the ﬂuctuation of emotional responses across time during the project and the RC handling life cycles; that practitioners’ emotions are triggered at speciﬁc milestones of the project life cycle and stages of the RC handling life cycle; that temporal matters i.e., time related concerns have the capability of regulating the emotional responses of practitioners at project milestones and RC handling stages. The key contributions of this research include: uli. We identiﬁed and categorised a range of emotions and factors likely causing emotional responses to RCs, including when emotion occurs and other Fig. 1: Study Approach (Quan: Quantitative; Qual: Qualitative; JAWS: Job-related Affective Well-being Scale) temporal matters, factors related to the individual, manager, team and customer. ers to follow in RC abundant environments; both carriers of RCs and practitioners who do not act as carriers of RCs to use to decide when to introduce an RC to the team and when to accept an RC, respectively; emerging theory to learn and conduct further research about emotion dynamics in software team contexts. 2.1 Deﬁnitions We use some concepts from Psychology, Grounded Theory, and a few of our own terms throughout this paper. Table 1 presents the deﬁnitions of these terms. The cited deﬁnitions are directly from their sources and not paraphrased. We use the term “individual cognition” instead of the original term “cognition” to avoid the confusions with “social cognition”. Similarly, “team dynamics”, and “team cohesion” are used instead of “group dynamics” and “group cohesion”. 2.2 Approach An overview of our research approach is given in Fig. 1 and described in detail below. The replication package, including the survey questionnaire, demographic and project information of the participants, is available online. 2.2.1 [Step 1]: Emotion Scale Selection We need a way to describe human emotional responses to RCs. We evaluated 20 well-established emotion scales (15 as in [26] and PANAS [27], SPANE [28], JES [29], DEQ [30], JAWS [5]) by comparing their listed emotions and their applicability to use to describe practitioners’ emotional responses to RCs. From our analysis, we found 3 scales – Discrete Emotions Questionnaire (DEQ), Job Emotion Scale (JES), and Job-related Affective Well-being Scale (JAWS) – as suitable candidates. From our own industrial experience, we opted not to use DEQ as we found that some emotions were irrelevant for software development teams (e.g.: “terror” TABLE 2: Job-related Affective Well-being Scale Sub-Scales and “craving”). We had used JES in our previous work [11] which consists of 16 emotions. However, we wanted a comprehensive understanding of emotional responses to RCs. In the end we decided to use JAWS which has been used extensively to assess emotional reactions of people to their jobs over the past 30 days. As our survey questionnaire requested participants to respond by considering the current or most recent project they worked on, we found JAWS likely to be the best emotion scale for our study. JAWS has two forms: one with 30 emotions (long form) and another with 20 emotions (short form). We used the short form which the authors of JAWS claim as the scale that is most commonly used [31]. The 20 emotions in JAWS are categorised into 4 sub-scales along the dimensions: pleasure and arousal (intensity). The sub-scales are namely, High pleasurable-High arousal (High), High pleasurable-Low Arousal (High), Low pleasurable-High Arousal (Low), and Low pleasurable-Low Arousal (Low). We abbreviated the sub-scales as above by making the abbreviation central to the pleasure. i.e., for example, when both pleasure and arousal are high, we abbreviated it as high; otherwise high. The emotions under each sub-scale are given in Table 2. The scale enables the participants to select one of the following ﬁve choices choice per emotion: never, rarely, sometimes, quite often, and extremely often. 2.2.2 [Step 2]: Survey Questionnaire Development After we chose the emotion scale for our study, we developed the survey questionnaire by following Kitchenham et al.s [32], [33], and Punter et al.s [34] guidelines. The survey consisted of 4 sections (demographics information, project information, team information, emotional responses to RCs). 15 closed-ended questions were distributed among these sections, and 4 open-ended questions belonged to the emotional responses to RCs section which was the JAWS scale. The 4 open-ended questions represented each subscale of JAWS. The open-ended questions were customised and prompted for participants based on the answers they gave to the closed-ended question on emotions felt when handling RCs. If the participant chose sometimes, quite often, or extremely often for a particular emotion, the respective open-ended question was shown after answering the closedended question. This is illustrated in Fig. 2, also showing samples of closed-ended and open-ended questions. In the example given in Fig. 2, the choice “quite often” selected for the emotion angry prompted the respective open-ended question. We used Qualtricsas the survey platform and distributed the survey online following Smith et al.s study [35] to improve the survey distribution. We did not collect Fig. 2: Prompting of Open-ended Questions based on Answers Given to the JAWS based Close-ended Question (the selected choice shown here is for illustration purpose only, the data is not real) any personal information from participants, except from the participants who voluntarily provided their details for future interviews. 2.2.3 [Step 3]: Data Collection Once the survey questionnaire was ﬁnalised, we sent the survey to 2 Ph.D. students who had recent industrial experience. They provided feedback about the survey in terms of time for completion. Before distributing the survey to the software development community, we calculated the sample size (random sampling) required for our study. According to Global Developer Population Report [36], the active developer population by 2019 was 18.9 M. We calculated the sample size required to generalise our ﬁndings to this population of 18.9 M. The sample size resulted in was N=384, by setting the conﬁdence level to 95% (Z-score=1.96), standard deviation to 0.5, and margin of error to 0.05. We distributed the survey by posting its link on social media such as LinkedIn, Twitter, and Facebook. The survey was available to the public for a period of 1 month and 20 days. The number of responses we received for the survey through this approach was limited. As we reached a plateau of 37 responses, we decided to recruit the rest of the participants via Amazon Mechanical Turk (AMT). The principal qualiﬁcation criteria we used at AMT were: (1) Employment Industry – Software and IT Services; and (2) Job Function Information Technology. However, since we recruited the participants iteratively, we added additional criteria to different batches to have a uniform geographical and gender distribution as much as possible (purposive TABLE 3: Demographic Information of Participants (Dev: Developer; AC/SM: Agile Coach/Scrum Master; BA: Business Analyst; Other: ≤ 5 participants; XT: Total Software Development Experience; XTA: Total Agile Experience) sampling). At the point of recruiting participants through AMT, we made a few changes to the survey questionnaire. One such change was making the open-ended questions mandatory. Later this became an advantage to us as we were able to ﬁlter the genuine responses by looking at the answers given to the open-ended questions. 49 responses were found as deceptive since unrelated answers were given to the open-ended questions. We rejected these responses and re-recruited participants until all responses appeared to be legitimate. We initially targeted recruiting the calculated sample of 384 participants. However, as we analysed the quantitative data after each round of data collection, we stopped collecting data when we were able to see clear results. i.e., when the number of responses for each emotion in the emotion scale became steady. Thus, we ended up recruiting only 201 participants. The survey was not limited to collecting qualitative data, but also collected quantitative data. The summary of demographic data of the participants is given in Table 3. The majority of participants represented North America (N=96; 47.78%) and the majority were developers (N=75; 37.31%). The participants had a mean total experience of 7.8 years (min(total experience)=1 year; max(total experience)=35 years). The summary of participants’ most recent/current project is given in Table 4. The answers they gave to the survey questionnaire were based on these projects. The majority of the participants’ projects were new developments (N=115; 57.21%), and the majority used agile methods in their projects (N=176; 87.56%) which is in line with reported agile use in the industry [37]. 2.2.4 [Step 4]: Data Analysis Table 5 summarises how the data collected were analysed using a mixed-methods approach which included a quantitative analysis and a combined qualitative analysis. Our mixed-methods approach included using the same instrument (JAWS) for data collection and analysis, besides openended questions. JAWS served as a tool for collecting the emotional responses of the participants (resulting in KF1) through a close-ended matrix question and to analyse qualitative data (resulting in KF3) in a combined manner along TABLE 4: Information of Current/Most Recent Project of the Participants (XP: Extreme Programming; Other: ≤ 5 participants) TABLE 5: Mixed-methods Approach (DC: Data Collection; DA: Data Analysis; JAWS: Job Affective Well-being Scale; STGT4DA: Socio-Technical Grounded Theory for Data Analysis; DA1: Combined Qualitative Data Analysis Step 1; DA2: Combined Qualitative Data Analysis Step 2) with STGT (resulting in KF2, KF4, KF5). We describe the analysis process in detail below. Quantitative Analysis: The data collected through JAWS were descriptively analysed using Python. This resulted in emotional responses to RCs and Table 7 presents the analysis results. Combined Qualitative Analysis: The collected qualitative data was stored and analysed in MAXQDA. Additionally, Microsoft Excel was used when necessary. Categories of stimuli, emotions, emotion dynamics, distinct events, and temporal matters were identiﬁed from a combined approach of JAWS and STGT for data analysis [19]. We decided to use STGT for data analysis due to its ability to apply the basic data analysis techniques, such as open coding, constant comparison, and memoing, within mixed-methods studies, in a limited capacity (as opposed to full theory development) and its suitability to analyse data in socio-technical research contexts. Our previous experience with applying open coding and constant comparison using the StraussCorbinian GT [24] also helped. The combined qualitative analysis occurred in two steps: Combined Qualitative Data Analysis Step 1 (DA1) and Combined Qualitative Data Analysis Step 2 (DA2), as shown in Fig. 3. The analysis of raw data in DA1 yielded concepts such as project milestones, RC stages, and temporal matters along with their respective triggered emotions, and emerging stimuli that triggered them. Further analysis of emerging stimuli found in DA1, allowed us to group them under RC, practitioner, team, manager, and customer, in DA2. DA1 and DA2 are explained in detail below. DA1 (STGT and JAWS): DA1 consisted of a combination of STGT basic data analysis and JAWS. STGT analysis resulted in identifying project milestones, RC stages, and emerging stimuli and JAWS helped in identifying emotions. STGT data analysis: We followed a micro-analysis (lineby-line) approach in identifying the fragments of data in textual open-ended answers by the participants, since survey responses were 1–3 lines each. These identiﬁed data fragments were then meaningfully labelled (as codes). Through constant comparison, we grouped similar codes to form concepts, and then grouped similar concepts to form subcategories, which are explainable through their characteristics (properties and dimensions). After the sub-category development, we further applied constant comparison to form categories. JAWS data analysis: Since the open-ended questions listed the emotions in JAWS, most participants used the exact terms of emotions as in JAWS (see Fig. 2). When the answers Fig. 3: Combined Qualitative Data Analysis Approach (STGT: Socio-Technical Grounded Theory; JAWS: Jobrelated Affective Well-being Scale) in the open-text did not list any speciﬁc emotion, we considered the participant felt the majority of emotions in the emotion sub-scale of the question. This allowed us to extract the emotions from participants answers to the open-ended questions. The extreme left-hand side of Fig. 4 (block A) shows the extraction of emotions and emerging stimuli at code level from the raw data (block B). Blocks to the right of the raw data show the emergence of the category distinct events in the order of analysis of raw data (block B) → codes (C1) → concepts (C2) → sub-categories (C3) → category (C4). Below, we elaborate this further by taking a single data point from Fig. 4. This data point represents the raw data that consists of (a) the distinct event at granular level, i.e., the code – “start of project, which led to the concept – “project commencement with other similar codes as in Fig. 4, that later resulted in the sub-category – “project milestone and the category – distinct events, (b) emerging stimulus which is at code level – “unstable requirements, and (c) the emotion – “anxious. Raw data: “I was anxious when we ﬁrst started and the requirements were still not settled on” – P54 [Tester] [STGT] Code: Start of project [STGT] Concept: Project commencement [STGT] Sub-category: Project milestone [STGT] Category: Distinct events [STGT] Code (leading to the emergence of “RC as a stimulus” in DA2): Unstable requirements DA2 (STGT): We further analysed the emerging stimuli that we found during DA1. We identiﬁed that these are certain aspects of RC, practitioners, team, manager, and customer. Grouping these together led to the category “stimuli”. During DA2, we also identiﬁed that a set of codes belong to certain well-established principles in Psychology (see Table 1). Therefore, we used those principles to conceptualise, and name the concepts “individual conation”, “individual cognition”, “social cognition”, “team dynamics”, and “emotional intelligence”. In the example below, mapping to these Psychological concepts, we show the further analysis of emerging stimuli that we found during DA1. [STGT] Code (captured during DA1): Practitioner’s sustained attention [STGT] Property [<dimension>]: Self cognitive skill [+] [STGT] Concept: Individual cognition [STGT] Sub-category: Practitioner as a stimulus [STGT] Category: Stimuli Further examples of DA2 which applied STGT for data analysis is given in Table 6. At the end of combined qualitative data analysis: The strongest categories identiﬁed through our combined qualitative data analysis are as below. Categories: Stimuli, Emotions, Emotion dynamics, Distinct events, Temporal matters We present these categories in detail in Section 3. We further found some emerging relationships as expected by the end of the STGT basic analysis, and we share these in Section 5.2 in the form of an emerging theoretical model. We found evidence of emotional responses to RCs, emotion dynamics in project and RC handling life cycles through our analysis. Further, we found the distinct events at which emotions are triggered belong to the project (project milestones) and RC handling life cycle (RC stages). We found some temporal matters which regulate the emotions felt, and the stimuli associated with emotion dynamics and regulation. When both high and low pleasurable emotions are found at a given event, we mention it by the term Mix. In mix cases, we indicate the dominating emotion sub-scale within brackets. That is the sub-scale for which we found the most number of emotions. 3.1 Emotional Responses to Requirements Changes The results from quantitative analysis provides a high level view of the emotional responses to RCs as a whole. We found that all high pleasurable emotions are more commonly felt by the software practitioners than low pleasurable emotions when handling RCs. Among the 10 low pleasurable emotions, only three low pleasurable emotions were found as commonly felt (anger, anxiety, and fatigue) when handling RCs. Table 7 summarises the feeling of particular emotion within their current/most recent project when handling RCs as reported by the participants. We considered a certain emotion was felt commonly if the highest number of responses were found for “sometimes/quite often/extremely often” options. Therefore, as indicated in the table, the participants felt: Highemotions: enthusiastic (34.33% quite often), energetic (32.84% quite often), inspired (30.35% quite often), ecstatic (29.85% sometimes), excited (29.85% sometimes); Highemotions: calm (40.30% quite often), at ease (39.30% sometimes), content (31.34% sometimes), relaxed (33.33% sometimes), satisﬁed (28.36% quite often); Lowemotions: angry (40.80% sometimes), anxious (34.83% sometimes); and Lowemotion: fatigued (34.33% sometimes) when handling RCs. 3.2 Stimuli Triggering Practitioners’ Emotions While RCs act as the central stimulus in our study, through our STGT analysis we found several stimuli across project milestones, RC stages, and temporal matters. By careful observation, we noticed that these are not stand-alone stimuli, but properties of a set of associated stimuli that lead to the triggering of emotions of practitioners. These associated stimuli are stakeholders, including practitioners themselves, their team, their manager, and their customer(s). Central stimulus: RC. The properties of an RC that enable the triggering of emotions include RC stability, its Fig. 4: Combined Qualitative Data Analysis Step 1 Example: Emergence of the Category “Distinct Events”; Capturing of Emotions, and Stimuli (St: Stimulus), using JAWS (Block A) and STGT for Data Analysis (right-hand side of Block B) TABLE 6: Combined Qualitative Data Analysis Step 2 Example (Emergence of Sub-Category: “Practitioner as a Stimulus” from Stimuli found during Data Analysis Step 1) TABLE 7: Emotional Responses to Requirements Changes point of introduction, frequency of introduction, impact, deﬁnition, status, severity, and challenging nature. Among these, point of introduction is the leading property that trigger the emotions of practitioners. Associated stimuli: Stakeholders. Practitioner as a stimulus: The Practitioners individual conation, individual and social cognition make the practitioner themselves a stimulus. As practitioners perceive team dynamics, and emotional intelligence (EI) of their managers and customers, their social cognition is also associated with other human stimuli. Team as a stimulus: Team dynamics, such as collective skills and cohesion, results in team being the stimulus of emotional response to RCs. Manager as a stimulus: Managers of the practitioners act as stimuli because of their EI and being the source and carriers of some RCs. Customer as a stimulus: Similar to manager, customers EI and being the source and carriers of RCs make them a stimulus for the emotional responses to RCs of practitioners. 3.3 Emotion Dynamics of Practitioners in Project Life Cycle We found critical milestones in a project life cycle where emotions of the practitioners are triggered. Fig. 5 demonstrates these milestones, the respective emotions triggered, and found stimuli at the milestones. While practitioners feel speciﬁc emotions at each milestone, we also found a mix of emotions occurs throughout the project – low emotions during development, and in testing where anxiety is common. The emotion dynamics pattern related to this case is given in Fig. 7a. The emotions ﬂuctuate in a Mix (Low) → Mix (High) → High→ Mix (High, Low) → Low → High→ Low→ Highmanner. Lowemotions were found at the beginning of the project, then move towards high emotions. By the project’s partial completion, both highand lowemotions were seen. Finally, by the end of the project, when the deadline is approached and during delivery, low emotions can be seen. When it is about to complete the project, highemotions are abundant, whereas when the project is completed/delivered, highemotions are plentiful. However, failure/drop of the project could void this emotion dynamic pattern with lowemotions. Therefore, project failure/drop is the pattern cancelling milestone, which could happen at any time. We did not ﬁnd stimuli for all emotions at every project milestone. Hence, proving that triggering of emotions at the project milestones is not always due to stimuli, but only triggered because of the project milestone (which means stimuli decide the existence of emotion dynamics only occasionally). On the other hand, this is arguable that participants might not have revealed the associated stimuli. We leave this for researchers to investigate in the future. The same applies to emotions found at RC stages as well (following subsection). Below, within brackets next the project milestone, we present the found property of stimuli which contribute to the triggering of emotions at project milestone. Further, we present the dimensions, and evidencing quotes. The dominating stimulus at each milestone is shown in Fig. 7a. Project commencement (requirement stability): Unstable requirements result in anxiety at the commencement of the project: ”I was anxious when we ﬁrst started and the requirements were still not settled on.” – P54 [Tester]. During project development and testing (RCs point of introduction): During development, when RCs are introduced after design and implementation, practitioners are discouraged and fatigued: ”I was fatigued in one such project (startup project), where almost every feature (3 out of 5 feature sets) had a change request in the midst of implementation phase. The most discouraging part is the time / phase when the requirement change happens. Most of the time it happens after the design and implementation phase.” – P31 [Agile Coach/Scrum Master, Developer]; However, when an RC is introduced during testing, anxiety is felt as reported by P159: ”During online trading system development after the development phases is completed and we are in testing phase of our product client called to roll back the whole segment of project which make me and my team anxious.” – P159 [Business Analyst]. Deadline approached (team dynamics): As mentioned by P162, as none of practitioners in the team could solve unresolved issues, lowemotions occur: ”The above emotions happened to me when the deadline of the project approached. At the last day of the release there some issues which couldn’t be sorted out by anyone” – P162 [Agile Coach/Scrum Master, Developer] 3.4 Emotion Dynamics of Practitioners in Requirements Change Handling Life Cycle We discovered additional stages of the RC handling life cycle to the stages we found in our preliminary study [18]. Our initial research found the receiving, developing, and delivering stages where practitioners respond emotionally. In addition to that, through this study, we found the testing stage, substages of the developing stage (beginning, writing code, coding completed, troubleshooting), sub-stages of delivering stage (almost completed, completed, released/delivered). Fig 6 gives a comprehensive illustration of these stages, corresponding emotions triggered at the stages, and found stimuli that trigger the emotions. Further, we found that practitioners feel a combination of highand highemotions throughout development in general. 3.4.1 Emotion Dynamics Pattern across Requirements Change Stages Fig. 7b shows the emotion dynamics pattern of the RC handling life cycle. The emotions ﬂuctuate in a Mix (Low) → Mix (Low) → Mix (High, High, Low) → High→ High→ High→ High→ High→ Highway. Only 2 highemotions (energetic, excited) were found at the receiving stage, and the rest were lowand lowemotions. At the developing stage, a mix of emotions was found where the domination of high, high, and lowwhile writing code was seen. However, when the coding was completed and during troubleshooting, highemotions were prominent. Then, by the testing and delivering stages, highand highemotions were seen. 3.4.2 Stimuli at Requirements Change Stages Similar to project milestones, in this sub-section we present the stimulus property contributing to emotion triggering next to the RC stage where it was found, and quotes from participants. The dominating stimulus at each RC stage is shown in Fig. 7b. Receiving stage (RCs point of introduction, impact of RC on other requirements, RC deﬁnition, RC type, carrier of RC, requirement changing extent, practitioners individual conation): The majority of the stimuli found at the receiving stage of an RC were related to the lowand lowemotions. RCs point of introduction – such as receiving after development is signiﬁcantly/fully completed, during testing and in the middle of the project, e.g.: “I would think we were done and then more changes would be asked as others reviewed. It left me depressed and fatigued at times.” – P191 [Business Analyst]; Impact of RC on other requirements, where signiﬁcant amount of inter-dependencies exist, is another stimuli which triggers the emotions of practitioners. Similarly, deﬁnition of RC, i.e., its initial learning, and type of RC such as improvements for better user experience, also trigger practitioners’ emotions at this stage. Also, source and carrier of RC such as manager, and customers also trigger practitioners’ emotions such as anxiety, e.g.: “This is the 1st phase of every requirement change if it is the client who is initiating it. I feel anxious at the beginning but nothing else.” – P22 [Business Analyst]; Practitioners individual conation – where the practitioner is motivated to put much effort to work on the RC – Fig. 5: Emotion Dynamics of Practitioners in Project Life Cycle (*in general while speciﬁc emotions are triggered at speciﬁc milestones; **may overlap with the beginning of the project; ***may happen at any time; Emoji: Dominating emotion sub- Team, ±: Manager, {: Customer) makes the practitioners energetic when they receive the RC, e.g.: “Usually I feel more energetic when the work is assigned and there’s a lot of work to do” – P148 [Developer, Tester]. Development stage (Practitioners individual conation, individual cognition, team dynamics, RCs code status): Practitioners are energetic in cases where they are motivated, e.g.: “I felt energetic at the start of the development as I haven’t coded for a while.” – P9 [Developer]; Highemotions occur when the team is rapidly solving issues i.e., where positive team dynamics occur, e.g.: “As a crack team, bracing for any sort of change, especially changes in requirements, was like second nature to us. Whether planned or abrupt, we implemented any and all changes without needing to break much of a sweat. Sure, there were moments - quite rare, Fig. 6: Emotion Dynamics of Practitioners in Requirements Change Handling Life Cycle (*in general while speciﬁc emotions high/low emotions exist; Stimuli: ): RC, h: Practitioner, ¯: Team, ±: Manager, {: Customer) honestly - when we ran into some difﬁculties, but getting to troubleshoot and then rapidly resolve them left us all ecstatic and - if nothing else - greatly inspired.” – P101 [Manager]; Highemotions, such as satisfaction and contentment, are prominent where attention is sustained for a certain period of time, a cognitive skill, e.g.: “After a few solid hours of coding I did feel some satisfaction and content.” – P9 [Developer]; Negative team cohesion, a team dynamic, such as when difﬁcult for practitioners to agree, result in lowemotions, e.g.: “I felt this emotion at the beginning because there were some obstacles with disagreements between the developers” – P181 [Developer, Manager, Product Owner, Tester]; When the code works well, the practitioners feel high emotions, e.g.: “I felt all this when the written codes works well.” – P65 [Tester]. Testing stage (Practitioners individual cognitive skills): Timely ﬁxing of bugs and tests passing as expected trigger highemotions of the practitioners, e.g.: “energetic at every time that the testing was occurring as expected.” – P97 [Tester]. Delivering stage (Practitioners self-efﬁcacy): We found that when practitioners’ self-efﬁcacy reported by P89, where practitioners know the possibility of successfully delivering the RC, trigger a more relaxed frame of mind in them: “When I was closer to the end and all the most dangerous and boring parts had passed, I ended up relaxing because I knew I could deliver.” – P89 [Developer]. 3.5 Emotion Dynamics Regulation by Temporal Matters We found that temporal matters can regulate practitioners’ emotions. Fig. 8 shows the key temporal matters and related emotional responses of the practitioners in our survey. Temporal matters exclusive to the project: When a project is on schedule and practitioners are able to meet the project deadline, they feel highand highemotions, especially they are satisﬁed, e.g.: “When we ﬁnish a good project at a correct time it was satisﬁed at the moment. And it was the feeling of relief” - P39 [Manager]. But when the project has a tight deadline, and when the practitioners are not able to meet this deadline, practitioners feel lowand low emotions, e.g.: “time was running out and we had a lot to do” P98 [Developer] If unnecessary deadline postponing happens, lowand lowemotions are felt by the practitioners, e.g.: “The project did not get sign-off at appropriate times which dragged the project on longer than it should have.” - P183 [Business Analyst] Temporal matters exclusive to RC handling life cycle: As reported by our participants, a widespread incident they face in their projects are “last minute” RCs. Such a “last minute” could be closer to a set deadline. i.e., could be by the end of an iteration where a feature is anticipated to be released, or by the end of the project. We found that they feel lowemotions due to such last minute RCs, e.g.: “A client wanted several signiﬁcant changes made shortly before a deadline. I was very angry because they should’ve mentioned this earlier in development and having to make broad sweeping change so close to the deadline was very frustrating.” - P138 [Developer] We also found that they feel lowemotions, such as anxiety, when they do not have enough time to work on Fig. 7: Emotion Dynamics Patterns (1row: Dominating emotions; 2row: Dominating stimuli; : high; : high; : low; : low; Size of the circle: more the number of emotions, larger the circle; ): RC; h: Practitioner; ¯: Team; ±: Manager; {: Customer; : Unknown) the RC, e.g.: “I felt anxious because I was worried about whether or not I had enough time to make the change and complete the project on time” - P150 [Developer, Tester] However, when they are able to meet the RC deadline, they feel highemotions, e.g.: “When they added a few usability enhancements due for the next day and I managed to set them in time for the deadline.” - P180 [Tester] 3.5.1 Emotion Regulation of Project and RC Handling Life Cycles If an RC ﬁts the project timeline, practitioners feel highand highemotions, thus making it the way to direct emotion regulation towards high pleasure, e.g.: “When useful userfacing features are being added, when there is time to do so.” – P10 [Developer], “When there’s plenty of time for implementing new requirements (rarely) because there’s no reason to be up” – P180 [Tester], “If there is enough time, and the change is not a big modiﬁcation in which I have to undone my work.” – P125 [Developer], “This happens only when the changes are easy to implement and are not time-consuming. Some examples are the wordings on screens, minor layout changes, additional variations, or changes that can be implemented without major changes to the existing application design or program ﬂow. Such changes are not a cause for concern and are usually easy to accommodate within the original estimates.” – P128 [Developer] 3.5.2 Stimuli during Temporal Matters The majority of stimuli during temporal matters we found were about the RC, especially if its impact on scope is minor, e.g.: “The project added a minor and easy to develop requirement which did not add signiﬁcantly to the timeline or scope.” - P183 [Business Analyst] and more signiﬁcant changes on scope, e.g.: “When the project scope changes and extended the project.” P170 [Business Analyst], on other requirements, e.g.: “When clients made last minute adjustments to planned feature” - P59 [Developer], and on design/program ﬂow. We found that an RC’s challenging nature is also a signiﬁcant stimulus in temporal matters, especially when they are easy to implement, and not consuming time, e.g.: “This happens only when the changes are easy to implement and are not time consuming. Some examples are the wordings on screens, minor layout changes, additional variations, or changes that can be implemented without major changes to the existing application design or program ﬂow. Such changes are not a cause for concern and are usually easy to accommodate within the original estimates.” - P128 [Developer], and a stimulus related to RC’s delivery, e.g.: “When they added a few usability enhancements due for the next day and I managed to set them in time for the deadline.” – P180 [Tester] was found. We also found stimuli related to lack of EI of the customer, and social cognition of the practitioner. The practitioners are able to perceive that the customer lacks EI (social awareness: empathy), e.g.: “Late in the dev phase of a new work project, my client changed their requirements; speciﬁcally they wanted to change how their data is loaded into the application, changing it from an XLS ﬁle to a database table. I had to rebuild the ﬁle loader completely. It made me feel angry because I felt they do not understand my position.” – P150 [Developer, Tester], individual conation where practitioners are demotivated due to lack of EI of customer and when they act as the source, and carrier of RC, e.g.: “Well we : Low; Stimuli: ): RC, h: Practitioner, ¯: Team, ±: Manager, {: Customer) had almost completed the given task suddenly client called and changed their idea to an whole new thing. That moment I felt that my hard work was just wasted I felt very anxious while deleting and creating a new one crystal orange.” – P142 [Developer], and perceiving their own personality, e.g.: “I felt anxious because I was worried about whether or not I had enough time to make the change and complete the project on time, otherwise it would just look bad on me regardless of the requirements being changed, and I am a perfectionist.” – P150 [Developer, Tester], and practitioners social cognition where they are perceiving their manager lacks EI, e.g.: “I worked more and more time each day to try to successfully make the job, and new issues appeared every day that needed more and more time. We were all at same feelings but team leader didn”t hear his team feeling. He requested us to perform this project on at ’just in time’. I lost energy and I worked without any positive feedback. I lost my ﬂow.” – P173 [Developer] External Validity: Equal geographic distribution of participants was not achieved. Almost half of the participants of our study were from North America, and therefore, generalizability of our ﬁndings is limited. Similarly, participant counts across the genders was not equal. Majority of participants were male, rest were female except a single gender-diverse participant. As emotions are bounded to the biological nature of humans, including the gender, we see this as a threat to validity. However, in both of the abovementioned cases, we tried our best to recruit representative participants. This study was conducted during Covid-19 global pandemic. Mental health was a persistently talked and researched topic during this time. As emotions heavily impact the mental well-being, the results of this study may have been threatened by the pandemic situation. A study on work of software engineers during Covid-19 also found the impact of it on the mental well-being [38]. However, this situation was an uncontrollable one, therefore stays as a threat to the validity of the ﬁndings. Internal Validity: The ﬁrst author analysed all data and the emerging ﬁndings were presented to the second and third authors during fortnight meetings where the ﬁndings were discussed. In addition, all authors went through the codes individually as a ﬁnal check before drafting the paper. We also consulted a psychology expert to ensure the correctness of terminology use, and analysis of data. Construct Validity: Given the Covid-19 pandemic situation, we were not able to conduct any experience sampling or observations to collect emotional responses shown at the exact moment, as we planned. Therefore, we decided to carry out an online survey allowing participants to selfreport their emotions. However, we tried to mitigate this threat by asking the participants to share their experiences considering their current/most recent project. Our ﬁndings rely on JAWS. JAWS is used to assess emotional reactions of people over the past 30 days. However, in our case, it is impossible to assume that project and RC handling life cycles were limited to a period of 30 days. Therefore, this remains as a threat to validity. Additionally, the number of emotions vary across the different emotion scales. Therefore, the analysis may differ if other emotion scales are used. In addition, we assumed that emotions listed in the scale are understandable and interpreted in the same way by the participants. Moreover, as participants may be reluctant to report their negative emotions [13], this is a possible threat. The recommendations we presented assume that high pleasurable emotions impact handling of RCs positively and low pleasurable emotions impact handling of RCs negatively in general. However, certain emotions such as anger might sometimes make software teams more productive [13]. 5.1 Implications for Practitioners Practitioners are not always pleased with RCs. The majority of our survey participants practice agile methods. The Agile Manifesto claims that agile approaches allow practitioners to respond better to changes without necessarily needing to follow a plan [3]. Practitioners do respond to RCs, and the manifesto does not talk about whether the practitioners should respond positively or not i.e., the Agile Manifesto does not say whether the practitioners should be pleased with all of their RCs or not. Even though the quantitative analysis gives a high level sense that practitioners feel high pleasurable emotions when handling RCs, according to our ﬁndings from in-depth qualitative analysis show that practitioners are not always pleased with RCs and show a mix of emotions throughout the RC stages. However, as agile is known to be human-centric, our ﬁndings around emotions, which play a major role in human mind, do raise the question, “is agile really that human-centric?” The impracticality of welcoming changing requirements even late in development. Even though the agile manifesto encourages welcoming changing requirements, even late in development, it is notably clear from our ﬁndings that last minute RCs trigger lowand lowemotions of practitioners. By the end of the project, or even by the end of an iteration, if closer to a deadline, the above-mentioned emotions are felt when an RC is introduced. Therefore, positively welcoming changing requirements even late in development is often impractical. The agile principle, “welcoming changing requirements even late in development” voids the principle of “giving the software team the environment and support they need”. Emotions have direct links to cognition, productivity, and decision-making, essential elements in developing software. According to our ﬁndings, it is evident that the stimuli occasionally decide the existence of emotion dynamics along with the distinct events. In other words, these stimuli and events have the ability to hinder the arousal of high pleasurable emotions in practitioners. As we found that last minute RCs are common, and as low and lowemotions are triggered in practitioners when last minute RCs are introduced, it is clear that the environment and support in terms of emotions may not be being supplied to practitioners in SE team contexts. Therefore, in reality, positively welcoming changing requirements and giving the software team, the environment and support they need in terms of emotions is not always possible. Practitioners having emotional intelligence, but their managers, and customers lack. EI has four aspects, namely, self-awareness (aware of own emotions), self-management (manage own emotions), social-awareness (aware of others emotions), relationship management (build relationships with the use of other three aspects). Self-awareness: From our results, it is clear that, practitioners are generally aware of their own emotions as they explained “when they emotionally respond by incorporating emotions clearly. Selfmanagement: Practitioners did not mention how they manage their emotions at the distinct events we have given in this paper. Social-awareness: Our study shows that practitioners recognise when customers, and their managers, lack EI; which is a sign of practitioners capability of being socially aware of others. However, we could not ﬁnd practitioners recognising speciﬁc emotions of others at the distinct events. Relationship management: Even though our results show that the practitioners identify the relationship statuses such as disagreements among developers at a distinct event, we did not ﬁnd how they improve the relationship to build a better relationship. Even though practitioners’ EI is impressive, the same EI does not seem to be perceived in their managers and customers. Them not being empathetic (social-awareness) arouses low pleasurable emotions of the practitioners. Emotion-centric Decision Guide. We present an emotion-centric decision guide that we created using the above implications in Fig. 9. This dual-purpose guide caters for the carriers of RCs by suggesting to them when to decide when to introduce an RC, and for practitioners to decide when to accept an RC by being considerate about their emotions. The checkpoints [A], [B], and [C] require the carriers of RCs and practitioners to work collectively. Recommendation 1. Practitioners monitoring their own emotions and managers monitoring team’s emotions is necessary. Anxiety is common among practitioners. Monitoring emotions help improve their EI through self-awareness, and eventually help take actions (selfmanagement) to maintain positive emotional well-being, thus providing the support the practitioners need in terms of emotions. Emotion tracking and monitoring tools exist. For instance, Emotimonitor [39], the tool we developed for agile teams, could be used to track and monitor self and team emotions. Recommendation 2. Customers and managers should improve their emotional intelligence. Customers and managers lacking EI impact the emotional well-being of practitioners. As practitioners have EI, they do know when their managers, and customers lack EI. To have a better relationship with the practitioners, customers and managers are required to improve their EI. Since we found lack of empathy is identiﬁed by the practitioners, customers and managers, empathy is speciﬁcally needed to be improved and prioritised. For example, in this article [40], the author explains how prioritising empathy could have made a conversation more productive. Customers and managers being concerned and “human” requires to be prioritised for the betterment of the emotional well-being of the practitioners in the team. Recommendation 3. Being considerate of when to introduce/accept RCs is necessary. In relation to the previous recommendation, the point of RC introduction plays a signiﬁcant role in the emotional responses of practitioners. Avoiding or reducing last minute RCs may bypass the feeling of lowand lowemotions of the practitioners. Recommendation 4. When possible, extending the project timeline where necessary may help maintain high and highemotions of the practitioners. For example, when there is not enough time for the practitioners to work on the RC, they are anxious. However, when the RC ﬁts the project timeline, practitioners feel highand high emotions. Therefore, allocating enough time, which may result in an extension of the project timeline, may awaken the practitioners’ highand highemotions. However, this recommendation is applicable if and only if the deadline extension is possible with all other business factors. Recommendation 5. Do not exploit agile values and principles. Finally, we urge the carriers of RCs and practitioners not to exploit the agile value “responding to change over following a plan” by entirely avoiding following a plan, and the principle “welcoming changing requirements even late in development”. Following guides which are kind of lightweight plans may ultimately help maintain better practitioner emotional well-being. 5.2 Implications for Researchers Similarities and differences in emotion dynamics of project and RC handling life cycles. The emotion dynamics Fig. 9: Dual-purpose Guide: Emotion-centric Decision Guide for Carriers of Requirements Changes and Practitioners pattern of the RC handling life cycle is different from the project life cycle. Similarity: Both have lowemotions dominating at the beginning. Differences: In the RC handling life cycle, lowemotions such as depressed, discouraged, and fatigued can be seen, which is not seen at the beginning of the project. In the middle of the project life cycle, only highand lowemotions are prominent. In the RC handling life cycle, highemotions are also central; in the project life cycle, by the end, high, high, and lowemotions can be seen, but in the RC handling life cycle, no lowemotions are evident. Therefore, we can say that practitioners are much pleased by the end of the RC handling life cycle than that of the project life cycle. Note of course that the RC handling life cycle begins within the project life cycle. Speciﬁc stimuli dominate the emotion dynamics at project milestones and RC stages. A mix of stimuli dominates project milestones. However, stimuli were not found for the feeling of emotions when the project is announced, at the development commencement, when the project is partially completed, during delivery, and when the project is completed/delivered. In the RC handling life cycle, the practitioner as a stimulus dominates the majority of the stages and then the RC. This hints that even though RC acts as the central stimulus, the practitioner’s individual conation, individual cognition, and social cognition play a larger part in triggering their own emotions. We anticipate to see research on how practitioners explore, utilise, and improve these aspects. Similar to the project, we did not ﬁnd the dominating stimuli when coding is completed, and when the RC is completed, and released. We encourage researchers to study the missing dominating stimuli at the above-mentioned project milestones and stages of the RC handling life cycle. Other stimuli exist. Apart from RCs, and the rest of human stimuli we have presented, we found other stimuli such as some properties of the project, issue, and task that trigger emotions of practitioners at distinct events. However, the evidence is not dense enough to accept them as triggers. A few such scenarios are given below, and researchers may consider exploring these more in the future. Project partially completed (project stability, issue severity): When the project is stable and when there are no major issues at partial completion of the project, highemotions arise, e.g.: ”Usually somewhere around mid project, if everything is on schedule and there haven’t been any major glitches, then most of us, if not just me will feel content and satisﬁed and even relaxed. The schedule can be hectic at times but that doesn’t mean it can’t be approached in a calm and relaxed manner.” – P64 [Manager, Tester]; Project completed/delivered (project completion status): We found that when the project was successfully delivered, satisfaction occurs; Throughout the project (project stability): Project undergoing a stable implementation impact the highand highemotions, e.g.: ”Any time our team begins any project we all start out with enthusiasm, inspiration and a great deal of energy. Hopefully, those feelings stay with us through the whole project but they don’t always depending on how the actual implementation goes” – P64 [Manager, Tester]. The emerging theoretical model. At the end of STGT basic data analysis stage, we found emerging relationships among the categories. We noted these down and used them to aid further discovery and strengthening of the connections. The ﬁrst author drew the emerging model on paper iteratively, and shared and discussed it with the other two Fig. 10: Emerging Theoretical Model: Emotion Dynamics of Software Team Contexts authors until the ﬁnal model was formed. The emerging relationships identiﬁed among categories are given in bold uppercase text below. Emerging relationships among categories: Emotion dynamics IS THE FLUCTUATION of emotions over time; Stimuli TRIGGER emotions; Distinct events LEAD TO emotion dynamics; Temporal matters COMMON TO distinct events REGULATE emotion dynamics We suggest future work on this, where the researchers could either choose the emergent or structured mode of STGT to develop a full theory. For instance, if the researchers choose the structured mode, the next steps include structured data collection, structured data analysis, advanced memoing, and ﬁnally theoretical integration. The model representing the emerging relationships is given in Fig. 10. The core category at this stage is: Emerging core category (central phenomenon): Emotion dynamics in software team contexts STGT Method Application Evaluation: STGT outlines criteria for evaluating the application of the method. As this paper does not propose a mature theory, we evaluated our model against the criteria for non-mature theories (Credibility and Rigor). Credibility: We have provided details in Section 1 on how participants were recruited (social media and AMT), the applied an initial sampling method (random sampling followed by purposive sampling), how iterative and interleaved data collection and analysis ensured (the study is not limited to this paper, therefore the iterative data collection and analysis was quantitative data-biased), and how memos written and used (diagrams). Rigour: In Section 1, we have provided examples of our basic coding (how raw data was analysed to produce codes, subcategories, and categories), embedded sanitised evidence (quotes from throughout out the paper), and evidence of theory development (the emerging theory). 6.1 Emotions During/Post Software Development Exploring Emotions: In their study, Graziotin et al. [16] summarise existing psychology and SE studies to demonstrate practitioners calling for more psychology-based SE studies. Pletea et al. [41] conducted sentiment analysis of discussions and comments of commits and pull requests. They found that security related discussions on GitHub contain more negative emotions than other discussions. The proposal paper [42] on exploring emotions of software developers while working suggested that emotional awareness increases developer’s progress by mitigating negative emotions. [9] is also a proposal paper on multimodal emotion recognition of software developers while working. Application scenarios in software development and testing processes using multimodal emotion recognition (vision, sound, text, physiological signals). Novielli et al.’s proposal paper [43] on exploring emotion in questions and answers in Stack Overﬂow argues that emotions of a technical question impacts the probability of obtaining satisfying answers. They also provide an emotion annotated dataset [44] of questions, answers, and comments from Stack Overﬂow which can be used in developing predictive models. Yang et al. [45] improved Nave Bayes Multinomial algorithm for emotion analysis. Werder and Brinkkemper [46] presented a tool for extracting emotions from GitHub comments. They used Ekman’s and Davidson’s emotional framework in their tool. Murgia et al. [47] also presented a tool for extracting emotions from issue comments. They found that words such as thanks and sorry are emotiondriven. They found their machine learning classiﬁers for love and joy have an overlap between them. Guzman’s study [48] includes general and detailed views of topics and emotions expressed in software project collaboration artefacts. It suggested how topic modelling can be applied to extract sentiment score and topics in the text. Neupane et al.’s work [49] is on automatic extraction of communication records of software development teams. Identiﬁcation of emotions and their intensity, and modelling them as time series data, provides end to end support on data collection, modelling, storage, analysis, and presentation of emotions. Similarly a study on automatic extraction of emotions from issue comments [50] found that issue reports express emotions and emotions such as love, joy, and sadness can be automatically mined. Parrot’s emotion framework was used in their study. Emotions vs Productivity: Through their study [13] focusing on the impact of emotions on productivity during software development, Wrobel found that frustration is felt most often. This lowers productivity, while anger increases productivity, enthusiasm increases productivity, and emotions transit from frustration → anger → contentment → enthusiasm. Wrobel also proposed participant observation can be used to conduct experiments on understanding emotions in SE teams [12]. This can be used as an assessment tool to measure valence and arousal of emotions, and productivity of SE teams. Crawford et al.’s work [14] on the relevance of emotions in software development noted the need of conducting emotion based research in software contexts. Giradi et al.’s [11] provide evidence on connection between emotions and productivity. They also present a taxonomy of triggers which includes collaboration, and self perception which we also found through our study. Emotions vs Progress: Muller and Fritz’s work [10] on relationship between emotions and progress of software developers concluded that emotions have direct potential impact on developer’s work and productivity. They also found that the reasons for increase in emotions/progress: localising relevant code, better understanding of parts of the code, clear next steps, writing code, and having new ideas. As the reasons for decreases in emotions/progress, they found difﬁculty in understanding how parts of the code/API work, difﬁculty in localising relevant code, not being sure about next steps, realising that hypothesis on how code works is wrong, and missing/insufﬁcient documentation. Girardi et al.’s work [51] proposes replicating a previous study to determine the extent to which biometric sensors can be used to automatically detect emotions during software development to ﬁnd the relationship between emotions and progress. Emotions vs Practices: In their study [52], ColomoPalacious et al. compare emotions felt while presenting and coding. They found that anxiety and nervousness are felt when presenting and satisfaction and enjoyment are felt when coding. Emotions vs Problem Solving: Graziotin et al.’s work [16] on the relationship between affective states, creativity, and problem-solving skills demonstrated the need for more psychology-based SE studies. Affective States vs Software Metrics: Kuutila et al.’s study [53] on identifying links between software developers’ affective states and work well-being, and found a negative link exists between hurry and number of commits, and a negative relationship exists between social interaction and hindered work well-being. 6.2 Emotions During Requirements Engineering Pleasure and Arousal of Emotions vs State of Requirements: Colomo-Palacious et al.’s study [17] on comparison of pleasure and arousal in ﬁnal and non-ﬁnal requirements, stated that pleasure felt is high in ﬁnal requirements and arousal is low in ﬁnal requirements. Emotions vs Handling Requirements Changes: Previously, we [18] presented distinct phases of RCs, a summary of emotions, experienced, and variation in emotions and sentiment polarity when receiving, developing, and delivering RCs. We found that positive and neutral emotions follow high → low → high pattern whereas negative emotions are higher when RCs are received and moves towards positive as teams move to developing, and delivering RCs. In this paper, we present stages and emotions in a ﬁner level. In this paper, we present emotional responses to requirements changes, and emotion dynamics: how emotions of software practitioners ﬂuctuate over time in their project when they are handling requirements changes. We found speciﬁc project milestones in the project life cycle and stages in the requirements change handling life cycle where practitioners emotions are triggered. We found that these emotions are not only tied to the project milestones and requirements change stages, but also to the stimuli of requirements change, practitioner, team, manager, and customer. In addition, we discovered that regulation of emotions is possible through temporal matters, which are universal to the project and to the requirements change handling life cycles. We conclude that practitioners are not always pleased with requirements changes, and that positively welcoming changing requirements in late development is impractical, hence violating the emotional support provided to the practitioners working in the software development project. We propose a dualpurpose emotion-centric decision guide for the carriers of the requirements changes (customers and internal stakeholders who liaise with customers) and practitioners to decide when to introduce/accept a requirements change to/by the team. We also provide recommendations for practitioners to follow and directions for researchers to explore this area further in the future. This work is supported by a Monash Faculty of IT scholarship. Grundy is supported by ARC Laureate Fellowship FL190100035. Also, our sincere gratitude goes to Dr William Bingley for providing invaluable feedback for this work, and all the participants who took part in this study.