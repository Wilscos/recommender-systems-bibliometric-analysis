Software Process Improvement (SPI) is focused on ﬁnding more eﬃcient methods of software development and optimizing the entire software life-cycle, to ﬁnd an acceptable balance between expectations of stakeholders, constraints concerning cost and quality, and the capabilities of the development team. Until now, various approaches related to the design, implementation and evaluation of SPI have been identiﬁed, studied and veriﬁed [1]. As a result, several diﬀerent solutions have been proposed, implemented and are in use in the industry. turing the problem, diagnosing it, ﬁnding a possible solution, and then applying it [2]. In many cases, the process is not linear nor sequential, but iterative [3], resulting in a continuous and ever-improving procedure driven by collected feedback data. This work is part of a project that has received funding from the European Union’s Horizon 2020 research and innovation programme under Grant Agreement No. 856726 (GN4-3). The scientiﬁc/academic work is ﬁnanced from ﬁnancial resources for science in the years 2019-2022 granted for the realisation of the international project co-ﬁnanced by the Polish Ministry of Science and Higher Education. PSNC, Pozna´n, Poland {bartek.walter,marcin.wolski}@man.poznan.pl University of Belgrade, Belgrade, Serbia, branko.marovic@rcub.bg.ac.rs Friedrich-Alexander-University, Erlangen, Germany, ivan.garnizov@fau.de Abstract. Software Process Improvement requires signiﬁcant eﬀort related not only to the identiﬁcation of relevant issues and providing an adequate response to them but also to the implementation and adoption of the changes. Best practices provide recommendations to software teams on how to address the identiﬁed objectives in practice, based on aggregated experience and knowledge. In the paper, we present the G´EANT experience and observations from the process of adopting the best practices, and present the setting we have been using. Keywords: software maturity evaluation · best practices · software process improvement · SPI monitoring A typical SPI process includes several activities or stages: it starts with capprocess in G but it currently includes also an important component of network-based services supported by software-intensive systems. G in terms of language, nationality and work culture. In addition, they enjoy a high degree of independence, which also includes the freedom to choose, adapt and follow a speciﬁc approach to software development. This diversity creates a hospitable environment for experimenting and promoting innovations, but also provides a challenge to the coordination of work and managing the outcomes with respect to the expected deliverables and existing constraints. monitoring of best practices, aimed at optimizing and coordinating the software development process, and accompanied by preliminary observations of the process. the literature concerning the SPI, its implementation and support from the best practices. Sec. 3 provides more details about G that guide the entire SPI process. In Sec. 4 we describe our approach to monitoring, based on a lightweight process aimed to support the teams in their eﬀorts, but also providing valuable input to managers, in particular in the area of Product Lifecycle Management (PLM). In Sec. 5 we present an exemplary implementation of some practices in one of the subject teams, and in Sec. 6 we summarize the work. Many aspects concerning the deployment and implementation of SPI initiatives have been discussed in the literature. In this section, we refer to selected works in that area. have been developed to help organisations to improve their software processes and also numerous instruments are developed to evaluate process eﬃciency [7]. Moreover, they also emphasised the role of practice-originated recommendations in developing quality software systems. In some of the models, a large part of the SPI success is achieved through the implementation of best practices [8]. It has been also discussed by Rahman et al. [9], who formulated best practices for ensuring quality in software engineering projects. Moreover, various patterns for the successful adoption of SPI practices have been discussed in the literature [10]. et al. proposed an approach based on frequent feedback, which enables reacting to deviations in short time [3]. provement, can be easily narrowed down to the list of processes that should be improved. Zarour et al. presented a systematic literature review aimed at in- In previous papers [4,5,6] we presented earlier stages of developing an SPI In this work, we present the approach to the implementation, adoption and The paper is structured as follows. In Sec. 2 we make a brief overview of As indicated by Kham and Keung, diﬀerent standards and models for SPI Proper monitoring of processes is another indispensable step in SPI. Stojanov Software process assessment, as the most important phase in process imvestigating the best practices for the successful design and implementation of lightweight software process assessment methods [11]. The SPI Manifesto identiﬁes key activities that contribute to successful SPI implementation. More than two-thirds of its recommendations refer to human engagement and initiatives. Messnarz et al. [12] discussed that issue also from the social responsibility perspective, introduced in the ISO 26000:2010 standard. G´EANT software teams work in a speciﬁc environment that strongly aﬀects the way they work. To a large extent, it results from a federated structure of the organization and the emphasis put on producing innovation by designing and developing prototypical applications based on the high-performance network, to support novel services for European researchers and citizens [4]. mon tools, but they can freely choose and customize their processes and techniques. Team members usually come from various national organizations (called NRENs), can be simultaneously involved in several projects, are geographically distributed, and have diverse cultural and professional backgrounds. This adds an additional complexity that needs to be addressed and embraced. Software Maturity Model (SMM) sions of both frameworks have been reviewed by selected software teams, which resulted in revisions that are currently implemented in practice [4,6]. ommendations on how to achieve speciﬁc goals deﬁned in the SMM [5], but they need to be customized and adapted by the teams to the local context. As a result, the generality of recommendations included in a practice appears to be a balanced trade-oﬀ between delivering actionable procedures on one hand and ensuring the necessary generality on the other [6]. A catalogue of Software Best Practices presented in Table 1 covers all relevant aspects of software development that have been identiﬁed in G and objectives [13] and is one of the tools contributing to software governance. Currently, it includes 24 practices, and a few more are waiting for inclusion into the catalogue. The software governance team (SwM), formed as a part of one of G´EANT work packages, supports the teams in implementing and adjusting best practices. It also encourages them to share their experience and observations with other teams, creating a continuous improvement loop. https://wiki.geant.org/display/GSD/Catalogue+of+best+practices https://wiki.geant.org/display/GSD/Software+Maturity+Model The role of a human factor in SPI eﬀorts has been also widely recognized. Teams in G´EANT share a common Product Life-cycle (PLC) and use com- In response to that, work on Common Best Practices (CBPs)and G´EANT The CBPs for G´EANT software teams provide directional guidance and rec- Table 1. Catalogue of Common Best Practices used in G Design & implementation, C–Quality assurance, D–Team organization, E–Maintenance BP-A.1 Identify an initial group of stakeholders and iteratively reﬁne it BP-A.2 Elaborate a communication strategy for stakeholders BP-A.3 Identify, analyse and manage requirements BP-B.1 Monitor and assess available technologies BP-B.2 Elaborate an approach for documenting processes and artifacts BP-B.3 Track the changes in relevant artifacts BP-B.4 Support the build and delivery process with automation BP-B.5 Record and manage issues encountered with the product BP-B.6 Verify licenses of the used libraries BP-C.1 Identify and manage risk factors that could negatively aﬀect the product BP-C.2 Identify relevant quality characteristics and test conditions and provide veri- BP-C.3 Elaborate and maintain a quality plan for the project BP-C.4 Apply adequate methods to verify the outcome of development activities BP-C.5 Monitor relevant quality parameters BP-C.6 Periodically validate the product with project stakeholders BP-C.7 Reﬁne the quality assurance process based on retrospection BP-D.1 Manage skills of the team members and skills required in the project BP-D.2 Provide eﬀective, adequate and reliable means for communication within the BP-D.3 Deﬁne and implement an eﬀective decision-making process BP-D.4 Manage the schedules and assignments of the team members BP-E.1 Plan early and implement adequate maintainability-related activities BP-E.2 Elaborate a strategy for managing maintenance issues BP-E.3 Identify and evaluate available options for implementing a change request BP-E.4 Deﬁne a procedure for deploying changes to running services The process of implementing best practices and transferring them between various teams is organized into four iteratively repeated phases: 1. Understanding the critical and important processes and practices in each 2. Reaching the agreement with the team concerning the implementation of 3. Monitoring the adoption process and reﬁning the approach, 4. Evaluating the results, providing feedback and formulating new or updating is associated with feedback not exclusively related to process improvement, but ﬁcation criteria for them team team’s work (by interviewing the team members), SPI recommendations, making necessary adaptations and adjustments, the existing SPI-related recommendations. In the process, we intentionally avoid using the term ”evaluation”, which also the inevitable comparison of teams. Initial attempts to include an element of assessment was found to be too oﬀensive by many teams and signiﬁcantly hampered their motivation to participate in the SPI program. As a result, we decided to re-focus our attention on activities directly linked with process optimization. process. Adaptation is an indispensable step in the SPI process in the G Best practices that have been identiﬁed and documented do not deliver directly executable instructions, but directional recommendations at a high level of abstractness. This was a conscious decision, given the diversity of the solutions that addressed each objective in SMM, which could not be embraced by a single, universal practice. Consequently, the recommendations included in CBPs need to be customized and adapted to the local context of the implementing team. In practice, this happens in a sequence of interactions between SwM and the software team, with the following outline: 1. Presentation of the catalogue of CBPs to the software team, with a conclud- 2. Selection of the practices, for which there exists the largest room for im- 3. Presentation of the current status of the given objective; 4. Adaptation and operationalization of the best practice, with an objective to 5. Deﬁning preliminary metrics and parameters for monitoring the adoption practice mostly concerns the translation of the generic recommendations of the practice into actionable statements that encompass the speciﬁc context of the team, its tools and procedures. Additionally, sometimes a speciﬁc practice also needs to be extended or narrowed, as some elements of it are out of scope in the team’s context. As a result, the team can elaborate its own version of the practices, as long as their objectives are properly addressed. tative values. Since modus operandi varies among teams, the monitoring metrics are frequently identiﬁed in each case separately. As a side eﬀect, due to the diﬀerences in metrics and parameters, it is virtually impossible to perform a cross-project comparative evaluation. However, we need to outline that the evaluating aspect of best practices adoption is not the top priority. At this stage, we only make a preliminary identiﬁcation of the metrics, while they are ﬁxed, tuned and calibrated in the next step. In the following subsections, we provide more insights into key aspects of the ing discussion; provement; address the speciﬁc context of the team; process. In this process, two items deserve a comment. First, operationalization of the The process of adoption needs to be controlled and managed based on quanti- Monitoring is another step in the deployment step that allows for controlling the process, collecting feedback and taking necessary corrective actions. It fosters the adoption of best practices, contributes to increasing the outreach of change, supports the consolidation of achieved results and is also a promotional tool that encourages the implementation of similar ventures in other teams. titative or qualitative. However, since the initial status of software teams is diverse, and their speciﬁc needs and methods diﬀer and are subject to subjective assessment and interpretation, it is very diﬃcult to provide a single measure that would be universally applicable. The measurement can be also used as a feedback tool that will allow not only to evaluate the outcomes but also to validate and adjust them. To eﬀectively support the monitoring process, adequate instrumentation is needed. The process of monitoring requires collecting feedback data for tuning and taking corrective actions regularly. The feedback loop is similar to the one used for agile software development with two diﬀerences: it should require a lower level of engagement from the team (as the SPI process is usually only accompanying the primary activity), and it spans over a longer time, as it is not related to direct results of software development, but to the changes in development methods. data collection and visualization plugin into the G (GSC). GSC is a system that collects and manages information about all software projects in G stakeholders so that it provides continual access to all measurements and data. GSC regularly collects information from various components of the toolchain that may be useful for this purpose, e.g., issue tracker, directory service or code repositories. deﬁning manually maintained metrics related to the adoption of CBPs in speciﬁc projects. In particular, the tool allows for deﬁning arbitrary metrics that correspond to the process and entering the measurements by authorized stakeholders from G cases, a ﬁve-point Likert scale is used, which provides some uniformity across teams and practices. Stakeholders record changes in the monitored quantities and can observe the changes in the reported values. ful to monitor and discuss the related measures that quantify workﬂow results, such as source code metrics, incident frequency, number of served requests, user satisfaction, responsiveness or level of user participation, user retention and the like. They are also supported by the CBPs plugin and are used as customisable The monitoring activity needs to be backed and guided by data, either quan- To properly support the monitoring of the adoption of CBPs, we added a The CBPs plugin relies on the data available in GSC but it also allows for ´EANT. For each metric we deﬁned an ordinal scale of values; in many In addition to the main metrics for individual best practices, it is also usesupporting and indicative metrics for individual best practices that provide evidence for the best practices or can be used to help in assisting its current status. These metrics are currently also manually collected, but in the future could be linked to the information that GSC already regularly collects from some of the tools it is integrated with. they could be extracted and analysed by an external tool. However, we do not expect that the monitoring will ever be fully automated, as the ﬁnal appraisal of practice is highly context-dependent. A few software teams started adopting selected practices that address the issues they currently face. One of the projects, codenamed GSC, is responsible for G´EANT Software Catalogue, a web system with data about software projects run by G applies Scrum-like, iterative approach to software development. three practices from the catalogue that have the strongest impact on the team’s performance. BP-A.1: Identify an initial group of stakeholders and iteratively reﬁne onboard all parties that could contribute their requirements, experience or feedback to the project. Innovative projects that lack appropriate support from their stakeholders usually miss their targets or deliver wrong products that meet only some of the requirements. The GSC team decided early to create and maintain a plain registry of individuals or teams related to the project. The registry is occasionally updated by removing inactive ones who are unlikely to restore their activity or who left their teams. According to the GSC team, the simplicity of this solution is a fair trade-oﬀ between the cost related to maintaining the registry and the advantage of having the core stakeholders identiﬁed. The registry is frequently used for consulting them about the next directions for the project or notifying them about releases and decisions. Due to the projects’ speciﬁcs and a relatively large number of stakeholders, the GSC team considers extracting the core ones who actively contribute to the project, to a separate list. BP-C.4: Apply adequate methods to verify the outcome of development activities eﬀort related to QA methods with the expected and actual outcomes. It does not mandate adopting speciﬁc testing or review methods, so it is quite generic. In response to that, the GSC team adopted three levels of testing that appeared Although all these quantities are currently monitored manually, in the future ´EANT. The team is small (3-4 people), started working in 2018 and After the initial discussion, the team decided to implement the following It is important, in particular at the initiation of the project, to identify and This practice recommends the involved teams to balance the complexity and highly eﬀective in detecting defects and improving the identiﬁed quality characteristics: unit tests, integration tests and UI tests. They address the key concerns about the defects at the level of individual components, modules and the useraccessible interface. Currently, the tests are partially automated in areas where the eﬀort vs. beneﬁt ratio is the most promising. Additionally, the team is committed to improving the process during retrospection sessions. BP-E.4: Deﬁne a procedure for deploying changes to running services the users or other services. Therefore, it is essential to identify the key steps in that process, verify them and ensure they are consistently applied, for example in the form of a checklist. The GSC team adopted this procedure by identifying the parts which could be automated and the ones that need to be performed manually. The former ones have been deﬁned by scripts, which backup the databases, re-generate conﬁguration ﬁles or tag the code in the repository. The manual procedures embrace contacting the relevant service owners, who could be aﬀected by the changes, and making sure that there are no other works planned in the infrastructure that could interfere with the release. Software Catalogue is one of the key services, and its high availability and stability is a core concern, which mandates assigning a high priority to the integrity of the release process. The entire procedure, initially scattered, is currently centralized, periodically reviewed by the team and maintained by the product owner and team manager. Best practices are primarily oriented towards the software teams and focused on delivering the value directly to them. However, a similar need has been also recognized by the G vice management and the Product Lifecycle Management (PLM) process. The collaboration between SMT and the management team resulted in applying the best practices framework to identify the activities that facilitate the management decisions on product and service maturity, but also support software development teams in meeting the objectives and standards deﬁned by the management team. phases representing various stages of product development, each ending with a gate that the product needs to pass. Each of the phases is associated with various risk factors. The objective is to seek ways to mitigate or avoid these risks to maximize the chance of a successful deployment and delivery. found on both sides. For the software teams, they usually include the following: 1. Re-using the experience of other teams, expressed by best practices. 2. Promoting agile mindset in software development: (1) push for continual/incremental The process of releasing the product or its new versions may pose hazards for The PLM process, depicted in Fig. 1, is sequential and consists of multiple Beneﬁts from the adoption of best practices for the PLM process have been improvement: small steps, safe investment, (2) experimenting, (3) evidencebased approach. 1. Improved coordination of eﬀorts in various teams: good practices are appre- 2. Instead of a ﬁxed, imposed policy, the organization focuses on continual 3. Promotion and implementation of continual learning, by constantly reﬁning 4. Products pass the PLM gates faster and more eﬀectively. The process of adopting the best practices framework into the PLM process has not ﬁnished yet. However, the early results are promising and show the versatility of the framework. Implementing the outcomes of process improvement initiatives is complex and comprises several stages. In the G the distributed structure of the project and the independence of the software teams. In the paper, we have presented observations from the adoption of the best practices for software teams, both from the teams’ point of view, as well as from the managerial perspective. This shows the potential of the best practices framework, both as a generic tool aimed to support the software organizations in their improvement eﬀorts, and as a set of elaborated recommendations. We show that practices need to be adjusted to the local context to match the need and setting of a speciﬁc team and recommend how they could be monitored and reﬁned. We plan to continue the work towards summarizing the entire SPI eﬀorts in G The perspective of the PLM team is slightly diﬀerent: ciated, bad practices are improved or eliminated. improvement and experimenting with processes. the best practices.