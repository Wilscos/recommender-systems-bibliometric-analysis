Reorganizing implicit feedback of users as a user-item interaction graph facilitates the applications of graph convolutional networks (GCNs) in recommendation tasks. In the interaction graph, edges between user and item nodes function as the main element of GCNs to perform information propagation and generate informative representations. Nevertheless, an underlying challenge lies in the quality of interaction graph, since observed interactions with lessinterested items occur in implicit feedback (say, a user views micro-videos accidentally). This means that the neighborhoods involved with such false-positive edges will be inuenced negatively and the signal on user preference can be severely contaminated. However, existing GCN-based recommender models leave such challenge under-explored, resulting in suboptimal representations and performance. In this work, we focus on adaptively rening the structure of interaction graph to discover and prune potential false-positive edges. Towards this end, we devise a new GCN-based recommender model, Graph-Rened Convolutional Network (GRCN), which adjusts the structure of interaction graph adaptively based on status of model training, instead of remaining the xed structure. In particular, a graph rening layer is designed to identify the noisy edges with the high condence of being false-positive interactions, and consequently prune them in a soft manner. We then apply a graph convolutional layer on the rened graph to distill informative signals on user preference. Through extensive experiments on three datasets for micro-video recommendation, we validate the rationality and eectiveness of our GRCN. Further in-depth analysis presents how the rened graph benets the GCNbased recommender model. • Information systems → Recommender systems. Graph Neural Network, Multimedia Recommendation, Implicit Feedback With the high prevalence of the Internet, people have access to large amounts of online multimedia content, such as movies, news, and music. In multimedia content sharing platforms (e.g., Instagram, YouTube, and Tiktok), multimedia recommendation has been a core service to help users identify items of interest. At the core of the recommendation is exploiting multimedia contents of items and historical behaviors of users (e.g., views, clicks) to capture user preference and consequently suggest a ranking list of items. Learning informative representations of users and items has become a central theme in multimedia recommender systems. Early works like VBPR [9] and ACF [4] integrate multimedia contents (e.g., visual features) and ID embeddings of items together in the traditional collaborative ltering (CF) framework. However, these models limit to explore underlying relationships among users and items, since only direct user-item interactions are taken into consideration. More recently, inspired by the success of graph convolutional networks (GCNs) [13,19,21,36], some eorts [30,32,33,38,40] have been made to organize user behaviors as a bipartite user-item graph and integrate multi-hop neighbors into representations. Such GCN-based recommender models benet from powerful representation ability of GCN and have achieved the state-of-the-art performance. Despite their remarkable performance, we argue that the xed interaction graphs built upon implicit feedback are highly likely to contain noisy behaviors of users. For example, a user might click some videos shared by her/his friends or even accidentally, while she has no interest in these videos. Such false-positive behaviors appear in the interaction graph as edges between user and item nodes, which are treated equally with the truepositive interactions. When performing information propagation of GCNs, the neighborhoods around these false-positive edges will be inuenced negatively and the signals on user preference can be severely contaminated. This is consistent to the vulnerability of Figure 1: Illustration of information ows (denoted as dashed curve) caused by true-positive and false-positive interactions in the GCN-based recommender models. GCNs against structure perturbations [3,43]. Therefore, we further argue that the performance of GCN-based recommendation can be signicantly degraded by adding a few edges of false-positive interactions in the graph. Running Example.Figure 1 illustrates how the false-positive feedback disturbs the information propagation of the GCN-based recommender model. In the left subgure, the clean graph involves user-item connections, each of which indicates that a user is truly interested in the item (i.e., solid black lines like(𝑈, 𝐼)); whereas, the graph in the right side additionally includes user interactions with less interested items (i.e., solid grey lines like(𝑈, 𝐼)). Along with the graph structures, GNN-based recommenders conduct the information propagation mechanism [7,16,31] to distill collaborative signal and generate collaborative embeddings of users and items. However, due to the structure dierence, not only signal pertinent to user preference (i.e., dashed blue curves like(𝑈, 𝑈)), but also noisy information (i.e., dashed grey curves like(𝑈, 𝑈)) are aggregated into𝑈’s collaborative embeddings. Further stacking more graph convolutional layers will introduce more noisy signal from multi-hop neighbors. As a result, the representations can be contaminated, and the performance of GNN-based recommenders can be severely degraded. Present Work.To tackle this challenge, we aim to identify and prune the edges that are potential false-positive interactions. Towards this end, we develop a new model, Graph-Rened Convolutional Network (GRCN), which exploits the rich content of items and historical behaviors of users to adaptively rene the structure of interaction graph. It consists of three components: graph rening, graph convolutional, and prediction layers. Specically, the graph rening layer hires the neighbor routing mechanism [24] to rene a prototypical network, highlighting the user preference towards a item prototype w.r.t. content in individual modalities. Intuitively, for a given user, an anity between the target item and her/his prototype reects the condence of the target item being true positive in each modality. Then a pruning operation is adopted to prune the edges according to their anity scores, to corrupt the propagation of their noisy signal. Built upon the rened interaction graph, we apply a graph convolutional layer to obtain the high-quality collaborative embeddings of users and items. Finally, in the prediction layer, we predict how likely a user adopts an item by calculating the similarity between their representations. To demonstrate our proposed method, we conduct extensive experiments on three public datasets. Empirical results validate that our proposed model outperforms the state-of-theart baselines like MMGCN [38], DisenGCN [24], and GAT [31]. Moreover, the visualization of the learned user and item embeddings oers a reasonable explanations on why the graph rening operations boosts the GCN-based recommendation method. In a nutshell, our contributions are summarized as follows: (1)We explore the inuence of implicit feedback to the GCN-based recommendation model. To the best of our knowledge, this is the rst attempt to solve the implicit feedback problem against the high-order connectivity. (2)We develop a new method GRCN, which adaptively renes the structure of user-item interaction graph to harness the applications of GNNs in recommendation tasks. (3)Extensive experiments in three real-world datasets validate the rationality of our assumptions and the eectiveness of our method. Our codes are available in https://github.com/ weiyinwei/GRCN. Suppose there are numbers of historical interaction records (i.e. implicit feedback) between users and items. We collect a setU of𝑁users and a setIof𝑀items from the records. Beyond the interaction signal, the multimodal features of items are extracted from their content involving the visual, acoustic, and textual modalities, which are denoted as𝑣,𝑎, and𝑡, respectively. For a item𝑖 ∈ I, we denote its feature vector asi∈ R, where 𝑚 ∈ M = {𝑣, 𝑎, 𝑡 }is the indicator of multiple modalities and𝐷is the dimension of the vector. To conduct the graph convolutional operations, we construct a user-item interaction graphG = {E, A}, which follows the GCNbased recommendation [33,38]. In particular,E ∈ R denotes the trainable embedding matrix of nodes (i.e. users and items), where𝐷represents the dimension of the embedding. And, A ∈ Ris the symmetric matrix reecting the connections of user and item pairs. Given a user𝑢 ∈ Uand a item𝑖 ∈ I, we denote A= 1 if 𝑢 has interacted with 𝑖; otherwise, A= 0. In this section, we detail our proposed model. As illustrated in Figure 2, the model consists of three components: 1) the graph rening layer that adjusts the graph structure by identifying and pruning the noisy edges in interaction graph; 2) the graph convolutional layer which performs the graph convolutional operations on the rened graph to enrich the embeddings of items and users; and 3) the prediction layer that infers the interaction of each user and item pair. 2.2.1 Graph Refining Layer. To rene the structure of constructed interaction graph, we work under the reasonable assumption that the content of item belonging to false-positive interaction is far from the user preference. Therefore, we introduce the prototypical network to learn user preference to the content information, and then prune the noisy edges according to the condence of edges being the false-positive interactions. Figure 2: Schematic illustration of our proposed model. It consists of three components, namely graph rening layer, graph convolutional layer, and prediction layer. Prototypical Network. Intuitively, each user preference could be learned from the content of items which directly connect to the user node in the user-item graph. However, since there are some noisy edges in the graph, it is hard to immediately model the user preference with the neighbor nodes. Inspired by the idea of prototype learning [29], we regard the user preference as her/his prototype in a metric space and harness a prototypical network to approach it. For this goal, the content signal of item is projected into a metric space to distill the informative features related to the user preference, as where𝑙𝑒𝑎𝑘𝑦_𝑟𝑒𝑙𝑢(·),W∈ Randb∈ Rdenote the activation function [25], trainable weight matrix and bias vector, respectively. And𝐷is the dimension of distilled feature vector¯i. Then, we introduce the neighbor routing mechanism [24] into prototypical network, to approach the prototype w.r.t. representation of user preference. Given a user, with the iterative routing operations, her/his representation is adjusted by jointly analyzing her/his similarities to its neighbors. To facilitate the description, we elaborate on the process in the single modality and do the same operations on the others. In the initial iteration, we dene a trainable vectoruto represent the preference of user𝑢 ∈ U. And, we conduct the inner product between user preference and item features to calculate their similarity, formally, where𝑝denotes the similarity between𝑢and𝑖. A higher value suggests that the content signal more informative to the user preference modeling. In addition,N (𝑢)is used to represent the set of neighbors of node 𝑢 in the user-item graph. Following this, we tune the representation of user preference in the metric space via combining the weighted sum of its neighbors’ feature vectors. It is formulated as, whereuis the user representation after one iteration operation. Moreover, we normalize it to avoid its scale of increasing with iterative operations. With the iteration𝑡 =2, . . . ,𝑇, based on the output of previous iteration, the user representation is adjusted towards the prototype of her/his preference, which is recursively formulated as: Finally, it outputs user preference to the item content, as¯u = u. In what follows, we use¯uto denote the user preference to the content information. Pruning Operations.To identify noisy edges, we score the anity between user preference and item content to measure the condence of the corresponding edge being true-positive interaction in each modality. Then, we integrate the scores of each edge in multiple modalities to yield the weight and assign it to the edge, which implements the pruning operations in a soft manner. For each modality, with the obtained user preference and distilled item features, we calculate the relative distances between them in two directions. It is formulated as, where¯𝑠and¯𝑠are the scores reecting the anities between ¯uand¯iin 𝑚-th modality. To integrate the multimodal scores, we dene a base vector for each user or item, as follows: where𝝆denotes the base vector. Elements of the user’s base vector are used to measure her/his relative preferences to the dierent modalities. For the item’s base vector, each element represents the importance of content signal in the corresponding modality to the item representation. Incorporated base vectors, the weights for the edges are computed by fusing the multimodal scores, as wheremax(·)denotes maximization operation selecting the max value. Besides, the combination operation is also able to implement in dierent forms, such as mean and maximization operations without base values. In summary, with the base vector and obtained anity scores, we achieve the weight for each edge to softly prune the noisy edge. 2.2.2 Graph Convolutional Layer. Following the mainstream of GCN-based models [2,33], we treat the graph convolutional operations as the message passing and aggregation. Using the graph convolutional operations, we could model the collaborative signal conveyed by user-item interaction graph. Further, by running the stacked graph convolutional layers, the high-order connectivity information is captured and aggregated. Towards the implicit feedback, the obtained weights for the edges are used to control the passed message. In particular, it corrupts the propagation of noise signal from false-positive interaction. Formally, in the𝑙-th layer, the message passing and aggregation could be formulated as, wheree ∈ Rdenotes the corresponding ID embedding vector. With this operation, we collect the collaborative signal from𝑙-hop neighbors. Stacking L layers, we obtain the embedding at each layer and integrate them: Whereinto,eandedenote the initial ID embeddings from the embedding matrixE, respectively. The enriched embeddings (i.e.e ande) are constituted by combing the embeddings from 0-th layer Table 1: Summary of the datasets. The dimensions of visual, acoustic, and textual modalities are denoted by V, A, and T, respectively. to𝐿-th layer. It encodes and injects the high-order connectivity information into the embedding of each node to enhance the representativeness. 2.2.3 Prediction Layer. To gain the representation of each user or item, we follow the idea that users have varying preferences in dierent modalities [38]. Specically, we concatenate the multimodal features and the enriched ID embedding as a whole vector, formally, where the symbol || means the concatenation operation. Beyond the collaborative signals, the representation contains the user preference to the item content, which contributes to inferring the interaction between users and items. Finally, we conduct the inner product between user and item representations, as where the output𝑦is used to estimate the user’s preference towards the target item. A higher score suggests that the user prefers the item more and vice versa. To learn the parameters of the proposed model, we adopt Bayesian Personalized Ranking (BPR) [28] to conduct the pair-wise ranking. As such, we construct a triplet of one user𝑢, one observed item𝑖, and one unobserved item 𝑗, formally as, where T is a triplet set for training. Therefore, the objective function can be dened as, where𝜙 (·),𝜆, and𝜃represent the𝑠𝑖𝑔𝑚𝑜𝑖𝑑function, regularization weight and parameters of models, respectively. Through conducting extensive experiments on three public datasets, we evaluate our proposed model and answer the following research questions: • RQ1How does our proposed model perform compared with state-of-the-art GCN-based recommendation models? • RQ2How does each design (i.e. prototypical network and pruning operations) aect the performance of our model? • RQ3How does the representation benet from the rened graph? Before answering the above three questions, we describe the datasets, evaluation protocols, baselines, and parameter settings in the experiments. 3.1.1 Dataset. As the micro-video contains rich multimedia information — frames, sound tracks, and descriptions [22,23,27,37], we performed the micro-video personalized recommendation to evaluate our proposed method [14]. Following MMGCN, we conducted extensive experiments on three publicly accessible datasets, including Movielens, Tiktok, and Kwai. The statistics of datasets are summarized in Table 1. • Movielens.The dataset is widely used in the personalized recommendation. To evaluate the multimedia recommendation, researchers extracted keyframes and soundtracks from the video trailers, as well as collected the video descriptions [38]. With some pre-trained deep learning models [1,8,11], the visual, acoustic, and textual features are captured from the keyframes, audio tracks, and descriptions, respectively. In our experiments, we treat all ratings as the implicit feedback of the corresponding user and item pairs. • Tiktok.This dataset is released by Tiktokwhich is a popular micro-video sharing platform. Beyond the interaction information, the visual, acoustic, and textual features are extracted from the micro-videos and provided. • Kwai.As a micro-video service provider, Kwaireleased a largescale micro-video dataset. The dataset contains users, microvideos, and the users’ behavior records with the timestamps. To evaluate the proposed method from implicit feedback, we collected some click records associated with the corresponding users and micro-videos in a certain period. Dierent from the above datasets, the audio and textural features are not given. For each dataset, we used the ratio 8 : 1 : 1 to randomly split the historical interactions of each user and constituted the training set, validation set, and testing. For the training set, we conducted a negative sampling strategy to create the triples for parameter optimization. The validation set and testing set are used to tune the hyper-parameters and evaluate the performance in the experiments, respectively. 3.1.2 Evaluation Protocols. For each user in the validation and the testing sets, we treated all micro-videos she/he did not consume before as the negative samples. During the validation and testing phases, we used the trained model to score the interactions of user and micro-video pairs and ranked them in a descending order. Moreover, following the widely-used evaluation metrics [20,34,35,42], we adopted precision@K, recall@K, and Normalized Discounted Cumulative Gain (NDCG@K) to evaluate the performance of methods. By default, we set𝐾 =10 and reported the average values of the three metrics for all users in the test set. 3.1.3 Baselines. To evaluate the boosting of our proposed model towards the GCN-based recommendation, we compared it with several state-of-the-art GCN-based models for recommendation with implicit feedback. We briey divided them into two groups: message-nonadaptive methods (i.e. GraphSAGE and MMGCN) and message-adaptive methods (i.e. NGCF, GAT, and DisenGCN). For a fair comparison, we employed two graph convolutional layers in our proposed model and baselines. • GraphSAGE[7] We applied GraphSAGE on the user-item graph from implicit feedback to predict the interaction between user and item. With the trainable aggregation functions, the model is able to pass the message along the graph structure and collect them to update the representation of each node. • MMGCN[38] The model learns the model-specic user preference to the content information via the directly information interchange between user and item in each mormaitidality. Based on the assumption that the user prefers the observed item over the unobserved one, it is trained from implicit feedback. • NGCF[33] As the state-of-the-arts GCN-based model of personalized recommendation, NGCF explicitly models and injects the collaborative signal into user and item embeddings. It measures the distance between user and item embeddings to control the passed message. • DisenGCN[24] The method could disentangle the representation of each node into several factors. By dynamically identifying the correlation of factor between nodes, it assigns the dierent weights to edges and aggregates the message to improve the representation of each node. • GAT[31] This method is able to automatically learn and specify dierent weights to the neighbors of each node. With the learned weights, it denoises the information from the neighbors to improve the personalized recommendation. Figure 3: Performance in terms of Recall@10 and NDCG@10 w.r.t. dierent numbers of iterations performing prototypical network on Movielens, Tiktok, and Kwai. 3.1.4 Parameter Seings. The Pytorchand torch-geometric packagesare utilized to implement our proposed model. We used the Xavier [6] and Adam [15] methods to initialize and optimize parameters, respectively. In addition, the learning rate is searched in {0.0001, 0.001, 0.01, 0.1, 1} and regularization weight is tuned in {0.00001,0.0001,0.001,0.01,0.1}. Besides, we stopped the training if recall@10 on the validation data does not increase for 20 successive epochs. For the baselines, we followed the designs in their articles to achieve the best performance. Further, we did the same options and xed the dimension of the ID embedding vector to 64 for all models to ensure a fair comparison. Table 2 reports the performance comparison results. We have the following observations: •Without any doubt, our proposed model consistently achieves the best performance on three datasets. In particular, the method improves over the strangest baselines in terms of Recall@10 by 9.55%, 17.62%, and 11.56% in Movielens, Tiktok, and Kwai, respectively. With the similar graph convolutional operations, the improvements could be attributed to the graph rening. It veries our suggestion that identifying and pruning the noisy edges in the interaction graph benets the GCN-based recommendation model. •Comparing with GraphSAGE, message-adaptive methods, including NGCF, GAT, DisenGCN, and GRCN, yield better results. It implies that the message during the passing and aggregation process conveys some meaningless or harmful signal for the node representation. In other words, the local structure information in the graph constructed by implicit feedback cannot directly reect the user preference pattern. •It is worthwhile pointing that MMGCN slightly outperforms other baselines in several cases. We believe one possible reason is that MMGCN suciently leverages the multimodal information extracted from items to represent the user preference. Although the method ignores the perturbations in the structure of graph caused by implicit feedback, it implicitly distills the information during its cross-modalities combination layers. The results on Kwai, which only contains the visual modality, could be used to verify this point. •Obviously, adaptively adjusting the passed message in the graph convolutional operations contributes to the user and item modeling in recommendation with implicit feedback. However, compared with GRCN, other message-adaptive models are suboptimal. We argue the message yielded by these models is corrupted by the graph structure. Specically, the uncertain message totally depending on initial nodes’ ID embeddings is alternately propagated from one node to the other over each edge. Rather, our proposed method measures the anity between user preference and item content to control the message passing before iteratively conducting the graph convolution layers. In this section, we evaluated the designs of our proposed model, especially the graph rening layer. The graph rening layer is devised to model the user preference from content information and rene the interaction graph for optimizing the GCN-based recommendation method. As such, we conducted experiments to evaluate two components in the rening layer, including the prototypical network and pruning operations. 3.3.1 Eects of Prototypical Network. To evaluate the eect of prototypical network on user preference learning, we performed the experiments under dierent numbers of routing iterations. Meanwhile, we compared the proposed model with the variant, marked as GRCN-ID, which discarded the multimodal user preference and item features in the prediction layer and directly predicted the interaction between user and item with only their ID embeddings. As illustrated in Fig 3, we observe that: •With the increasing of iterations, the values in terms of Recall@10 and NDCG@10 are varying. It is indicated that the performance of our proposed method is aected by user preference modeling. •On Movielens and Tiktok, the values are increasing when we iteratively perform the prototypical network. We believe that the user representation is tuned towards her/his preference to the content information, which benets the correlation computing and graph rening. Table 3: Eect of pruning operations on Movielens and Tiktok. (Visual, Acoustic, and Textual denote running GRCN on the visual, acoustic, and textual modality, respectively.) 𝐺𝑅𝐶𝑁0.0621 0.2542 0.2701 0.0175 0.0941 0.0838 𝐺𝑅𝐶𝑁0.0617 0.2477 0.2660 0.0159 0.0854 0.0751 𝐺𝑅𝐶𝑁0.0639 0.2547 0.2750 0.0180 0.0962 0.0868 •For Kwai, the curves of results w.r.t Recall@10 and NDCG@10 tend to decline with the iterative operations. We suggest the phenomenon is caused by the smooth representation of users. In this dataset, the number of average interaction records of a user is much more than the others. Hence, the iterative operations make the representation smooth, which is hard to capture the discriminative features for users. •Obviously, GRCN outperforms GRCN-ID, which benets from the user (item) representation enriched by corresponding user preference (item features). Although GRCN-ID is suboptimal on three datasets, it is still better than the abovementioned GCNbased baselines. Jointly analyzing the performance of baselines shown in Tabel 2, it qualitatively veries the rened graph structure contributes to the GCN-based recommendation model. 3.3.2 Eects of Pruning Operations. To explore the pruning operations, we compared the performance of our proposed model with three dierent implementations. Specically, we adopted the mean and maximization operations without the base value, which are named asGRCNandGRCN, to fuse the multimodal anity scores, respectively. Besides, we compared our model with the hard pruning strategy which is labeled asGRCNand implemented with ReLU function [26] to completely interrupt the message passed from the false-positive interaction. In addition, we conducted GRCN in each modality as a comparison. From the results in Table 3, we have following observations: •In most cases, we observe that the results of three implements are better than that of models within the single modality. It demonstrates that incorporating the information from multiple modalities facilitates the pruning operations, since users have various opinions about the dierent modalities of micro-videos. •Observing the results ofGRCNandGRCN, we nd that the later is superior to the former. Especially, the results ofGRCNsignicantly underperform the model which merely considers the visual modality. It probably implies that the maximization operation is consistent with the relationship among dierent modalities and able to model it. •Both our proposed model and its variantGRCNoutperform the other two implements without the base value. It shows that incorporating the base value is capable of boosting performance, which justies our purpose regarding the base values. Figure 4: Visualization of the learned t-SNE transformed representations derived from GAT and GRCN. The star marks denote the user randomly selected from Tiktok. The link between star and circle means the interaction between them. •As expected, compared with other variants, our proposed model yields the best results. Beyond the multimodal information and base value incorporating, it also makes sense because of the soft pruning operation. Dierent from the hard pruning, pruning operation in a soft manner not only weakens the noise caused by false-positive interaction but enhances the message from truepositive ones. It contributes to rene the graph structure for graph convolutional operations. In this section, we provided several users randomly selected from Tiktok associated with their consumed items. Using the tDistributed Stochastic Neighbor Embedding (t-SNE) in 2-dimension, we visualized their ID embeddings, which are learned from GAT and GRCN, respectively. Besides, we used same color to denote edges from a user node to the nodes of items she/he interacted with. As illustrated in Figure 4, we have two key observations: •From the distribution of nodes in two gures, we nd that the nodes representing the items exhibit discernible clustering around the user nodes in Figure 4(b). It means that GRCN discriminately represent the users, although there are several items consumed by the same users. We attribute this to the graph rening operations assigning dierent weights for edges according to anities between corresponding user preference and item content, which eliminates the noises from false-positive interactions. •By observing Figure 4(a), it is shown that the distribution of users is closer. Theoretically, GAT should be able to model the correlation between user and item and distinguish them with the help of attention mechanism. Unexpectedly, it pulls the nodes of users who consumed the same items closer. The reason I suggest is that GAT heavily aected by the initialization of ID embeddings, which is consistent with the nding [17]. On the contrary, our proposed method is stable and ecient to capture the correlation between users and items. In this section, we review the existing work related to our research, including the recommendation with implicit feedback and GCNbased personalized recommendation. Comparing with the work focusing on explicit feedback [5,18,41], proling the user from implicit feedback is more practical and challenge. Therefore, researchers shift to explore the user-item interaction from implicit feedback data. To address the challenge of implicit feedback, the core is how to distinguish the negative instances from the positive ones. As such, Hu et al. [12] treated the all user’s unobserved item as negative instances and indicated the numerical value of implicit feedback as condence. Besides, Rendle et al. [28] proposed Bayesian Personalized Ranking (BPR) method, which sampled negative instances from the user’s unobserved items to construct the triple of <user, positive item, negative item> for pair-wise ranking. Comparing with the method assigning a uniform weight to each user’s unobserved item, He et al. [10] proposed to weight them based on item popularity and designed a model to eciently optimize with variably-weighted item. Recently, Yang et al. [39] treated the items belonging to user’s high-order neighbors as positive instances and others as negative ones, which enriches the training set to optimize the parameters of proposed graph and matrix factorization (MF) combination model. In terms of the multimedia personal recommendation, He et al. [9] extended BPR method and proposed Visual Bayesian Personalized Ranking (VBPR), which incorporated the visual information to improve the performance. Following BPR method, they used all user’s unobserved items as negative instances and performed the pair-wise ranking operation. Beyond exploring the positive and negative instances from implicit feedback, Chen et al. [4] designed Attentive Collaborative Filtering (ACF) model to capture item- and component-level implicit feedback in the multimedia recommendation. Dierent from the existing studies, we propose to model the user preference to the item content and measure the similarity between them to discover the false-positive feedback from the historical records. Due to the eectiveness in representation learning, graph convolutional network are widely exploited to model the interactions between users and items for personalized recommendation. For instance, Berg et al. [2] formulated the recommendation task as a link prediction problem on graphs and utilized the graph convolutional operation to predict links between user and item. Based on dierentiable message passing on the bipartite graph, they devised a graph auto-encoder framework. Nevertheless, the method is designed for the recommender system with explicit feedback data (i.e. ratings). Towards the implicit feedback, Ying et al. [40] constructed a bipartite interaction graph according to users’ browsing records and developed a large-scale recommendation engine for image recommendation. On the constructed graph, the method jointly conducts the graph convolutional operations and random walks to represent the users and items, which supercharges the eciency on web-scale personalized recommendation. Similarly, Wang et al. [33] constructed the user-item graph, whose edges corresponded to implicit feedback. With their proposed neural graph collaborative ltering (NGCF) method, the collaborative signal conveyed by the edges and high-order connectivity explicit modelled and injected into each user and item embedding. More recently, the GCN-based model has been introduced into multimedia recommendation in implicit feedback settings. Wei et al. [38] constructed the modal-specic bipartite graph with implicit data to model the user preference in multiple modalities. They developed a multimedia recommendation framework, dubbed multimodal graph convolutional network (MMGCN), which represented the user preference in each modality with her/his directly and indirectly connected neighbors. However, these GCN-based recommendation models ignore the eect of implicit feedback. Moreover, with iteratively performing the graph convlutional operations, the disruption of node representation, which is caused by distorting of graph structure, becomes worse. Against this issue, we propose to rene the useritem graph to eliminate its eect in the graph convolutional operations. In this paper, we propose to solve the problem of implicit feedback towards the GCN-based recommendation method. Therefore, we develop a novel model, named Structure-Rened Graph Convolutional Networks, which yields a rened user-item interaction graph for graph convolutional operations. It identies the false-positive feedback and prunes the corresponding noisy edge in the interaction graph. Empirical results on three public benchmarks demonstrate the eciency of our proposed model. To the best of our knowledge, this work is the rst attempt to explore the disadvantage of the GCN-based recommendation caused by implicit feedback. Despite the state-of-the-art performance our proposed model achieved, we believe there is a long distance to solve the implicit feedback problem thoroughly. We attribute the issues caused by implicit feedback to the gap between user preference and behaviors. Beyond the user preference, the motivation why people prefer some items (i.e. user intent) is critical to estimate the user behaviors, but ineciently explored. As such, in future work, we expect to study how to learn and leverage the user intents, in order to provide a high-quality personalized recommender system.