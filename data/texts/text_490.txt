Keywords: cross-validation, predictive performance, machine learning, autocorrelation, spatial, temporal, R. Friedrich Schiller University JenaLudwig-Maximilians-Universität München Spatial and spatiotemporal machine-learning models require a suitable framework for their model assessment, model selection, and hyperparameter tuning, in order to avoid error estimation bias and over-ﬁtting. This contribution reviews the state-of-the-art in spatial and spatiotemporal CV, and introduces the R package mlr3spatiotempcv as an extension package of the machine-learning framework mlr3. Currently various R packages implementing diﬀerent spatiotemporal partitioning strategies exist: blockCV, CAST, kmeans and sperrorest. The goal of mlr3spatiotempcv is to gather the available spatiotemporal resampling methods in R and make them available to users through a simple and common interface. This is made possible by integrating the package directly into the mlr3 machine-learning framework, which already has support for generic nonspatiotemporal resampling methods such as random partitioning. One advantage is the use of a consistent nomenclature in an overarching machine-learning toolkit instead of a varying package-speciﬁc syntax, making it easier for users to choose from a variety of spatiotemporal resampling methods. This package avoids giving recommendations which method to use in practice as this decision depends on the predictive task at hand, the autocorrelation within the data, and the spatial structure of the sampling design or geographic objects being studied. Spatial and spatiotemporal prediction tasks are common in applications ranging from environmental sciences to archaeology and epidemiology. While sophisticated mathematical frameworks have long been developed in spatial statistics to characterize predictive uncertainties under well-deﬁned mathematical assumptions such as intrinsic stationarity (e.g., Cressie 1993), computational estimation procedures have only been proposed more recently to assess predictive performances of spatial and spatiotemporal prediction models (Brenning 2005, 2012; Pohjankukka, Pahikkala, Nevalainen, and Heikkonen 2017; Roberts, Bahn, Ciuti, Boyce, Elith, Guillera-Arroita, Hauenstein, Lahoz-Monfort, Schröder, Thuiller, Warton, Wintle, Hartig, and Dormann 2017). Although alternatives such as the bootstrap exist since some decades (Efron and Gong 1983; Hand 1997), cross-validation (CV) is a particularly well-established, easy-to-implement algorithm for model assessment of supervised machine-learning models (Efron and Gong 1983, and next section) and model selection (Arlot and Celisse 2010). In its basic form, CV is based on resampling the data without paying attention to any possible dependence structure, which may arise from, e.g., grouped or structured data, or underlying environmental processes inducing some sort of spatial coherence at the landscape scale. In treating dependent observations as independent, or ignoring autocorrelation, CV test samples may in fact be heavily correlated with, or even pseudo-replicates of, the data used for training the model, which introduces a potentially severe bias in assessing the transferability of ﬂexible machine-learning (ML) models. This CV bias is well-known in spatial as well as non-spatial prediction (Brenning 2005; Brenning and Lausen 2008; Arlot and Celisse 2010; Roberts et al. 2017) and in forecasting (Bergmeir, Hyndman, and Koo 2018). It is most easily understood from a predictive modeling perspective by focusing on the question of where (and when) the model should be used for prediction. In crop classiﬁcation from remotely-sensed data, for instance, learning samples routinely contain multiple grid cells from a sample of ﬁelds with known crop type, for instance 2000 grid cells from 100 ﬁelds scattered across a large study region. The purpose of training a model on this particular sample is to make predictions on other, new ﬁelds within the same geographic domain (intra-domain prediction, Brenning 2005) — not within the same ﬁeld, which obviously presents only a single crop type that is already known from the training sample. In this speciﬁc situation it would therefore seem rather unwise to train a model on a simple random subsample of grid cells, and to test it on the remaining data, using other grid cells from the same ﬁelds, as if one wanted to predict within a ﬁeld. The results from this performance assessment would be over-optimistic, and perhaps badly so. To mimic the predictive situation for which the model is trained, one would rather have to resample at the level of ﬁelds, not grid cells (Peña and Brenning 2015). If the model was to be applied to adjacent agricultural regions, i.e., outside the learning sample’s spatial domain (extra-domain prediction, Brenning 2005), it would even seem necessary to resample at a higher level of spatial aggregation, i.e. at the level of sub-regions within the learning sample, in order to realistically mimic the actual prediction task. The CV resampling needed therefore depends as much on the prediction task itself as on the data structure or dependency at hand. While it is not the purpose of this article to recommend speciﬁc resampling schemes for speciﬁc use cases, the example from above may suﬃce to motivate the use of appropriate spatial and spatiotemporal cross-validation techniques, and the need for a uniﬁed framework and computational toolbox that accommodate a variety of prediction tasks that may be applicable to a broad range of application scenarios. mlr3spatiotempcv is such a toolbox. This toolbox, implemented as an open-source R package, builds upon and generalizes several existing toolboxes that have been developed in recent years for more speciﬁc settings (Table 4). The earliest and most comprehensive of these implementations is the sperrorest R package (Brenning 2012), which provides an extensible framework and includes predeﬁned resampling strategies based on geometric blocking, clustering, and buﬀering. In contrast, packages blockCV and ENMeval were developed for block and buﬀer resampling with a focus on species distribution modeling (Valavi, Elith, Lahoz-Monfort, Guillera-Arroita, Valavi, Elith, Lahoz-Monfort, and Guillera-Arroita 2019; Rest, Pinaud, Monestiez, Chadoeuf, and Bretagnolle 2014; Muscarella, Galante, Soley-Guardia, Boria, Kass, Uriarte, and Anderson 2014). However, neither of these have been integrated into established machine-learning frameworks such as mlr/mlr3 (Lang, Binder, Richter, Schratz, Pﬁsterer, Coors, Au, Casalicchio, Kotthoﬀ, and Bischl 2019) or caret/tidymodels (Kuhn and Wickham 2020), and all of them lack support for temporal prediction tasks. The CAST package, in contrast, focuses on spatiotemporal prediction tasks and makes use of some functions of the caret framework (Meyer 2020; Meyer, Reudenbach, Hengl, Katurji, and Nauss 2018). One limitation of all these packages is the sole focus on model assessment, while the proposed implementation within the mlr3 framework also oﬀers seamless integration into model selection and provides parallel execution and enhanced logging abilities. It is worth noting that a spatial crossvalidation library named spacv has recently been developed for Python3, which can be used with the scikit-learn machine-learning framework (Pedregosa, Varoquaux, Gramfort, Michel, Thirion, Grisel, Blondel, Prettenhofer, Weiss, Dubourg, Vanderplas, Passos, Cournapeau, Brucher, Perrot, and Duchesnay 2011). Thus, mlr3spatiotempcv implements for the ﬁrst time a comprehensive state-of-the-art compilation of spatial and spatiotemporal partitioning schemes that is well-integrated into a comprehensive machine-learning framework in R, the mlr3 ecosystem. This package is furthermore equipped with a variety of two- and three-dimensional visualization capabilities. The hope is that this implementation will simplify and facilitate reproducible geospatial modeling and code-sharing across a broad range of application domains. The purpose of this article is to give an overview of the methods implemented in the R package mlr3spatiotempcv. After presenting the conceptual background in the following section, the overall structure of the mlr3spatiotempcv package is outlined. Next, various spatial and spatiotemporal partitioning techniques are contrasted and compared, before their application is demonstrated in a machine-learning model assessment in the following section. Finally, recommendations for the selection of suitable resampling techniques are given. In CV for predictive model assessment, the following formal setting is considered. The interest is in predicting a numerical or categorical response y of an object or instance using a feature vector x = (x L = {(y where l is a real-valued loss function, and the expected value is with respect to the probability distribution of X, the features of an instance (Y, X) drawn randomly from the underlying , x), i = 1, ..., n}. The goal is to estimate the expected value of the performance of population. This is referred to as the actual or conditional performance measure, as it is conditional on L (Hand 1997). The loss function can take a variety of forms such as the misclassiﬁcation error I(Y 6= regression, among many other possible measures. The choice of the performance measure is equally critical as the choice of the estimation procedure, but it is beyond the scope of this contribution to discuss performance measures for regression and classiﬁcation (see, e.g., Hand (1997) for classiﬁcation, and Hyndman and Koehler (2006) for regression and forecasting tasks). Since there is only a sample T of test data drawn from the population, one can only estimate the conditional performance of This representation as a point estimator of perf ( random sample for model assessment to avoid estimation bias. Other estimators than the simple mean may be required when T is not a simple random sample, for instance a stratiﬁed random sample (e.g., Thompson 2012). As always, judgment sampling may lead to uncontrollable bias. Since re-using the learning sample L for testing, i.e. T := L, would yield the over-optimistic resubstitution or apparent performance, CV partitions the sample L into disjoint training and test sets. Speciﬁcally, L is split into k partitions, and a model for i = 1, . . . , k in order to eﬀectively use the entire sample for testing, while keeping training and test sets disjoint at all times. The k-fold CV estimator can therefore be written as where f is a ML algorithm, i.e. a mapping that trains a model sample S. The use of k = 5 or k = 10 folds is most commonly seen in practice, and these preferences are also supported by theory (Bengio and Grandvalet 2004; Cawley and Talbot 2010). The k-fold CV estimator of model performance is a nearly unbiased estimator of the conditional performance measure when the observations were drawn independently (Efron and Gong 1983). Since L, it is sometimes recommended to repeat the estimation using diﬀerent random partitionings (r-repeated k-fold cross-validation) to reduce the inﬂuence of randomness when creating partitions (Vanwinckelen and Blockeel 2012). In traditional CV, the partitioning is based on uniform random resampling, which ignores spatial or temporal autocorrelation or any existing grouping structure as well as the structure of the prediction task, and may result in over-optimistic performance estimates. Several approaches have therefore been proposed in the literature and implemented in software to accommodate a variety of predictive situations (Table 4). ˆfis ﬁtted on L:= L \ L, while Lis withheld for testing. This is repeated Approaches based on spatial blocking (or sometimes called grouping) require either the construction of spatial zones, or the use of pre-existing spatial structures in the data. Let’s refer to these spatial units or blocks as Z as the k = n coordinates (Ruß and Brenning 2010), which we refer to as coordinate-based clustering; or generating the desired number of rectangular blocks as an example of geometric partitioning. The blocks may also be deﬁned by a modeler based on an arbitrary partitioning of the study region based on an external data source, which we refer to as custom resampling. This often used when the data is grouped. For example, when using to multi-level sampling designs or studying spatial objects, it has been proposed to apply LOO at the site level (Martin, Plourde, Ollinger, Smith, and McNeil 2008; Kasurak, Kelly, and Brenning 2011) or, in animal movement studies, at the animal level (Anderson, Turner, Forester, Zhu, Boyce, Beyer, and Stowell 2005). We will broadly refer to such groups of observations as ‘blocks’ in a generic sense, regardless of the shape or origin of the groups. Also, data can be partitioned in feature space instead of geographic space, which has been referred to as “environmental blocking” (Roberts et al. 2017). When n to the zones themselves. In this case, the zone indices 1, . . . , n sized subsets I agricultural ﬁeld level (Peña and Brenning 2015). We would like to emphasize the conceptual distinction between CV at the block level, referring to this scenario, and leave-one-block-out CV, where the blocks themselves deﬁne the CV partitions. Figure 1 gives an overview of the conceptual framework and terminology used in this work. One variant of CV is leave-one-out (LOO) CV, which has long been established in geostatistics (Cressie 1993), sometimes with a focus on the spatial distribution of LOO error (Willmott and Matsuura 2006). Although this is just a special case of non-spatial CV with k = n, it is sometimes also referred to as spatial CV (Willmott and Matsuura 2006). Spatial variants of CV have been proposed that apply an exclusion buﬀer or guard zone to the test locations to separate them from the training data (Brenning 2005; Roberts et al. 2017). One approach that has been proposed for deﬁning a separation distance is to use the range of autocorrelation of model residuals to determine the buﬀer distance, as this seeks to establish independence conditional on the predictors (Brenning 2005; Roberts et al. 2017). It should be noted that k-fold CV with a large value of k, and LOO CV in particular (k = n), is not only very time-consuming since the model has to be trained k times; these models will also be nearly identical since only a tiny fraction of the data is withheld, and therefore estimation bias increases. ‘Pure’ LOO CV is therefore not recommended for machine-learning model assessment. In the purely temporal domain, a special case is to leave out temporal observational units (or time slices; leave-time-out or LTO CV), as in leave-one-year-out CV (Anderson et al. 2005; Brenning 2005). CV and hold-out validation strategies for time series have been discussed more extensively in the forecasting literature, considering also the eﬀects of serial autocorrelation (Bergmeir et al. 2018); these methods are not the focus of the implementation presented in this work. Turning to prediction tasks with spatiotemporal data, various spatial, temporal, or spatiotemporal partitioning strategies are being used, depending on the speciﬁc study objectives. While is much larger than the desired number of folds, k, then a partitioning can be applied the former two ignore the temporal and spatial dimension of the data, respectively, it has also been proposed to leave out random subsets of locations and time points (Meyer et al. 2018) or spatiotemporal clusters (Zhao and Karypis 2002). Details of these and other implementations are outlined in the respective subsections of Section 4. With the increased awareness of the importance of spatial and spatiotemporal resampling strategies and the growing popularity of R in environmental modeling and geocomputation, it is important to equip ML frameworks such as mlr3 with suitable algorithms. In this context, the mlr3 ecosystem stands out as a uniﬁed, object-oriented and extensible framework designed to accommodate numerous ML tasks with a variety of learners, feature and model selection tools, and model assessment capabilities (Lang et al. 2019; Becker, Binder, Bischl, Lang, Pﬁsterer, Reich, Richter, Schratz, and Sonabend 2020). All of these are supported by advanced visualization tools, which are particularly important in a spatial and spatiotemporal setting. Additionally, mlr3pipelines (Binder, Pﬁsterer, Lang, Schneider, Kotthoﬀ, and Bischl 2021) provides a plethora of preprocessing operators to conveniently build ML pipelines which can be resampled, tuned and benchmarked as regular learners. With its integrative approach and its aim to provide long-term support, mlr3 overcomes the challenges of combining multiple specialized packages with poorly standardized interfaces. Issues that practitioners often face include varying argument lists of learners, diﬀerent return values of predict() methods, and support for only speciﬁc feature types. These challenges result in substantial overhead and possible reproducibility issues, which are exacerbated by asynchronous development timelines of diﬀerent components of the used ML pipelines. Within the mlr3 ecosystem, partitioning strategies are represented by their own objects of class Resampling, most of which are available within mlr3 itself (e.g., random CV); other specialized strategies are deﬁned in extension packages such as mlr3spatiotempcv. In the ML pipeline, these objects deﬁne the data splits used for model assessment and selection (hyperparameter tuning) by ML algorithms. Spatial and spatiotemporal partitioning techniques in mlr3spatiotempcv are currently mostly imported and interfaced from other packages, in particular sperrorest, blockCV and CAST (Brenning 2012; Valavi et al. 2019; Meyer 2020), in order to expose them to mlr3 functionality. To reduce dependencies, some methods were re-implemented instead of importing them from the respective upstream packages. Resampling objects in mlr3spatiotmpcv inherit from class mlr3::Resampling and can be created from established object classes for geospatial data in R, including simple features (Pebesma 2018), which facilitates their integration into domain-speciﬁc workﬂows in the geospatial sciences. Support for projected (planar) and unprojected (geographic) coordinate reference systems (CRS) currently varies depending on the partitioning techniques used, since these inherit their behavior from the underlying upstream packages. Partitioning objects in mlr3spatiotemp cv are equipped with generic plot() and autoplot() methods to visualize the created partitions. autoplot() is ggplot2-based and uses ggplot2 (Wickham 2016) in two-dimensional geographic space and plotly (Sievert 2020) in the three dimensional case, i.e., geographic space plus time. While mlr3spatiotempcv solely focuses on spatiotemporal resampling methods and their visualization, other packages such as mlr3spatial or mlr3temporal are planned in the mlr3 ecosystem to provide dedicated spatiotemporal learner and prediction methods. At the most general level, resampling methods are categorized according to the level at which the data is partitioned and resampled (see Figure 1): • Spatial leave-one-out resampling: Each individual observation forms a test set; • Leave-one-block-out CV: Individual blocks are left out as test data, i.e. the number • CV at the block level: Blocks are grouped into k partitions, each of which is used as In this context, a block can refer to an arbitrarily shaped spatial (or spatiotemporal) group of observations, not necessarily a rectangular region. A ﬁner distinction can then be made by looking at how the blocks are derived: • Using a geometry-based approach (rectangular or circular); • Using an unsupervised clustering approach; • Using a custom input, i.e. specifying the blocks with an external grouping variable. In some resampling schemes, separation buﬀers or guard zones can be imposed to separate the training and test data. mlr3spatiotempcv currently implements the partitioning methods identiﬁed in Table 4. Several of the implemented algorithms are themselves versatile toolboxes with multiple options. Comprehensive and up-to-date information can be found in the package’s online documentation (https://mlr3spatiotempcv.mlr-org.com). The following sections give an overview of most implemented partitioning strategies and their visualization options. The available methods are further discussed in section 6. of folds equals the number of blocks; a test fold. Figure 1: Conceptual overview of various spatial partitioning schemas. Starting from unpartioned spatial observations (top left) either a ’spatial block partitioning’ or a ’spatial leave-one-out resampling’ is applied in the ﬁrst step. A spatial block partitioning can further be turned into a ’leave-one-block-out resampling’ or a ’k-fold CV resampling at the block level’. The use of a buﬀer is theoretically possible in any scenario but in practice only oﬀered by speciﬁc method implementations. Users are encouraged to contribute new or missing spatiotemporal resampling methods directly to mlr3spatiotempcv. The already implemented methods can be inspected to get to know the class structure, active bindings and methods. Spatial leave-one-out methods use individual observations in space as test partitions and apply circular buﬀer or guard zones around around these test points to enforce a minimum prediction distance. Leave-one-disc-out resampling modiﬁes this approach to leave out circular regions centered at observation points. Leave-one-out CV with buﬀer and several adaptations for species distribution modeling (Hijmans, Phillips, Leathwick, and Elith 2020) are implemented in the blockCV package as the so-called “buﬀering” method and integrated into mlr3spatiotempcv under the label "spcv_buffer". In species distribution modeling, the response variable can either be recorded as presence/absence data or as presence/background information; both options are supported by this implementation. By default, the dataset contains conﬁrmed presence and conﬁrmed absence observations, i.e. locations where a species was observed and not observed, respectively, and therefore spatial LOO CV in its usual sense can be carried out. Figure 2 shows the Table 1: Spatiotemporal resampling methods available in the mlr3 ecosystem. The "Name" column shows the mlr3 method name as found in the mlr3::mlr_resamplings dictionary. "# pub." indicates the number of studies that were found to have used this resampling technique until May 2021. For each method, up to three randomly selected references were added to the table as footnotes. ﬁrst test fold generated with this method for presence/absence data with a buﬀer distance of 1000 m. R> library("mlr3") R> library("mlr3spatiotempcv") R> task = tsk("ecuador") R> rsmp_buffer = rsmp("spcv_buffer", theRange = 1000) R> autoplot(rsmp_buffer, size = 0.8, task = task, fold_id = 1) <ResamplingSpCVBuffer> with 0 iterations * Instantiated: FALSE * Parameters: theRange=1000 In the presence/background (or presence-only) situation, in contrast, only presence observations are recorded, and all other locations within the study area are referred to as background and considered as pseudo-absences. Presence/background modeling can be enabled with the argument spDataType = "PB". In this situation, the method constructs test folds that are centered at the recorded presence locations, oﬀering two diﬀerent modes of operation. With addBG = TRUE (the default), all background points with a distance of theRange around a test (presence) point are included in the test fold as absence data; note that in this case, there is no separation buﬀer between training and test samples. The addBG = FALSE setting, in contrast, for which no background data is added to the test fold, then contains only one (presence) observation, and only the data at a distance of theRange or greater are included in the training sample, including background data from these areas. Figure 2: Visualization of the spatial buﬀering method from package blockCV (method "spcv_buﬀer" in mlr3spatiotempcv). The buﬀer distance is 1000 m. The application of LOO methods can be computationally expensive since the method cycles through the entire dataset and ﬁts one model for each test fold. Leave-one-disc-out resampling from package sperrorest deﬁnes circular test sets that are centered at sample locations, and optionally excludes a buﬀer zone from the remaining training data. It thus ensures that a minimum separation distance between training and test data is maintained. The number of discs is speciﬁed by the folds argument, which defaults to the sample size n. Sample locations are selected randomly when folds is smaller than n; it is optionally possible to sample with replacement (replace = TRUE). Leave-one-disc-out resampling becomes spatial LOO CV for a radius of 0 m and when each observation is at a unique location. It should be noted that the resampled discs will potentially overlap. Strictly speaking, this straightforward extension of spatial LOO does therefore not establish a disjoint partitioning as used for CV resampling in the traditional sense. R> rsmp_disc = rsmp("spcv_disc", folds = 100, radius = 300L, buffer = 400L) R> rsmp_disc R> autoplot(rsmp_disc, size = 0.8, task = task, fold_id = 1) <ResamplingSpCVDisc> with 100 iterations * Instantiated: FALSE * Parameters: folds=100, radius=300, buffer=400 Leave-one-block-out resampling methods partition the dataset spatially in order to use each of the resulting partitions as a CV test fold. Figure 3: Visualization of one training set / test set combination generated with the leave-onedisc-out method from package sperrorest (method "spcv_disc" in mlr3spatiotempcv). The disc has a radius of 300 m and is surrounded by a 400-m buﬀer. Cluster analysis provides a ﬂexible approach to creating irregularly shaped spatial blocks for spatial resampling. Numerous techniques are available that can potentially be applied to the spatial coordinates of observations, to the features, or to a combination of both. In spatial model assessment, the focus has been on coordinate-based clustering, and speciﬁcally on leave-one-block-out resampling with blocks created by k-means clustering of the coordinates (Ruß and Brenning 2010). Coordinate-based clustering for spatial CV (Ruß and Brenning 2010; Brenning 2012) as implemented in package sperrorest uses the coordinates of all observations to create clusters in the spatial domain with the help of the k-means clustering algorithm. This can be regarded as a leave-one-block-out resampling method, or as a k-fold CV in which each test set is a spatial cluster. This method is referred to as "spcv_coords" in mlr3spatiotempcv. The coordinate-based clustering approach is very versatile as it adapts to irregularly-shaped study areas and ensures that exactly k partitions are created, which are usually of very similar size when the sample locations are spread out evenly. Nevertheless, despite the random selection of initial cluster centers, repeated partitionings may in some cases be nearly identical. Also, k-means clustering may be less suitable for data sets with pre-existing clusters of points and/or with isolated, distant sample locations. When distinct clusters of points are present, as in multi-level sampling, it may be better to deﬁne clusters using a factor variable (see method "custom_cv" in section 4.2.3). R> rsmp_coords = rsmp("spcv_coords", folds = 5) R> autoplot(rsmp_coords, size = 0.8, fold_id = 1, task = task) Leave-one-tile-out resampling is implemented in the "spcv_tiles" method imported from package sperrorest. It uses rectangular blocks that can be rotated (argument rotation), Figure 4: Leave-one-block-out CV based on k-means clustering of the coordinates as implemented in package sperrorest (method "spcv_coords" in mlr3spatiotempcv). and a minimum number or fraction of observations per block can optionally be achieved by iteratively merging small blocks into adjacent blocks (argument reassign in conjunction with min_n or min_frac). Block size or number is speciﬁed via the argument dsplit or nsplit, respectively, and square blocks can be obtained with a single (or two identical) dsplit value(s). Note that the actual number of folds obtained may be smaller than nsplit[1]*nsplit[2] (or smaller than what would be expected based on dsplit) since some blocks may be empty or (optionally) merged into adjacent folds. In the example, there are only eleven folds instead of twelve because the southwestern part of the study area’s bounding box does not contain observations (Figure 5). R> rsmp_tiles = rsmp("spcv_tiles", nsplit = c(3L, 4L)) R> autoplot(rsmp_tiles, size = 0.8, fold_id = 1, task = task) Support for user-deﬁned partitioning strategies is built into mlr3 directly. In this so-called “Custom CV”, users supply a factor variable, each level of which deﬁnes a partition. The factor variable can either be speciﬁed through a factor vector of the same length as number of observations, or by passing the name of a feature within the task (argument col). The following simple example (taken from sperrorest::partition_factor()) creates altitudinal zones that deﬁne the spatial partitions. R> breaks = quantile(task$data()$dem, seq(0, 1, length = 6)) R> zclass = cut(task$data()$dem, breaks, include.lowest = TRUE) R> rsmp_custom = rsmp("custom_cv") R> rsmp_custom$instantiate(task, f = zclass) R> autoplot(rsmp_custom, size = 0.8, task = task, fold_id = 1) Figure 5: Leave-one-block-out resampling from package sperrorest (method "spcv_tiles" in package mlr3spatiotempcv with argument nsplit = c(3,4) indicating the number of rows and columns). Figure 6: Leave-one-level-out (custom) resampling from package mlr3 (method "custom_cv"). A factor variable is used to deﬁne all partitions. Methods which operate at the block level ﬁrst group the observations into blocks and then combine these blocks into CV partitions. In k-fold CV resampling at the block level, there are therefore k partitions, each consisting of 1/k-th of the blocks. The special case in which k equals the number of blocks, CV at the block level simply becomes leave-one-block-out CV, for which dedicated implementations exist (see section 4.2). The "spcv_block" method from package blockCV supports both random and systematic resampling of square blocks with argument selection = "random" and "systematic", respectively; (see ﬁgures 7 and 8). There are additional options for modeling presence-only data, which is a typical use case in species distribution modeling. Users can furthermore supply a user-deﬁned polygon via argument rasterLayer with predeﬁned blocking zones. The size of the square blocks (in meters) are determined by the range argument. Rectangular blocks can be created by specifying the number of desired rows and columns (arguments rows and cols). Due to the non-trivial speciﬁcation of argument range package blockCV provides the helper functions spatialAutoRange() and rangeExplorer() to conduct a data-driven estimation of the distance at which the spatial autocorrelation within the data levels oﬀ (Valavi et al. 2019). According to the package authors, this estimate should then be used for argument range to have a sensible value for the block sizes created in method "spcv_block". It should be noted that rectangular partitioning can be problematic in irregularly shaped study areas as shown in Figure 7 where some of the resulting partitions may contain substantially fewer observations than others. R> rsmp_block_random = rsmp("spcv_block", range = 1000, folds = 5) R> autoplot(rsmp_block_random, size = 0.8, fold_id = 1, task = task, Figure 7: Random resampling of square spatial blocks using the implementation in package blockCV (method "spcv_block" with option selection = "random" in mlr3spatiotempcv). The size of the squares is 1000 m, and four out of the 19 blocks were assigned to the test partition. In systematic resampling, the blocks are numbered row by row, and blocks i + j · folds are assigned to fold i (see Figure 8). This may create undesired patterns when the number of columns is equal to or a multiple of the number of folds. R> rsmp_block_systematic = rsmp("spcv_block", R> autoplot(rsmp_block_systematic, size = 0.8, fold_id = 1, task = task, Checkerboard partitioning is a special case of a systematic block partitioning (selection = "checkerboard") which is why we omitted a practical example for this option. It inherently Figure 8: Sytematic resampling of square spatial blocks using the implementation in package blockCV (method "spcv_block" with option selection = "systematic" in mlr3spatiotempcv). The size of the squares is 1000 m, and four out of the 19 blocks were assigned to this test sample. supports only two folds, making it less appealing than the more commonly used ﬁve- or ten-fold resampling, which achieve larger training set sizes. Although the "cv" resampling strategy in mlr3 performs random, non-spatial partitioning by default, it can also be used for CV at the block level. This is achieved by specifying the “group” column role in a mlr3 Task object, which uses the factor levels as blocks. A complete group or block of observations is therefore assigned to a speciﬁc partition, which consequently honors the grouping structure. In the deprecated mlr package this concept was referred to as “blocking”. In contrast to geometric or clustering-based blocks, the spatial or temporal location is not used explicitly, but rather implicitly through the spatial or spatiotemporal footprint of each user-deﬁned block. The following example uses k-means clustering to generate classes that are used as blocks. To underline the honoring of the groups, a number of groups (eight) that is not a multiple of the number of folds (three) was chosen. The test sets in the ﬁrst and second folds are therefore composed of three groups while the third one holds two groups. R> task_cv = tsk("ecuador") R> group = as.factor(kmeans(task$coordinates(), 8)$cluster) R> task_cv$cbind(data.frame("group" = group)) R> task_cv$set_col_roles("group", roles = "group") R> rsmp_cv_group = rsmp("cv", folds = 3)$instantiate(task_cv) R> print(rsmp_cv_group$instance) R> autoplot(rsmp_cv_group, size = 0.8, task = task_cv, fold_id = 1) Figure 9: Cross-Validation at the block level including predeﬁned groups from package mlr3 (method "cv"). A factor variable is used to deﬁne the grouping. Each class is either assigned to the test or training set. The last method from the blockCV package, referred to as “environmental blocking” (Roberts et al. 2017), makes use of k-means clustering (Hartigan and Wong 1979) in a possibly multivariate space to deﬁne blocks for resampling at the block level. The user can select one or multiple numeric features via argument feature from which the clusters are created. Hereby, k-means will use Euclidean distance. To avoid a potential bias introduced by features with high variance when selecting multiple features, all features are standardized by default. In the following example, the observations are clustered based on the feature “distance to forest” (left sub-ﬁgure of Figure 10), which results in a distance-based zoniﬁcation. This method also allows to use multiple features for clustering. The right sub-ﬁgure of Figure 10 shows the outcome when using “distance to deforestation” and “slope angle”. R> rsmp_env = rsmp("spcv_env", features = "distdeforest", folds = 5) R> rsmp_env_multi = rsmp("spcv_env", features = c("distdeforest", "slope"), folds = 5) R> plot_env_single = autoplot(rsmp_env, size = 0.5, fold_id = 1, task = task) + Figure 10: Environmental leave-one-block-out CV from package blockCV using one (left, "distdeforest") and two (right, "distdeforest" and "slope") predictors to deﬁne blocks in the feature space. Due to feature space clustering observations are not (necessarily) grouped in the spatial domain. Some of the implemented resampling methods operate in multiple dimensions, i.e. in space, time, or space–time. In this section, only examples of these methods in the spatiotemporal domain will be shown. For their application in lower dimensions, usually only either the space or time coordinates need to be omitted from the user input. Meyer et al. (2018) proposed a spatiotemporal resampling method in which a test set is selected and all observations that correspond to the same location or time point are omitted from the training sample. This method is referred to as “leave-location-and-time-out” (LLTO) in package CAST. Additional methods that resample in the temporal and spatial domain only are named “leave-time-out” (LTO) and “leave-location-out” (LLO), respectively. Note that despite their names, LLTO, LTO and LLO are conceptually not leave-one-out methods as they place a certain fraction of observations in the test set, as in ordinary CV. Also, LTO and LLO are conceptually similar to mlr3’s “cv” method with a custom grouping as they perform a CV at the block level using a grouping structure deﬁned by time points (LTO) and locations (i.e., time series; LLO). In this section the cookfarm dataset is used as an example because it has a temporal dimension identiﬁed by the variable “Date”. Fold 1, Repetition 1Fold 1, Repetition 1 mlr3spatiotempcv::autoplot() supports two visualization types for spatiotemporal methods which can be selected via the logical argument plot3D. The heavy lifting of the 3D visualization (i.e. 2D + time) option is done via package plotly. Because a dynamic image cannot be included in this manuscript, static versions, which can be generated by setting static_image = TRUE, are shown (see for example Figure 11). In the LTO method, the time points are resampled into the desired number of folds. In the terminology used in this work, this can be referred to as resampling at the level of time points, which eﬀectively deﬁne blocks. Thus, observations from the same time point are jointly sampled into the same test (or training) fold, with no constraints on the temporal distance between the sampled time points. This method does therefore not implement block CV in the sense of the time series literature. In the cookfarm example dataset, the Date variable was reduced to ﬁve unique levels for better visualization, and then used to create a spatiotemporal regression task in mlr3spatiotempcv (Figure 11). R> data = cookfarm_sample R> data$Date = rep(c( R> b = mlr3::as_data_backend(data) R> task_spt = TaskRegrST$new( R> rsmp_cstf_time = rsmp("sptcv_cstf", folds = 5, time_var = "Date") R> rsmp_cstf_time$instantiate(task_spt) R> autoplot(rsmp_cstf_time, In contrast to LTO, the LLO method randomly resamples locations that may, for example, correspond to time series. The sampled locations form the test partition while the temporal information is ignored (Figure 12). Unlike spatial CV methods that are based on geometric regions or the clustering of coordinates, the sampled test locations include no particular spatial relationship. R> rsmp_cstf_loc = rsmp("sptcv_cstf", folds = 5, space_var = "SOURCEID") R> rsmp_cstf_loc$instantiate(task_spt) Figure 11: Perspective plot of "leave-time-out" CV from package CAST (method "sptcv_cstf" and argument time_var = "Date"). Only ﬁve folds and ﬁve time points were used in this example. Note that the blue dots correspond to ﬁve discrete time levels, which appear as a point cloud due to the viewing angle. R> autoplot(rsmp_cstf_loc, In LLTO, a test set is ﬁrst randomly sampled from the data set, and then all observations that correspond to the same location or time point are omitted from the training sample (Figure 13). LLTO resampling mimics the situation where a model is trained on time series data from a number of locations and time points, and used to predict the time series at other locations and time points that are not included in the training sample. Conceptually, LLTO applies zero-distance buﬀering in both space and time: The buﬀer zones consist of all observations whose distance to the test sample in either space or time equals zero. In a mathematical sense, however, this buﬀering is not based on a valid metric (or distance function) in three-dimensional space (2D + time) as neither the identity of detectability nor the triangle inequality are satisﬁed by the underlying combined ‘distance’ measure. Also note that LLTO does not ‘combine’ LTO with LLO, as neither of these applies a buﬀer zone. The "spcv_cstf" methods LLO and LTO (with only one of space_var or time_var set) require a variable in the dataset which should be used for grouping. The speciﬁcation of the variable(s) which should be used for a spatial, temporal or spatiotemporal grouping is not trivial because the ﬁnal partitioning should, in the optimal case, ensure that the selected groups inherit substantial autocorrelation within themselves and simultaneously diﬀer substantially from other partitions. Also, if the selected variable contains too many groups, the "sptcv_cstf" and argument space_var = "SOURCEID"). diﬀerence within train/test splits may become undesirably high and tend towards a LOO CV (Meyer et al. 2018). R> rsmp_cstf_time_loc = rsmp("sptcv_cstf", R> rsmp_cstf_time_loc$instantiate(task_spt) R> autoplot(rsmp_cstf_time_loc, At present, mlr3spatiotempcv also supports spatiotemporal partitioning using the versatile CLUTO clustering algorithm (Zhao and Karypis 2002). CLUTO is available in R through the skmeans package, which provides an interface to a downloadable compiled library with a restriction to non-commercial uses (see help("ResamplingSptCVCluto", package = "mlr3spatiotempcv") for more information). Due to this restriction and the age of the latest release (14 years at the time of writing) this method is not explained in greater detail. A well-known case study is used to demonstrate the application of spatial and non-spatial resampling techniques for model assessment in mlr3spatiotempcv. The objective of landslide Figure 13: Perspective plot of "leave-location-and-time-out" CV from package CAST (method "sptcv_cstf" and arguments time_var = "Date" and space_var = "SOURCEID"). The grey points are excluded from both the training and the test set in this fold. susceptibility modeling is to predict how prone to landslide initiation a location is. Models are ﬁtted to historical landslide occurrences, but they need to learn generalizable relationships between predisposing variables and the response as opposed to perfectly reproducing or memorizing the historical distribution. This binary classiﬁcation task on landslides in Ecuador (Muenchow, Brenning, and Richter 2012) is available as a built-in task via tsk("ecuador"), but is generated from the learning sample in this example. Random forest is used as a classiﬁer, and the area under the ROC curve (AUROC) as the performance measure. Spatial CV is implemented in the form of leave-one-block-out CV using coordinate-based kmeans clustering to generate irregularly shaped blocks of roughly equal size. This approach is better suited for the irregular shape of the present study area than a rectangular partitioning. Figures 14 and 15 show the contrasting distributions of training and test samples. For demonstration purposes only four CV folds and two repetitions are used. In mlr3, machine-learning tasks with their respective dataset and response variable are represented by objects of class Task. mlr3spatiotempcv’s spatial and spatiotemporal machinelearning tasks are also derived from this superclass. Speciﬁcally, the TaskClassifST and TaskRegrST classes for classiﬁcation and regression tasks require several additional arguments that must be passed as a named list using the extra_args argument: • coordinate_names: Names of the features that represent the spatial coordinates. This • coords_as_features: Whether the coordinates should be used as features; by default • crs: The coordinate reference system of the data as a PROJ string or EPSG code in At ﬁrst all necessary R packages are loaded and a lower verbosity is set to keep the output tidy. A random-number seed is set for reproducibility. is automatically inferred when a sf object is passed. they are not. the format ESPG:<code>. R> library("mlr3") R> library("mlr3spatiotempcv") R> # be less verbose R> lgr::get_logger("bbotk")$set_threshold("warn") R> lgr::get_logger("mlr3")$set_threshold("warn") R> set.seed(42) The task "ecuador" is available as an example task in mlr3spatiotempcv through tsk("ecuador"). To create it manually from a data.frame named ecuador, one would do: R> backend = mlr3::as_data_backend(ecuador) R> task = TaskClassifST$new( Next, the random forest learner ("classif.ranger") is initialized with default hyperparameters and the prediction type is set to "probability" because the model is used for soft classiﬁcation. A set of commonly used learners is available in package mlr3learners (Lang, Au, Coors, and Schratz 2020), including the random forest implementation of Wright and Ziegler (2017). R> library("mlr3learners") R> learner = lrn("classif.ranger", predict_type = "prob") To deﬁne a resampling strategy, the rsmp() function is used to generate a resampling object using four folds and two repetitions following a random sampling logic (“cv”). Next, the created resampling object rsmp_nsp is passed to the resample() function together with the task and learner objects created earlier to execute the model assessment. This is the actual, potentially time-consuming CV estimation. With the present settings, eight random forest classiﬁers are ﬁtted and evaluated in this step — one model ﬁtted on each CV training set. Model performances are calculated from the CV predictions using the AUROC ("classif.auc" in mlr3 notation). R> rsmp_nsp = rsmp("repeated_cv", folds = 4, repeats = 2) R> rsmp_nsp R> rr_nsp = resample( R> rr_nsp$aggregate(measures = msr("classif.auc")) classif.auc 0.7600664 The model assessment is now repeated again using spatial CV resampling, for which the only required change is to replace "repeated_cv" by "repeated_spcv_coords". R> rsmp_sp = rsmp("repeated_spcv_coords", folds = 4, repeats = 2) R> rsmp_sp R> rr_sp = resample( R> rr_sp$aggregate(measures = msr("classif.auc")) classif.auc 0.6100402 Finally, we visualize (two of) the partitions that were used during performance estimation by making use of the generic autoplot() function in package mlr3spatiotempcv (Figure 14). R> autoplot(rsmp_sp, task, fold_id = c(1:2), size = 0.8) R> autoplot(rsmp_nsp, task, fold_id = c(1:2), size = 0.8) If one takes a closer look at the results, the non-spatial CV estimate of AUC (0.76) is substantially higher compared to the spatial CV estimate of 0.64. Since test points in non-spatial CV may be from the same slopes or even the same landslides as the training data, the non-spatial CV result should/can be considered as an over-optimistic estimate of the model’s ability to predict the susceptibility to “new” landslides. Spatial CV, in contrast, provides a better/more accurate measure of a model’s ability to generalize from the training sample — in this case Figure 14: Spatial leave-one-block-out partitioning using coordinate-based clustering to create roughly equally sized polygonal blocks. Due to space limitations only the ﬁrst two folds of the ﬁrst repetition are shown. study, from the speciﬁc hillslopes and historical landslides in the training sample. It is also expected that spatial CV results better represent the model’s transferability to geologically and topographically similar areas adjacent to the training area. The magnitude of the diﬀerence between spatial and non-spatial CV estimates may depend on the dataset, the strength on spatial or spatiotemporal autocorrelation, and the learner itself. Algorithms with a higher tendency to overﬁt to the training set will tend to have a larger spread in such scenarios. The question of which resampling method should be chosen for a prediction task and dataset at hand comes up regularly in practice. Even though there is and most likely will be no deﬁnitive answer to this question, we would like to give some guidance in this section to help ﬁnd an appropriate method. As a general rule, we recommend to use a resampling scheme that (1) mimics the predictive situation in which the model will be applied operationally, and (2) is consistent with the structure of the data. Both aspects are outlined in this section, starting with two concrete modeling scenarios. Although the case study example in section 5 used the "spcv_coords" method for coordinatebased clustering, this should not give the impression that this method is the only method suitable for this example task. In this application setting, we want to assess how well the model generalized from the concrete set of historical landslide occurrences, which is why we ensured that training and test sets contain diﬀerent, “new” hillslopes and landslides. Coordinate-based clustering is particularly appealing in this setting because of its ability to adapt to the irregularly shaped study area of this example. Resampling at the level of subcatchments could have been a viable alternative approach that can be implemented using custom resampling ("custom_cv" method); however, this may result in less balanced sizes of Figure 15: Random (non-spatial) four-fold CV partitioning. Only the ﬁrst two folds of the ﬁrst repetition are shown. test sets as catchment sizes may vary. When the timing of landslides is known (event-based inventories) or multiple inventories have been compiled for diﬀerent time points, it can also be recommendable to additionally sample training and test data from diﬀerent time points, as with the LLTO and LTO (Meyer et al. 2018) or similar methods (Brenning 2005). In other application scenarios such as the crop classiﬁcation example given in Section 1 (Peña and Brenning 2015), the objective is to predict the fruit-tree crop type of ‘new’, unseen ﬁelds within an agricultural region. In this use case we are not at all interested in “predicting” the already known crop type of (other) grid cells within the same agricultural ﬁeld. Also, a model will likely be much better able to predict the crop type within the same ﬁeld from multitemporal remote-sensing data since all crops within that ﬁeld are subject to identical management practices (e.g., use of pesticides, pruning of fruit trees, tree spacing), while ‘new’ ﬁelds may be managed diﬀerently. As a consequence, grid cells from the same ﬁeld should be grouped into a block, and resampling should be done at the ﬁeld level ("cv" method with grouping) to receive an honest estimate of the model’s performance in a relevant predictive situation. If, in contrast, the objective is to apply the model to an adjacent agricultural region (e.g., adjacent county) where the same crop types are present, it may be advisable to use coordinate-based clustering ("spcv_coords" method) to obtain larger, contiguous test regions. In summary, there are various factors that may be considered in judging the suitability of a resampling method: • Will the model be applied to predict ‘new’ outcomes at near or more distant spatial • Will it be applied to predict into the future, or hindcast gaps between spatiotemporal • Is it necessary to impose a separation distance or prediction horizon as a spatial or • How densely are the observations distributed in space and time? Are they more densely locations? observations in the past? temporal buﬀer between training and prediction locations? distributed than the intended spatial or temporal prediction distance? • Is the data naturally grouped, e.g. because of the spatial extent of the studied objects, • With an eye on environmental blocking and extrapolation in feature space, is it in- Based on these criteria users may choose a matching resampling method that is either more restrictive (by discarding nearby observations for fold creation) or more liberal (by not removing observations and eventually ignoring natural grouping patterns). The speciﬁc publications related to the methods integrated into mlr3spatiotempcv may give further advice and provide additional use cases for the application of each respective approach. Users should therefore also refer to publications that are referenced of linked in the help ﬁles of this package or its respective upstream packages. CV is also widely used to assess model performance when tuning the hyperparameters of ﬂexible machine-learning models, and this is also supported by the mlr3 framework. Using the CV methods introduced here, mlr3 can therefore be used to optimized models to show an improved performance in speciﬁc spatial or spatiotemporal predictive setting (Schratz, Muenchow, Iturritxa, Richter, and Brenning 2019). Such an optimization may, for example, result in a reduced maximum tree depth or increased minimum node size in the Ecuador case study, since these hyperparameter settings would result in a stronger generalization and reduced overﬁtting. We recommend using nested CV for this purpose. In nested CV, an “inner” CV is performed on each CV training set, since hyperparameter tuning is an integral part of model ﬁtting that should not be able to use information from the CV test set. In such scenarios it is recommended to use the same spatial resampling method for the inner CV (hyperparameter tuning) as for the outer CV (model assessment) in order to use the appropriate objective function for optimization. See Schratz et al. (2019) for more details as well as chapter 11 of Geocomputation with R (Lovelace, Nowosad, and Muenchow 2019). Since mlr3spatiotempcv harvests already implemented resampling methods from existing R packages, the broader overview presented in this work has highlighted that there are still several gaps that may need to be closed in the future, if speciﬁc use cases require those features. For example, buﬀering, or the use of a spatial or temporal separation distance between training and test sets, is currently only implemented for some methods ("spcv_buffer", "spcv_disc", and "sptcv_cstf" with both space_var and time_var). Its use should, however, be limited to use cases involving a prediction distance, as a buﬀer zone reduces the size of the training sample and introduces the risk of geographically biased training data. CV is often executed repeatedly to reduce the possible inﬂuence of random variability on CV estimates. In general, only methods that involve a random mechanism for generating or resampling blocks are suited for this. In leave-one-block-out CV, coordinate-based and environmental clustering ("spcv_coords", "spcv_env" and "sptcv_cluto") achieve this as their or as a consequence of multi-level (cluster) sampling? tended to apply the model to predict ‘new’ outcomes for unobserved values of predictor variables? clusters are generated based on random seeds. However, experience with "spcv_coords" shows that clusters from repeated executions may in some situations be nearly identical to each other, resulting in very little variability between CV repetitions. While this eﬀect also depends on the variable used for clustering, similar eﬀects could potentially also apply to "spcv_env" and "sptcv_cluto" methods. However, such eﬀects are more diﬃcult to quantify because selected features of these methods are always diﬀerent, in contrast to "spcv_coords" which always uses coordinates for clustering. This issue is even more critical in CV at the block level with "spcv_block" with options selection = "systematic" and selection = "checkerboard" because identical folds are assigned in each repetition. In contrast, "spcv_block" with option selection = "random" avoids this problem. The mlr3spatiotempcv package is the ﬁrst package to bundle and categorize spatiotemporal resampling methods implemented in multiple other packages in R. The available resampling techniques allow users to vary the scale or granularity of the resampled spatiotemporal units as well as their shape and possible buﬀer distance between training and test samples. These settings may account for the speciﬁc characteristics of spatiotemporal prediction tasks, but modelers now have to make the important decision of choosing a method that is adequate for their situation. They are advised to focus on the spatial or spatiotemporal structure of the model’s prediction task, consider the structure of the learning sample at hand, and think about how the autocorrelation between training and test samples might aﬀect their model assessment and selection. The compilation of resampling techniques in mlr3spatiotempcv is by no means complete. Additional methods or parameters may therefore be added in the future as they become available in upstream package or are contributed directly to this package. Spatiotemporal cross-validation as a paradigm is not yet fully established in scientiﬁc workﬂows, although it has been discussed intensively for more than a decade now. We anticipate that making the existing methods easily accessible to users is an important step to foster the acceptance of spatiotemporal cross-validation in the community and to allow modelers to produce bias-reduced model assessments in environmental and ecological studies. R version 4.1.1 Patched (2021-10-16 r81068) Platform: x86_64-apple-darwin17.0 (64-bit) Running under: macOS Big Sur 10.16 LAPACK: /Library/Frameworks/R.framework/Versions/4.1/Resources/lib/libRlapack.dylib locale: [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 attached base packages: loaded via a namespace (and not attached):