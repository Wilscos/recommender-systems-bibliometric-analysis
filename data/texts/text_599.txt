Sustainable consumption aims to minimize the environmental and societal impact of the use of services and products. Over-consumption of services and products leads to potential natural resource exhaustion and societal inequalities, as access to goods and services becomes more challenging. In everyday life, a person can simply achieve more sustainable purchases by drastically changing their lifestyle choices and potentially going against their personal values or wishes. Conversely, achieving sustainable consumption while accounting for personal values is a more complex task, as potential trade-oﬀs arise when trying to satisfy environmental and personal goals. This article focuses on value-sensitive design of recommender systems, which enable consumers to improve the sustainability of their purchases while respecting their personal values. Value-sensitive recommendations for sustainable consumption are formalized as a multiobjective optimization problem, where each objective represents diﬀerent sustainability goals and personal values. Novel and existing multiobjective algorithms calculate solutions to this problem. The solutions are proposed as personalized sustainable basket recommendations to consumers. These recommendations are evaluated on a synthetic dataset, which comprises three established real-world datasets from relevant scientiﬁc and organizational reports. The synthetic dataset contains quantitative data on product prices, nutritional values and environmental impact metrics, such as greenhouse gas emissions and water footprint. The recommended baskets are highly similar to consumer purchased baskets and aligned with both sustainability goals and personal values relevant to health, expenditure and taste. Even when consumers would accept only a fraction of recommendations, a considerable reduction of environmental impact is observed. Sustainable Development Goals [36] (SDG) have been proposed by the United Nations (UN) to describe several sustainability criteria in form of goals, tasks, and scenarios. Environment and society related sustainability goals can be broken down to numerous constraints and objectives [28, 7] that aﬀect everyday decisions, such reduction of CO optimal decision with respect to such constraints and objectives often introduces potential trade-oﬀs, e.g. making a decision that minimizes CO of a certain activity may increase its water footprint. Including personal values, such as preference/taste or budget constraints may introduce even more tradeoﬀs and make the decision process more challenging. Several multi-objective optimization methods that tackle such problems are considered under the umbrella term of Artiﬁcial Intelligence (AI) [19, 29, 1] AI is expected to play a key role [38] in solving complex challenges arising from SDGs. Nevertheless, applying AI may also inhibit sustainability challenges relevant to value-sensitive design, namely challenges related to: (i) unequal distribution of resources, (ii) loss individual of autonomy and privacy, and (iii) increased emissions from calculations [38, 20]. Value-sensitive design of AI systems aims to address such challenges. Consumption is one of the main driving factors of industrial production, and thus has great environmental and societal impact [16]. This impact is the aggregated individual impact of everyday consumer choices. Every day, consumers are urged to take several decisions to fulﬁll their personal goals and values, mainly originating from individual needs and wishes. Shopping decisions often aim to satisfy several criteria, such as the taste, the ability of purchased products to be combined together, available consumer budget, and health implications of consuming the product. Trade-oﬀs arise when optimizing for personal values, e.g. when a consumer needs to decide between a healthier and cheaper product. Such trade-oﬀs are mainly addressed by multi-objective optimization in modern recommender systems [43]. Value-sensitive design can be applied to create systems that support individual decisions when resolving these trade-oﬀs [3]. Following a value-sensitive design indicates that personal values can be incorporated in the system design, often introducing new constraints and objectives to the optimization. Thus, combining value-sensitive design and sustainable decision-making results in even more complex and challenging trade-oﬀ optimization problems. Self-determined systems that are based on retailer data, crowd-sourcing, and expert input, have already been successfully tested in the past. Although the eﬀect of sustainable recommendations on individual purchases is often observed [30, 2, 5], there is little quantitative analysis on the collective impact of more sustainable decisions on emissions, pollution, resource usage, and personal values. Existing analytical models that often estimate such impact do not deal or represent real-world data on individual/microscopic level, but rather consists mostly of theoretical economical and climate models that evaluate sustainability on a macroscopic or societal level [28, 35]. A welfare objective function that includes analytical terms representing satisfaction from consumption and environmental pollution is often optimized [31, 35]. The optimization outcomes are then used in analysis and policy making. Although macroscopic and/or centralized models can provide useful insights, it may not be possible to anticipate for errors in estimation of individual objective functions and system state. Criticism on centralized models often focuses on poor practical applications and potential high estimation errors [6], as well as potential challenges to addressing personal values and morals [13]. Data-oriented approaches that focus on individual/microscopic level can be directly applied in real-world scenarios in the form of mobile applications and website recommender systems [3]. Relevant recommender systems and analyses mainly focus on diets or single product recommendations [1, 34]. The main contributions of the current article are to: (i) propose and formalize a new real-world multi-objective optimization problem for recommendations of personalized sustainable baskets, (ii) create and analyze a novel synthetic dataset based on sustainability and consumer real-world data, (iii) propose effective existing baselines for this problem, and (iv) design and implement a novel deep learning framework for mixed integer programming multi-objective optimization problems. In Section 2 an explicit formalization of the proposed optimization problem is presented. Therein constraints, trade-oﬀs, and objectives originating from value-sensitive design and SDGs are combined to form a multi-objective optimization problem. The proposed dataset structure can be used to generate similar real-world datasets by online retailers to enable valuesensitive sustainable recommendations. Section 3.1 introduces a novel deep learning architecture, termed gradient guided genetic algorithm (G3A), which combines the ability of evolutionary strategies to solve complex multi-objective problems and the ability of Neural Ordinary Diﬀerential Equation Control (NODEC) [2, 5] to eﬃciently and timely control complex processes, such as genetic evolution. Section 4 presents the results of experimental evaluation of G3A and other multi-objective optimization algorithms on the problem discussed in Section 2. Section 5 concludes the article. All relevant data and code for the current article are reported in Sections A and B and will be available online. Appendix Section E summarizes the creation and analysis of the synthetic dataset, which combines consumer transactions and product data from “The Complete Journey Dataset” by the Dunnhumby grocery store [14], emission and resource usage indicators from Ref. [32], and nutrition information from Food Agricultural Organization Food Balance Sheets [24]. Further technical details, such as hyper-parameters, training time, and baseline comparison are found in the Appendix Sections D and E. Value-sensitive sustainable recommendations are formalized as a multi-objective optimization problem of selecting combinations of discrete quantities over N = 132 distinct products. First, an intended basket is deﬁned as the purchased weekly basket, i.e. a vector of non-negative integer product quantities x for a speciﬁc household k at week q. In a real-world application, where the purchased basket is not known, the user may provide an intended basket via a shopping list interface or an e-shop basket interface. For brevity, week q and household k indices are omitted from the basket vector, as the proposed multiobjective optimization calculations do not require values of intended baskets that were purchased in the past or from other households. The intended basket xis considered as the initial solution of the presented problem and is also considered as the basket that represents consumer taste and nutritional goals. For the current study an ordered set C of |C| = 11 of possible recommendation features is considered, where a feature index j = 1 indicates the corresponding feature as shown in Table 2. The synthetic dataset provides coeﬃcients c dian values over all transactions in the dataset and describe the corresponding feature j quantity c one can calculate the total quantity for a speciﬁc feature as When designing the objective functions and comparing recommendations among baselines, often the ratio of total feature quantities between two baskets x is used. In particular, most calculations related to environmental and personal objectives use the ratio of a recommendation towards the intended basket Consumer taste is the ﬁrst personal value that is considered as an optimization objective, which is minimized when the recommended basket x is as similar as possible to the intended basket x basket x der a counterfactual hypothesis, in which the user would consider recommended baskets before purchase. The ﬁrst objective function to minimize is a function of the cosine similarity Relation (3) is minimized by recommending the intended basket. The next personal value considered in optimization is a function of cost. In general, it is assumed that individuals would prefer to minimize expenses and select cheaper baskets that satisfy their taste. Next, the cost ratio between recommended and intended basket costs is calculated as an objective function: The intended basket does not minimize Relation (4), whereas a basket with no products at all would be the optimal solution. Next, the nutritional values of a recommended basket are considered for optimization. For each unit of product i and nutritional product feature j the median nutritional quantity per unit c features are considered j ∈ {3, 4, 5}. The health objective functions use the intended basket nutritional value as a baseline to evaluate the diﬀerence for each nutritional feature between recommended and intended baskets: The intended basket is one solution that minimizes the Relation (5). Collective environmental values are also considered based on the provided data from Ref. [32]. In total, a set of six environmental impact criteria are considered for each product, as shown in Table 2, namely green house gas (GHG) emissions, which contribute to climate change, acidifying pollution that decreases fertility and can cause desertiﬁcation, eutrophication pollution, which destabilizes food chains in ecosystems, water usage that has several environmental eﬀects, stressweighted water usage that takes into account whether the water is taken from ) for a speciﬁc feature j. xx and the target intended xindicates higher likelihood of a purchase unarid/dry lands, and land usage, which is important to resource allocation for farming and deforestation. The median product features per unit are used as coeﬃcients c ratio between intended and recommended basket of each environmental impact feature is considered as an objective function: It is important to note that for the current dataset, there are no negative values for any coeﬃcient c objectives are positive. Unless the intended basket optimizes all of the above objectives simultaneously and is non-empty, then there is no solution that optimizes the above objectives simultaneously. For example this can be shown when removing a single item from an non-empty intended basket. The item removal will decrease the price objective value and also environmental impact objectives, while it will increase the taste objective value. The proposed optimization framework evaluates the recommended baskets across a set C = {1, 2, ...M } of all M=11 diﬀerent objectives presented above. The optimization is performed in a decentralized manner and only uses the intended basket to decide objective function values. The multi-objective problem for M objectives can be summarized as for a set of feasible baskets parameter vector w mended set of baskets X. The goal of such algorithm is to ﬁnd a non-dominated set of baskets. A basket x for all j ∈ C and J dominates x Evolutionary strategies are widely used for multi-objective optimization [11] with M ≥ 2 objectives. A brief overview is illustrated in Figure 1a. Typically each basket, or solution vector ζ value ζ of solutions X xx, then it is referred as non-dominated. ζζ(xxx) ∈ R, where each vector element represents an objective function = J(xxx). Often, such strategies improve a set of an initial population such as the random crossover. Random crossover randomly combines elements from diﬀerent solutions x where δ is sampled from a probability density function δ ∼ f with ﬁnite support [0, 1]. Another probabilistic mechanism is the random mutation, e.g. replacing an element of the solution with a random number sampled from a probability distribution κ ∼ f Each new solution is evaluated based on the corresponding objective vector ζ and a selection of solutions is performed. Typically a non-dominated sorting is performed for the selection of non-dominated solution candidates both from new solutions and the initial population. The non-dominated sorting is performed recursively, i.e. each time a non-dominated set F solutions are assigned to F non-dominated search is performed on the remaining solutions to determine the non-dominated front F to a front. A possible selection mechanism would select all non-dominated solutions, i.e. the solutions in F in a new population of solutions X tation, selection) is repeated until a convergence criterion is met, e.g. no new solutions are preserved in a population after an iteration. Often τ is referred to as a generation. A widely used algorithm that follows the above strategy for multi-objective optimization is the Non-dominated Sorting Genetic Algorithm II (NSGA-II) [10]. Probabilistic strategies are often criticized for slow convergence time [22], especially on high dimensional problems, and dependence on randomness [18, 27]. Recently, deterministic chaos genetic algorithms have been proposed to calculate solutions in a deterministic and seemingly in a more eﬃcient manner [39, 41]. Furthermore, chaotic maps seem very promising for sparse and highly dimensional problems as they can control entropy [18] and the performance of the optimization procedures. For example, genetic algorithms may show improved performance if a logistic map [18] is used to sample initial solutions around the intended basket. Nevertheless, chaos genetic algorithms do not use explicit feedback from the loss function, such as Multi-Objective Natural Evolution Strategies [19] (MO-NES), and often the selection of adequate chaotic maps requires extensive hyper-parameter optimization [18, 27]. This article investigates another potential design, where neural networks are used to perform mutation and crossover operators and/or initialize the population instead of chaotic maps. Neural networks show promising capabilities to learn chaotic maps and strange attractors [26], and back-propagation can be used to learn the parameters of the neural networks and control the chaotic behavior to improve solutions across generations. Next, an overview of G3A is provided based on Figure 1b, but more technical details can be found in the Appendix Section D. An initial population matrix X is calculated by applying the untrained neural mutation from t = 0 to t = T . B solutions are selected during initialization, by sampling the mutation trajectory every ∆t = T/B. During each generation, a population matrix X created, where each row represents a recommended solution. A neural crossover operator is then applied on the population matrix and generates an oﬀspring solution for each solution in the initial population. The main neural network component is a transformer network f hidden layers [37]. Each parent solution x ulation matrix X generates an attention vector g element ˆx maximum attention value from the transformer b = arg max tivation is then applied on the attention values and each selected parent element is used to calculate an “oﬀspring” solution element x Next, a mutation operator neural network u(x(t)) : R a solution x(t) in continuous time t by applying the following neural ODE control A neural ODE solve [8] scheme is used to calculate the continuous time evolution between subsequent genetic generations, e.g. x(0) → x neural network has sinusoidal activation functions in the hidden layer, inspired by the sinusoidal iterator used in Ref. [27]. To select the solutions that are preserved to the next generation, a ﬁnite number of mutated solution is sampled uniformly across time for each solution x predetermined time-steps within the ODE solver. The output activation of the neural network is a Rectiﬁer Linear Unit (ReLU) activation [37], which removes negative product quantities from each solutions. Neural network weights and activation functions generate real-valued solutions. The proposed problems require discrete product quantities in the solution. Therefore, a discretization operation that allows gradient propagation is applied on each solution. A novel discretization scheme, termed fractional decoupling, is used and is described in detail in Section C. This scheme allows for gradient propagation during training, in comparison to rounding operators. A non-dominated sorting is performed across all discretized solutions to determine the best solutions from each trajectory. The mean objective value per with Gaussian Error Linear Unit [21] (GeLU) activation functions as is selected from the b-th parent in the population that received the feature is calculated over all non-dominated solutions, i.e. all samples x each element ζ Mean objective values ζ preferences and guide the algorithm towards non-dominated solutions that are better performing in speciﬁc objective values. To select the B solutions that are used as input population for the next generation, the hyper-volume and nondominated ranks are used [19] as described in the MO-NES baseline in Appendix section D.6.2. More technical details on training schemes, network architectures are found in the Appendix Section D. Two multi-objective optimization strategies are compared with G3A, namely MO-NES and reference point NSGA-II [9] (RNSGA-II). Both baselines are described in more detail in Section D.6. All baselines are evaluated in weekly basket purchases that happen over the course of 85 weeks for 500 households, and in total 28400 intended baskets are considered. In particular, the households are chosen based on their total green house gasses (GHG) emissions, i.e. the top 500 emission producers are selected. G3A is parameterized to generate B = 8 recommendations per intended basket, whereas RNSGA-II and MONES generate B = 10 recommendations per intended basket. The population sizes where chosen after evaluating diﬀerent values. The sizes that generated well-performing solutions eﬃciently were preferred. For each recommendation, a ratio towards the cost, environmental impact, or nutritional quantities of the intended basket are considered. Some of the ratio functions coincide with the proposed objective functions, but this is not the case for nutritional losses, as the normalized MSE showed better convergence, but required scaling. It is important to note that all three baselines were tested on a subset of potential hyper-parameters. Hyper-parameter optimization was performed for several days to the extend that each method was able to solve the problem eﬀectively. From observed models, the best performing parameterization per method was selected. In future work, G3A will be compared against other optimization methods on more established problems to determine performance in terms of optimality. Such a study was out of the scope of this article. First, the ability of baselines to produce non-dominated solutions for the problem is evaluated. Table 4 contains a comparison where all recommendations for an intended basket x and only the non-dominated solutions are kept across all methods. The ratio of total dominated solutions divided by total recommendations per method is calculated. All three baselines produce diverse non-dominated solutions, as they all achieve high mean ratio of non-dominated to total recommended baskets per intended basket. This indicates that the problem can be tackled eﬀectively by all methods. Several recommended baskets per model may have non-preferred objective values. For example, a solution may achieve the optimal value in terms of a nutritional loss and then be selected as a non-dominated solution, although it produces 200% more emissions. Such solutions are discarded for the comparisons in the next sections, i.e. not recommended. A ﬁltering is applied by discarding any solution that has a cost or any environmental impact quantity or cost ratio when cosine_sim(x and environmental impact, nutritional and cost ratios towards the corresponding intended basket are calculated. The mean value of the ratio calculations over all recommendations per model are reported in Figure 2. Figure 2 indicates that RNSGA-II outperforms other baselines in terms of cost, while G3A shows higher performance in terms of nutritional values. MO-NES shows higher performance in terms of cosine similarity. As indicated by the dominance analysis results, all models can provide highly dominant solutions, that potentially specialize better in subsets of objectives. Depending on the design goals of the system or the priority of the individual, a diﬀerent algorithm might be more preferred. Furthermore, all three models can be further altered to include consumer input in which objectives need to be prioritized. For G3A and MO-NES this can be implemented by adding weights and scaling the objective function values before the gradient update. For RNSGA-II this can be achieved by creating reference points that correspond to the user priorities. ) ≥ 1.0. Furthermore, very dissimilar baskets are also discarded, i.e. A sample of 100 intended baskets over a single week is used to determine execution time and calculation GHG emission for each model (see Table 6). Although G3A requires higher computation time and generates more emissions per calculation of recommendations, all models produce emissions and wall clock times are not signiﬁcant. Accepting a single recommendation of any model can justify the emissions of thousands or even millions of calculations of other recommendations. Furthermore, G3A code is still at an experimental level, and better code optimization can be achieved to further reduce calculation times and emissions. To extend the comparison of G3A and estimate the impact on total reduction values, a counterfactual scenario is evaluated. For each model, 5000 counterfactual trajectories are sampled, each trajectory being 86 weeks long. For each trajectory, it is assumed that 25% of all intended baskets are replaced with a recommendation. The recommendation which replaces the intended basket is chosen randomly a considerable reduction of environmental impact compared to the intended basket. For example, deciding to replace 25% of intended baskets with a G3A recommendation leads to a reduction of approximately 35 metric kilo-tons of COeq. or approximately 1 billion litres of stressed freshwater for G3A. The current results indicate that G3A achieves similar performance to RNSGA-II, but by removing less and adding more products. MO-NES instead produces recommendations that have the least impact on the consumer basket. This article showcases a multi-objective approach to sustainable recommendations, where value-sensitive design is also taken into account. The problem of ﬁnding sustainable personalized baskets is evaluated with objectives and constraints derived from real-world data. Existing baselines are compared with a novel gradient guided genetic algorithm (G3A) and results showcase that all considered models produce good solutions to the problem. Even when individuals would adopt a fraction of the sustainable recommendations, a considerable environmental impact can be observed. From a technical perspective this paper introduces a novel multi-objective optimization algorithm that has comparable performance with state-of-the-art baselines on the new task. To make this happen, existing techniques from evolutionary methods are combined with state-of-the art neural network architectures and a novel discretization technique, termed fractional decoupling. This technique allows for eﬃcient gradient propagation when neural networks are applied to mixed integer programming problems, such as the one presented in this paper.