Color modelling and extraction is an important topic in fashion, art, and design. Recommender systems, colorbased retrieval, decorating, and fashion design can beneﬁt from color extraction tools. Research has shown that modeling color so that it can be automatically analyzed and / or extracted is a difﬁcult task. Unlike machines, color perception, although very subjective, is much simpler for humans. That being said, the ﬁrst step in color modeling is to estimate the number of colors in the item / object. This is because color models can take advantage of the number of colors as the seed for better modelling, e.g. to make color extraction further deterministic. We aim in this work to develop and test models that can count the number of colors of clothing and other items. We propose a novel color counting method based on cumulative color histogram, which stands out among other methods. We compare the method we propose with other methods that utilize exhaustive color search that uses Gaussian Mixture Models (GMMs) and K-Means as bases for scoring the optimal number of colors, in addition to another method that relies on deep learning models. Unfortunately, the GMM, K-Means, and Deep Learning models all fail to accurately capture the number of colors. Our proposed method can provide the color baseline that can be used in AI-based fashion applications, and can also ﬁnd applications in other areas, for example, interior design. To the best of our knowledge, this work is the ﬁrst of its kind that addresses the problem of color-counting machine. Automated color extraction is getting more attention in digital art work and design. This includes, but is not limited to, fashion and decoration and vast number of applications, like recommender systems. Digital images are the media that are normally used to mimic real world objects. However, problems of color degradation and the vast number of colors available makes automated color estimation a difﬁcult problem [7, 3]. The ﬁrst step to assist models accurately extract colors is knowing the how many colors are there in a scene or object. While this might initially appear to be quite simple, in reality, it is a challenging problem to overcome. In fact, estimating the number of colors in a scene is highly subjective even for humans (even after excluding protans and deutans; e.g. people with some form of color blindness). Color counting is a highly intelligent task as it requires dual cognitive modes; recognizing colors while discarding spatial information, and counting intelligence. While color counting has long been used to teach toddlers, there are still not enough resources nor models to keep machines on par with toddlers color counting and matching skills. Hence, the computer vision research community has devoted their efforts to extracting colors directly from the images, by skipping the color counting step. In this direction, clustering algorithms have widely been used, [4, 5, 2, 10, 15, 7], such that the number of colors must be known / given a prior. A more recent work proposed a multistage approach to automatically extract the color values; clustering with large number of colors in the ﬁrst stage followed by merging the clustered colors, based on the hue values, in the second stage [1]. Classiﬁcation techniques have also been used to categorize colors as in [11, 14, 13]. Classiﬁcation techniques have the disadvantage that they are limited to a predeﬁned number of tagged colors, and worse, the problem of memorizing the colors and shapes they see at training (i.e. the generalization dilemma). Moreover, treating color modeling as a classiﬁcation will lead to failure of keeping pace with the millions of colors used in images [6]. This work addresses the ”color counting” problem and thus differs from previous methods that jump straight into color extraction. By knowing the exact number of colors, one can easily extract colors from images, as this will make color extraction deterministic. Color images usually suffer from severe distortions distortions. Color printing quality, color interlacing, photographic geometry, amount of light, image compression, and even imaging devices affect how colors appear in images and the amount of noise they may contain. Al-Rawi and Joeran showed in [1] that the colors of a multichnnel (i.e., RGB) image can be modeled as a Gaussian Mixture Model (GMM) prior distribution, which is given by: where N (x|µ, Σ) = and K denotes the number of colors, and the ivector component is characterized by normal distributions with weight φ, mean µand covariance matrix Σ. The color distribution becomes extremely complicated when the clothing item has more than one color and because of the possibility of frequency deviation of colors during the imaging process. In this case, the GMM prior distribution will be given by: where Kdenotes the total number of colors, or model components, such that K= K + K, and Kdenotes the number of new (but fake) colors generated during image acquisition. To simplify notations and without loosing generality, we deffer in what comes below from using the K notation and use K instead. The GMM is also disrupted due to the use of 8 bits for each pixel in the image, as it leads to truncating the pixel values close to the lower-bound and / or upper-bound, i.e. values close to 0 or 255 for an 8-bit per pixel image. Therefore, there will always be some form of incorrectness in color distributions in real-world images containing values close to these extreme values; the so we call truncated tail effect. As aforementioned, GMMs denote the mathematical, and natural, distribution of colors in images. This suggests that one can model colors as a GMM to estimate the correct number of colors. The hypothesis is that the optimal number of colors, K, yields to the optimal 1) score value computed as the per-sample average log-likelihood of the given color values; 2) Akaike’s information criterion (AIC); 3) the Bayesian information criterion (BIC), and 4) the JensenShannon distance (JS-distance) between two GMMs randomly sampled from the given data. Testing these hypotheses requires running exhaustive search processes up to a predeﬁned maximum number of colors in the image; i.e. by varying K from 1 to K. The optimal number of components will correspond to some extreme values of AIC or BIC [12], or JS distance. This is widely known in the multivariate literature as estimating the number of components [8]. However, while the literature shows some success in using these scores to estimate the number of components, these studies mostly rely on simulated data [12]; opposed to real data that has some form of distortion and non-trivial noise, as in the color distribution case. Although the GMMs computational burden is very high, obtaining a correct color count via GMMs would be highly beneﬁcial. We shall refer to this method as CC-GMM. It has been shown in [9] that K-Means clustering can be used to approximate a GMM. Although K-Means clustering is computationally problematic (it is in fact NP-hard), efﬁcient heuristic algorithms quickly converge to a local minima. We will use K-Means clustering as another method to estimate the number of colors in images. We use the opposite of the value of the data (image) on the K-means objective function. We shall refer to this method as CC-KM. Figure 2: Color counting using Gaussian Mixture Model, CC-GMM. Score shown on the y-axis denotes the AIC (Akaike’s information criterion). We estimated the GMM score over K=1, 2,..., 25. The sub-caption #colors=x(T ) denotes the number of colors, where x is estimated and (T ) is the ground-truth. As GMMs are stochastic, running the experiments again will lead to different results each time. Figure 3: Color counting using our proposed method, CC-CH. For each consecutive pair (e.g., a and b), we have the image in (a) and its distribution in (b). The sub-caption #colors=x(T ) denotes the number of colors, where x is estimated and (T ) is the ground-truth. We scaled the images to ﬁt in the ﬁgure; that is, they are of different resolutions. Best viewed in color. We use self-supervised learning to train a deep convolutional neural network (DCNN) for it to work as a color counting model. The DCNN is a classiﬁer, and the self learning is done by randomly generating shapes of clothing and other items that have different colors and shapes. The generator passes the image and the number of colors to the DCNN. We use EfﬁcientNet in PyTorch to model the DCNN. We shall refer to this method as CC-DCNN. In this method, we calculate the histogram of each band of the RGB image. Then, we arrange the histogram as a triplet vector that depends on the extreme values in each channel. We further compress the histogram by removing the outliers, which we deﬁne by the use of Principle Component Analysis (PCA). Our hypothesis in this method is that colored pixels in the image will produce peaks in the cumulative triplet vector which we compute as mentioned above. Removal of outliers is an important step that controls the color count, aimed at removing a few peaks resulting from noise and distortion. The number of peaks will therefore give an estimate of the number of colors in the image. We shall refer to this method as CC-CH Figure 4: Score denotes the JS-distance between two GMMs calculated for the sweatshirt image. We collected a benchmark of 100 different color images of fashion and art articles that have a distinctive number of colors. We use sklearn to model GMMs, and PyTorch for DCNNs. Due to lack of space, we visually demonstrate experiments selected from the results that conform with whole dataset. We ﬁrs use the K-Means algorithm from the sklearn package. The values of K ranges from 1 to 25. The KMeans algorithm, although faster than the GMM, is unsuccessful in estimating the number of colors. This is because the score curve lacks distinctive extreme values that identify the number of colors. In addition, the DCNN has also been unsuccessful in counting the colors. While the DCNN converged well on the training set, it failed on the testing set; which means it has serious overﬁtting issues due to memorizing color features and focusing on the spatial information (shape) and not the targeted objective, which is color count. The GMM approach results in slightly better performance than the two aforementioned methods, yet, it is still far from being accurate as shown in Fig. 2. Moreover, GMMs are also stochastic by nature; for example, over 10 runs on the multi-bar image shown in Fig. 3, estimated color counts are {15, 11, 6, 16, 24, 4, 7, 10, 14, 5}. We present in Fig. 4 the JS-distance between two GMMs for the sweatshirt image, which has four colors. We randomly split the image data into two halves, each used to estimate one GMM, then we sample 100000 samples from each GMM to calculate the distance. The curve has no distinctive behaviour, and the minimum distance is found at K=24. Further experiments with other images are consistent with this conclusion. This indicates that the JS-distance is not effective to estimate the number of colors. There are some other methods that we have tested that also were unsuccessful, and the discussion goes beyond the limit of this work; such as Bayesian Gaussian Mixture Models, Siamese DCNNs, mean of GMMs / K-Menas distributions over several iterations, and probing changes in clusters’ sizes. Our proposed method, CCCH, emerged after exploring all these aforementioned approaches. Results depicted in Fig. 3 show CC-CH is very promising . We can see that it can result in a correct number of colors, or a number close to the correct number of colors in the image. We proposed a novel method to count the number of colors in RGB images. Our cumulative histogram method is not only more accurate than the GMM, but also 100 folds faster. Over the benchmark we used, the average execution time of the GMM is 100 seconds, while the method we propose needed less than 1 second. We implemented the experiments on the CPU and we can still have more reduction in execution time if we are to use the GPU. Furthermore, our proposed method is deterministic and does not depend on some random initialization parameters. That being said, one gets exactly the same answer at every run. The GMMs, on the other hand, need to randomly initialize the parameters of their components. Therefore, GMMs are highly stochastic and one might not be able to replicate the results or even ensure the correct ones. Moreover, our experiences show that color counting via GMMs, although slightly better than K-Means and DCNNs, is incorrect and unreliable. This research was conducted with the ﬁnancial support of European Union’s Horizon 2020 programme under the Marie Skłodowska-Curie Gran Grant Agreement # 801522 at the ADAPT SFI Research Centre at Trinity College Dublin. The ADAPT SFI Centre for Digital Content Technology is funded by Science Foundation Ireland through the SFI Research Centres Programme and is co-funded under the European Regional Development Fund (ERDF) through Grant # 13/RC/2106 P2. This work was also supported by TCHPC (Research IT, Trinity College Dublin).