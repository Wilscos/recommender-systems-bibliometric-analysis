munication technologies, users can share their locations almost anytime and anywhere to acquire the locationaware services, which forms an abundant amount of trajectory data. Location-based social networks (LBSNs), such as Foursquare and Yelp, collect a huge amount of location data from millions of individuals [1, 2]. These trajectory data provide an unprecedented opportunity to study human mobility behavior at scale [3, 4]. With massive mobile phone data, Gonz´alez et al. found a high degree of temporal and spatial regularity in human trajectories [3]. Their radius of gyrations clearly follow a power law distribution, indicating the sample reproducible patterns of human mobility. In a following study, Song et al. measured the potential predictability of human mobility as 93% [5]. Due to the high predictability of human mobility, researchers attempted to model the mobility behavior of the population at urban scale and utilized it to tackle various urban challenges, including trafﬁc congestion mitigation [6–8], air pollution exposure estimation [9], planning of electric vehicles charging behavior [10], control of the epidemics [11, 12]. Prediction of user’s next place to visit is a key in modeling of human mobility, and has attracted increasing attention from researchers [13]. The task aims to predict the destination of next trip for each user. Assuming that a user’s next destination is highly correlated with her recently visited locations, Rendle et al. developed a personalized transition matrix based on the Markov chain to capture the inﬂuence of users’ recently visited venues on the current mobility decision [14]. Researchers also notice that the users’ periodical behavior observed from long-term history trajectory plays a critical role in the decision of next travel [15, 16]. For instance, in a user’s daily routine, she or he is accustomed to going to the library every weekend. Therefore, combining the inﬂuence of users’ longterm and short-term trajectory can beneﬁt the prediction of next location [17, 18]. Feng et al. proposed DeepMove based on an attention mechanism to extract the inﬂuence of the user’s history trajectory information on the current situation and provide a personalized recommendation on locations to users [17]. Manotumruksa et al. proposed a deep recurrent collaborative ﬁltering framework (DRCF) to utilize the location of users who are similar in the historical trajectory to assist the next location prediction. More recently, researchers proposed the CNN-based method and gated network under the RNN-based framework to extract both long-term and short-term preferences of users [19, 20]. Although the prediction accuracy has been gradually improved in the fore-mentioned literature, predicting the mobility behavior of large number of users in complex urban environments is still signiﬁcantly challenging. On one hand, existing studies focused on modeling the mobility patterns at individual level. The collective pattern of the interaction between the population and the space is not clearly modeled in these methods. In the early studies, statistical physicists used historical movement data to discover the collective pattern of humans. For example, Schneider et al. [21] found that more than 90% of residents’ mobile behavior conformed to one of 17 basic network modes (Motif). Alessandretti et al. [22] found that the number of places visited repeatedly by individuals is stable, revealing people’s stable social relations. These studies suggest that statistical physical characteristics are valuable for studying the movement trend of human group level. On the other hand, existing methods for next location prediction usually cascade the embedding of user ID with the latent vector of locations in the long-term historical and recent trajectories to capture the user’s personalized preferences [23–25]. While users have various preferences to different locations, these methods can not directly model such heterogeneity and dynamic change of the preferences. Targeting this weakness, researchers introduced attention mechanism to learn the personalized preference of each user [26]. However, users’ mobility pattern in space and time is not fully explored from their trajectory sequences. In speciﬁc, they focus mainly on exploiting the sequential patterns of user personalised preferences without considering the associated timestamps and geographic information that reﬂect the collective mobility patterns. Therefore, how to reasonably use trajectory data to learn user’s personalized preferences is also the main content of our research. To this end, we propose a novel personalized and group preference guided network (PGNet) to tackle the above issues. The framework is devised to predict each user’s next place to visit via considering her preferences to various locations at both individual and collective level. Fig. 1 illustrates the end-to-end procedure of our learning-based model. PGNet ﬁrst learns users’ personalized features, as well as the group characteristics from the training data, and integrates the urban information into the prediction module. In the testing phase, the well-trained model is used to predict the next location given their current trajectories. Speciﬁcally, we consider several key factors that impact the collective mobility behavior, including geographic environment, distance attenuation, and individual spatial activity characteristics. Among them, the geographic environment determines the spatial distribution of potential visit locations which users can reach; the distance attenuation indicates the relationship between user’s visit frequency and distance; the individual spatial activity characteristics reﬂect people’s potential life habits. Considering the above factors, we design a module that combines prior statistical information and recurrent neural network, namely, the dynamic spatio-temporal dependency module, which can learn the inﬂuence of group preferences on users’ mobile patterns. For learning personalized preferences of each user, we propose a module based on bidirectional long short-term memory networks (Bi-LSTM) [27] and an attention mechanism to capture her dynamic preference. Besides, we propose a novel graph embedding method to represent each location and its categories, which can efﬁciently learn the sequential relation between visited places. It should be mentioned that most previous studies did not take category information into account. In our model, we attempt to use category information to construct a statistical model to study the characteristics of user group activities. Finally, we propose a novel auxiliary loss function to learn the vectorial representation of the target location and improve the prediction accuracy. The network structure is shown in Fig. 2. Our contributions are summarized as follows: (1) We propose a PGNet framework to learn the user’s personalized preferences and group preferences and predict the next place to visit. PGNet framework consists of two parts: (i) dynamic spatio-temporal dependency module that leverages temporal and spatial information to model the group preferences of users; (ii) personalized preference module that uses Bi-LSTM and attention mechanism to capture users’ personalized preferences. (2) For seeking more efﬁcient hypothesis space for location embedding, we devise an auxiliary loss to enhance the similarity between the representations of the predicted and actual next locations. Consequently, the ﬁnal loss function is designed to increase the probability of the actual location and decrease the distance between the predicted and actual locations in the hypothesis space. (3) We design a group preference module in PGNet to model the people’s collective preferences to variant locations during long-term and short-term periods. PGNet captures the long-term and short-term preferences via integrating the prior statistical knowledge of people’s mobility behavior with the encoding of historical and recent trajectories, respectively. (4) We conduct extensive experiments on three realworld datasets in different countries, including two public check-in datasets and a mobile phone dataset, a.k.a. call detail records (CDRs). Experiments show that our model achieves signiﬁcant improvements over the state-of-the-art methods. The purpose of the next location prediction task is to recommend a set of ranked locations for users, where the highest-ranking is the predicted value of the next location. At present, there are two types of methods for this task – conventional (non-deep learning) machine learning-based methods and deep learning-based methods [17]. 2.1 Conventional machine learning-based methods The trajectory prediction task needs to mine the users’ past trajectory information to predict where the users will go. Typically, for this sequence prediction task, we can use a method based on the Markov model and its variants to make predictions. The Markov-based method is mainly to calculate the transition matrix of the location. According to transition matrix, we can predict where the user will go next. For example, Rendle et al. [14] proposed the factorized personalized Markov chains (FPMC), which is a method applying personalized Markov and matrix factorization to learn users’ transition matrix and overall preference. Cheng et al. [28] proposed a method FPMC-LR to obtain users’ personalized preference and realize the prediction of the next location. Excepted for Markov-based model, Alhasoun et al. utilized information from similar strangers for next place Prediction [13]. In this model, they proposed several human mobility similarity metrics used to identify other users with similar mobility characteristics, and proposed dynamic Bayesian network (DBN) model that incorporates the mobility patterns of similar strangers towards better predicting next locations. 2.2 Deep learning-based methods In recent years, deep learning has developed rapidly. Especially, RNN-based methods have attracted increasing attention and been successfully applied to many sequential problems, such as natural language processing, voice recognition, image annotation, and machine translation. So far, researchers have tried to use the RNN-based method for travel information prediction and achieve inspiring results [17, 20, 29–31]. For example, Liu et al. [29] proposed the ST-RNN network, which takes users’ adjacent time and space information as the input of the RNN module to capture the spatio-temporal inﬂuence. Yao et al. [32] established a recursive model of semantic perception (SERM), which learned the embedding of multiple factors (user, location, time) and captured the time and spatial transition regularity of semantic perception. Recently, the attention mechanism has been widely used in various ﬁelds. Feng et al. [17] proposed a model named DeepMove based on attention mechanism and recurrent neural network to capture human mobility. In DeepMove, a multi-module embedding method is adopted to convert sparse features (user, location, time) into a dense representation, and then the historical attention module is used to obtain the most relevant historical trajectory information. However, this method fails to capture the user’s dynamic personalized preferences and barely considers the temporal and spatial dependence of the actual users. Gao et al. [33] proposed a variation-attention-based next location prediction model to overcome the sparsity problem of trajectory data. Wu et al. [26] proposed a model named PLSPL to learn the speciﬁc preference for each user. This method attempts to model category information to predict the next location, but the method does not consider the speciﬁc regularities of human mobility and the sequence interaction inﬂuences. At present, the latest model for predicting the next location is the LSTPM model proposed by [20], which uses contextaware non-local network and geo-dilated RNN to obtain users’ long-term and short-term preferences respectively. We deﬁne userset={U, U, U, ..., U} as a set of LBSN users, and locationset={l, l, l, ..., l} as a set of trajectories, each of which is geocoded by a (longitude, latitude) tuple representing urban information. Each user contains a large number of trajectories. Taking user Uas an example, {l, l, l, ..., l} represents all trajectory data of Uin a period. Because each trajectory corresponds to a category c and a timestamp t, it can be expressed as {q, q, q, ..., q}, where qcontains three attributes (l, c, t). Then we divide each user’s trajectories into multiple sub-trajectories in order, for example, {S, S, S, ..., S} is the trajectory sequence of U, where {S, S, S, ..., S} is his historical trajectory sequence and Sis his recent trajectory. Scan be expressed as {q, q, q, ..., q}, where q has three attributes (l, c, t), and represents recent situation. lis the location that Uhas been recently visited. The purpose of this paper is to study the inﬂuence of historical trajectories and recent trajectories on the current situation q, and predict the top-N of the possible locations of Uat the next timestamp t. In this part, we propose our PGNet model. We begin with an overview, before zooming into the details. 4.1 Overview The overall framework of PGNet is depicted in Fig. 2. Our PGNet characterizes the user’s preference to various places at both personalized and group level, and fuses them into a uniﬁed framework. Specially, we learn the personalized preference of user U from his historical trajectory {S, S, S, ..., S}, which contains longer trajectory data reﬂecting the general preference of U. And different users have different preferences for the same location. Thus we use user-location attention to learn the latent vectors of user U and location l. Firstly, we learn the latent vectors for user U and POI q(which contains location l, category c, and timestamp t) in the multimodal trajectory embedding module. Then we use Bi-LSTM to learn the historical trajectory’s transition relationship, and we compute the important aof each POI qto users. Finally, we integrate the sequence information of POIs to present the user’s personalized preference. As human’s decision of moving is impacted by her periodic lifestyle and recent travel behavior, we use historical trajectory to capture her lifestyle while recent trajectory to capture instant decision. Speciﬁcally, we ﬁrstly learn the latent vectors for S= {q, q, q, ..., q} in the embedding layer, where qcontains the location l, category c, and timestamp t. To better understand user’s check-in behaviors, we feed the concatenated embeddings of (l, c, t) into Long Short-Term Memory (LSTM). Then we use a statistical spatio-temporal physical module to model a user’s historical trajectory and recent trajectory to learn his group preferences. Finally, concat layer is used to combine the outputs of the personalized preference, long and short-term group preference and feed them into the output layer to generate the ﬁnal probabilities of candidate locations. It is a remarkable fact that we proposed a novel graph embedding method to learn the latent vectors of locations and categories. At the same time, in the output layer, we propose an auxiliary loss function to supervise the vectorial representation of the next location and improve the prediction accuracy. 4.2 Multi-modal Trajectory Embedding Module Trajectory sequence usually contains a large amount of human mobility information. Due to the mobile device or the user itself, the trajectory sequence has strong sparseness. Targeting this weakness, we use sequence embedding for this kind of data. For example, in check-in sequence, it contains four different types of attributes, namely user ID, timestamp, location, and location category. We will adopt different embedding methods for these different types of attributes in trajectory sequences. user ID and timestamp. The original user ID and timestamp cannot be directly inputted into the model. We refer to the embedding method mentioned in [17, 34] for these two attributes. As each timestamp tis continuous, which is difﬁcult to embed, we map it into discrete hours. Firstly, we divide one week into 48 slots, where 0-23 slots represent weekdays, and 24-47 represent weekends. Then each hour is represented as a one-hot 48-dimensional vector, where the non-zero entry denotes the index for the hour. Because onehot encoding can’t reﬂect the correlation between sequences, we transform them into Ddimensional dense vectors and represent them as V∈ R. For a user ID sequence, we utilize the same embedding method to map it into a dense vector, the dimension of which is D. The embedding vector is represented as V∈ R. location and location category. In recent years, graph embedding (also known as network embedding) has been applied to many graph related research areas, such as text classiﬁcation [35], detecting an anomaly in ﬁnancial networks or social networks [36, 37], etc. The task of our paper is to predict the user’s next location, and all potential locations that the user could reach can construct a graph. Therefore, we attempt to adopt a graph embedding method to learn the location representation. Firstly, we use the training dataset to construct a directed weighted graph, where the direction is sequential, and weight refers to the frequency of the two consecutively visited locations. Then we use the graph embedding method node2vec [38] to map each location into a low dimensional vector, the dimension of which is D. The embedding vector is represented as V∈ R. We adopt the same embedding method for the location category sequence. The embedding vector is represented as V∈ R, the dimension of which is D . Through this method, we can capture the characteristics of group mobility patterns and location interaction. In the following network training, location and location category embedding will no longer be trained. The embedding of each POI (which contains location, location category, and the timestamp) can be represented as: where ⊕ denotes concatenation, Erepresents the latent vector for each POI. Different from [17, 20] which only learn the latent vector of location, we further consider the context information such as the category of location and the checkin time. 4.3 Personalized Preference Modeling When modeling personalized preferences, an intuitive idea is to learn each user’s location preference. Motivated by this, we propose a user-location attention structure followed by Bi-LSTM to learn the latent representation P of the target user’s personalized preference. As shown in Fig. 3, we ﬁrstly embed all POIs in each historical trajectory S∈ {S, S, S, ..., S}, and user embedding into a lowdimensional vector for a user U. Then a Bi-LSTM layer is used to learn each POI’s high-level representation and sequential dependency. Finally, we compute the importance a of each POI qto users and integrate the sequence information of POIs to present the user’s personalized preference. To capture the user’s high-level representations and sequential dependencies of different locations, it is beneﬁcial to learn future trajectories as well as past context. Different from [17], which used RNN-based variant network LSTM process sequences in sequence order and ignore future context, the Bi-LSTM network can exploit information both from the past and the future. This is important to learn user’s personalized preferences. The calculation process of user’s personalized preferences can be summarized as follows: where Vrepresents the user’s latent vector, ⊕ denotes concatenation representing the combination of the forward and backward outputs, hrepresents the hidden information of the user’s historical trajectory, adenotes the importance of each POI, Pis the ﬁnal representation of personalized preferences of a user U. When predicting the user’s next location, her personalized preferences can reﬂect the user’s general preference. However, the user’s interest in the next trajectory not only follows her personalized preference but also is affected by the group behavior pattern. At the same time, the user’s preference for the next location changes dynamically with time and space. Therefore, we use trajectory data to construct a statistical physical model named dynamic spatiotemporal dependency module, which uses time and spatial information to model user’s group preferences and realizes the prediction of the next location. See Fig. 4 for the illustration of the proposed model. The dynamic spatiotemporal dependency module is comprised of three parts: the dynamic spatial dependency module, the dynamic time dependency module, and the dynamic activity preference module. Dynamic spatial dependency module. Generally, the distance between geographic locations has a great impact on the user’s next location prediction [20]. The statistical analysis of the distance between adjacent locations is shown in Fig. 5. We can observe that the user’s travel patterns completely follow the distance attenuation rule of group mobility. And the higher the cost of long-distance travel, the lower the probability people choose it. That is to say, users tend to visit nearby locations. Based on this observation, this paper proposes a dynamic spatial dependency module to characterize the changing spatial preferences of users when they move. The module can understand the user’s dynamic interest in geographic locations, rather than her preference is ﬁxed over time [39]. When we model the distance preference of users, the key issue is to select the trajectory that has the greatest impact on the recent situation from the history trajectories based on the distance among different locations. Speciﬁcally, we ﬁrstly generate a geo-distance matrix based on the real-world geographic locations and the historical trajectory data, whose values represent the distance between any locations. Then we generate the weight vector between the recent situation and the historical trajectory based on the distance matrix as follows, where d(l, l) is the distance between land l. Finally, we utilize the above generated weight vector to integrate the sequence information of POIs. Speciﬁcally, for the recent situation qof a user, we ﬁrst learn its latent embedding vector before modeling spatial preference. Considering that the historical and recent trajectory have different inﬂuences on the current situation of users, we utilize geo-distance to model long and shortterm spatial group preference, where Hand Hare the outputs of Bi-LSTM and LSTM respectively, representing historical trajectory and recent trajectory information. Pand Prepresent long and shortterm spatial group preference of a user. Dynamic time dependency module. Traditional methods always consider the inﬂuence of time factors on the next location prediction [17, 26]. However, these methods simply learn the semantic relationship of the timestamp sequences and ignore the interaction between the time sequences. For example, most users are accustomed to eating in the cafeteria at 12:00 and 18:00, and drinking coffee in a coffee shop at 15:00 and 20:00. For the users, the location at 12:00 is more related to that at 18:00 rather than 15:00, because both 12:00 and 18:00 are the user’s mealtime. This reﬂects some group regularities in human movement. Moreover, as the user moves, the user’s location preferences at different timestamps are also dynamically changing. Therefore, we propose a dynamic time dependency module to capture the inﬂuence of the user’s historical trajectory information on the recent state in the time dimension. We ﬁrst divide one week into 48 slots, where 0-23 slots represent weekdays, and 24-47 slots represent weekends. We construct a location set to represent the location preference of each slot. For example, T= (l, l, l, ..., l), i ∈ (0, 47) means all locations where the i-th slot appears. Then we calculate the time-correlation matrix. As shown in Fig. 6, time correlation of any two slots is expressed as follows, Finally, we generate the weight vector between the recent state and the historical trajectory based on the timecorrelation matrix, and utilize the weight vector to integrate the sequence information of POIs, where Γis the time correlation between c-th and k-th time slots, α(t, t) is the weight vector between recent state and the historical trajectory. Similar to modeling users’ spatial preferences, we utilize time information to model the long and short-term time group preference of the user, where Pand Prepresent long-term and short-term time group preference of the user. Dynamic activity preference module. Users usually tend to have different activities at different time. Fig. 7(a) and (b) tell us users more tend to work and commute on workdays, while (c) and (d) present users are more inclined to relax on weekends. Users also have different activity preferences at different time on the same day. Based on this, we propose a framework that can characterize the user’s activity preference at different time. It is worth to mention that it is the ﬁrst time to use graphical representation to deﬁne this problem. We attempt to construct a bipartite graph, of which location category and time are the two end nodes, while the correlation between them is the edges of the nodes at both ends. See details in Fig. 8. We deﬁne a bipartite graph as G = (V, E), where V is a set containing two types of vertices: V = V∪ V, V = {c, c, c, ..., c, t, t, t, ...t}. E = {(c, t, w)}, where the weight of the edge is w. wrepresents the weight of cat time t. It is a collection of edges with two different types of vertices at both ends. The task is to learn the user’s activity preference at each timestamp. However, it would be expensive to directly iterate over the bipartite graph. To alleviate this problem, we generate a candidate list of all activities at each moment, and get the correlation between each timestamp and all location categories. Then we generate the weight vector between the recent state and the historical trajectory based on the bipartite graph. where wis the weight of activity c at timestamp t in activity preference bipartite graph. α(c, t) is the weight vector between recent state and the historical trajectory. Finally, we utilize the activity preference bipartite graph to model the long and short-term activity group preference of the user, where Pand Prepresent long and short-term activity group preference of a user. Using the dynamic spatio-temporal dependency module, we can capture the inﬂuence of spatio-temporal factors on users’ long and short-term group preferences, which are represented as follows respectively, 4.5 Multi-supervised Prediction Module After obtaining the representations for personalized preferences, long and short-term group preference, we make use of the softmax function to compute the probability distribution p of the next location as follows: p = softmax(W(P⊕ P⊕ P⊕ V where ⊕ represents the concatenation of personalized preferences with long and short-term group preference, Wis a trainable matrix. Consequently, the index of the largest probability is used as the predicted value of the next location. When training the model, we use negative log likelihood as the loss function. However, in the sequence structure model, the outputted hidden state can more effectively represent the user’s potential interest [40]. As a result, in order to improve the network’s prediction accuracy, we propose an auxiliary loss function to supervise the hidden state of the user’s target location. Our proposed loss function shown in Fig. 9 is deﬁned as follows: where N represents the numbers of the training set, and ε is a hyperparameter. We choose the L2 loss as our auxiliary loss function. ε is used to balance the weight of the prediction and auxiliary loss function. With the help of the auxiliary loss function, the generated hidden vector can better express the user’s interest and increase the accuracy of network prediction. In this section, we proceed to evaluate the PGNet model on three real-world data (two check-in data and one CDRs data). We compare our proposed approach with state-ofthe-art next location prediction models, and discuss the experimental results. 5.1 Datasets We evaluate our model on the publicly available Foursquare check-in data collected from New York City (NYC) and Tokyo (TKY), which are widely used in related studies. In addition, we leverage CDRs data collected from Shanghai to evaluate our model. The check-in data contains the anonymized user ID, location id and its coordinate, location category and timestamp, while CDRs data contains the anonymized user ID, the base station ID and its coordinate, and the timestamp. Thus, we remove the embedding of category information when testing our model on CDRs data. And due to the lack of category information for CDRs, our model cannot be compared with PLSPL method. The checkin dataset collected about 10 months records in NYC and TKY via Foursquare from 12 April 2012 to 16 February 2013. Note that the temporal visitors are removed in checkin datasets via eliminating users those presented for less than two weeks. The CDRs are collected during March 2014 from 1,000 anonymized users. Table 1 presents the details of the three datasets. For the sparse check-in data, we ﬁrst ﬁlter out the users with less than 10 records. Then, we split the trajectory of each user into multiple sub-trajectories at an interval of three days, and merge the two consecutive locations if their time interval is less than 10 mins. Next, we limit the number of sub-trajectories for each user to between 5 and 10. Sub-trajectories with less than 5 records are ﬁltered out, and the sub-trajectories with more than 10 records are further divided into multiple trajectories. Finally, we use 80% of each users’ trajectories as the training set and the rest as testing set. More information about the three datasets is shown in Fig. 10, where (a) represents the distribution of the number of trajectories for each user, and (b) represents the proportion of the number of trajectories in each hour. We can observe from (a) that the NYC and TKY dataset are more sparse than the CDRs dataset. And (b) shows the distributions of TKY and CDRs dataset behave similarly, reﬂecting similar living habits of the inhabitants in Shanghai and Tokyo. 5.2 Metrics For comparing our model with the baselines, we utilize two evaluation indicators: Recall@K and normalized discounted cumulative gain (NDCG@K). Recall@K measures whether there is a correct location among the top K recommended locations. NDCG@K measures the quality of top-K recommended location list. In this paper, we choose K={1,5,10} for comprehensive evaluation. The deﬁnitions Recall@K and NDCG@K are given as follows, where Sdenotes the top-k locations recommended for user u, Srepresents the list of locations visited in the test set, I(·) is an index function, Srepresents the j-th location recommended in S, z is the maximum value in DCG@k, which is a standardized constant. 5.3 Baselines and Settings To verify the effectiveness of our proposed method, we compare PGNet with a classic traditional method and some mainstream deep learning methods: Markov Chain (MC): It is widely used to predict human trajectories. It builds a transition matrix based on past trajectories to generate the probability of future location. In our paper, we use the ﬁrst-order MC method. LSTM: A neural network-based model, which is a variant model of the recurrent neural network, and can efﬁciently process sequence data. Deepmove [17]: A neural network model based on the attention mechanism that leverage each user’s historical and recent trajectory data to learn her preferences. An attention mechanism is used to capture the correlation between longterm and short-term trajectory data. PLSPL [26]: A neural network model to learn the speciﬁc preference for each user, which considers category information into the network for the ﬁrst time. LSTPM [20]: It is the state-of-the-art model for next location prediction, which uses context-aware non-local network structure and geo-dilated RNN to capture users’ long and short-term preferences respectively. For our method, we set the embeddings dimension of users and locations to be D= 40 and D= 500 respectively, and set categories to be D= 50 and D= 10. The dimension of the hidden state is 500. In our model we use Adam which is a gradient descent optimization algorithm to learn all the parameters. We set the initial learning rate and weight of regularization to 0.0001 and 1e-5 respectively. In the training process, we adopt the method of gradient cutting and adjust the learning rate to ensure that the model has the best performance. We take TKY dataset as an example to show the training process of the proposed model. See details in Fig. 11. For other baseline models, we set their parameters to the default values that come with the original paper. 5.4 Result and Analysis The experimental results are reported in Table 2. The best results in each column are highlighted in boldface. It shows that, (1) The proposed model PGNet is compared with the baselines on three datasets, and the overall performance is superior. All the metrics on NYC and TKY datasets are better than the baseline method. On the CDRs dataset, the four measurement indicators are better than all comparison methods. Concretely, for Rec@k on NYC datasets, our method is almost 7.64%-18.85% higher than Markov, 5.75%14.66% higher than LSTM, 2.92%-6.48% higher than DeepMove, 0.96%-2.83% higher than LSTPM. For NDGC@10, our model outperforms Markov, LSTM, DeepMove, LSTPM by 13.73%, 10.14%, 4.84%, 2.33% respectively. Our model also shows better performance than other baselines under all metrics on the TKY dataset. On the CDRs dataset, the DeepMove model performs best on Rec@1 and NDCG@1, and our model followed. Our model is the best under other metrics. The quantitative evaluation demonstrates the superior effectiveness of our method. (2) Among all the methods, the Markov model has the worst performance compared with other deep learning methods on the three datasets. This also shows that the neural network-based method has great advantages compared with the traditional method. (3) PLSPL shows better performance than LSTM on all metrics on NYC and TKY datasets. That is because PLSPL considers the context information such as category to learn the speciﬁc preference for each user. However, it shows slightly poor performance than DeepMove on NYC and TKY datasets. This phenomenon can be explained that PLSPL doesn’t gather useful information from history trajectory based on the current situation. (4) Among the baseline methods, the LSTPM model performs best in terms of most metrics, followed by DeepMove. Compared with the DeepMove model, both our model and the LSTPM model take spatio-temporal factors into consideration, which strongly illustrates that the importance of considering the user’s time and spatial factors when predicting the user’s next location. (5) Although the deep learning method performs well on the check-in datasets, these methods don’t improve the Rec@1 much when comparing with the Markov method on the CDRs dataset. We argue this probably be related to the sparsity of the trajectory data. The check-in datasets are much sparser than CDRs. For sparse data, deep learning methods can capture high-level semantic information while the traditional methods may be limited in this. 5.5 Comparison of model variants In this section, we analyze four variants of PGNet to further evaluate the effectiveness of our model. The four variants are shown as follows. GNet: a variant model which only engages the group preference of users, containing long-term group preference and short-term group preference. PNet: a variant model which only engages the personalized preference of users, removing dynamic spatio-temporal dependency module. L-PGNet: a variant model which engages the personalized preference and long-term group preference of users. S-PGNet: a variant model which engages the personalized preference and short-term group preference of users. The experimental results of the ablation tests are shown in Table 3. Our PGNet outperforms the four variants. Speciﬁcally, (1) PNet performs better than GNet on Rec@1 and NDCG@1, while GNet performs better on other indicators. The reason is mainly on that GNet learns the group behavior pattern of all users. This pattern is generalized and can achieve a rough prediction of the next trajectory, so it performs better on Rec@5, Rec@10, NDCG@5, NDCG@10, while has a poor performance on Rec@1 and NDCG@1. For PNet, it can learn the precise and personalized preference information of each user, so the performances is better on Rec@1 and NDCG@1. This also shows that GNet and PNet can respectively achieve accurate and rough predictions of user trajectories. To further demonstrate the effectiveness of personalized preference and group preference, we compare the weight proportion of them in predicting the next location. As shown in Fig. 12, the user’s personalized preference characteristics have a greater inﬂuence on the user trajectory prediction than the group characteristics. (2) S-PGNet always performs better than L-PGNet. The reason is mainly on that S-PGNet can better capture user’s group preferences based on her recent state. It also shows that the recent trajectory has a greater impact on the current situation. (3) The proposed model PGNet, which is the combination of PNet and GNet, achieves the best performance on all test datasets. It shows that both personalized preference and group preference have positive impact on the user’s choice of the next location. 5.6 Importance of key components in PGNet To better understand the inﬂuence of the node2vec embedding method and auxiliary loss function on network training, we use the NYC dataset to evaluate the performance of each module. As shown in Fig. 13, PGNet is our proposed complete model, PGNet-Node2vec denotes no graph embedding (node2vec) to embed user location and location category in the model, and PGNet-Auxiliary Loss represents that the inﬂuence of the hidden state of the target location is not considered in the prediction module. Fig. 13 shows that our complete model performs best, and other variant models have decreased performance. Among them, the performance of the PGNet-Auxiliary Loss model drops the most, with a drop of 2.68% in Rec@5, indicating that the hidden vector of the target position has a great inﬂuence on the prediction accuracy of the next position. The second is the performance of the PGNet-Node2vec model, which shows that graph embedding training on location and location category can improve model performance. To show the ability of our model to predict next locations at different distances, we examine the distance distribution between the current and the next predicted locations on the three datasets. For each dataset, we compare the actual distances with the distances predicted by the LSTM, DeepMove, and PGNet respectively. Fig. 14 shows that when the prediction distance is short, PGNet has a similar prediction performance with LSTM and DeepMove. While when performing long-distance prediction, PGNet outperforms the LSTM and DeepMove model, and can effectively predict long-distance locations. In addition, DeepMove always outperforms LSTM on the three datasets. CDRs data can especially reﬂect this phenomenon. For the next places locating in less than 20 km, the performance of LSTM and DeepMove is comparable to our model. When the next places are far away, e.g., over 40 km, the performance of LSTM and DeepMove gradually deteriorates. For places locating over 80 km, the distance predicted by the LSTM model has completely deviated from the real distance distribution, and the performance is the worst, followed by DeepMove. In this scenario, the distance distribution of the predicted locations by PGNet matches well with the empirical data. The reasons are mainly that two locations at a long distance may be more similar for the recent state. The LSTM and DeepMove models only learn the sequence relationship of the trajectory and fails to take into account the user’s personalized characteristics, the temporal and spatial information that reﬂects the regularities of group behavior. This could lead to LSTM and DeepMove model being unable to distinguish the two locations, resulting in long-distance jumping of the prediction locations. In this paper, we propose a novel end-to-end deep neural network, PGNet, to predict the next place to visit via considering users’ preferences to various locations at both individual and collective level. In the personalized preference module, we use Bi-LSTM and the attention mechanism to capture the users’ personalized long-term mobility tendency. In the group preference module, we use spatiotemporal and categorical information of the visited places to represent users’ long-term and short-term group preferences. In addition, we utilize a graph embedding method, node2vec, to capture the sequential relation of users’ visited locations and propose an auxiliary loss function to learn the vectorial representation of the target location. The extensive experimental results on three real-world datasets demonstrate the effectiveness of our proposed model. In future work, we will model more heterogeneous information and use graph neural networks to learn the interaction between them to further improve the next POI recommendation performance. This work was jointly supported by the Shanghai Municipal Science and Technology Major Project (2021SHZDZX0102), the Science and Technology Commission of Shanghai Municipality Project (2051102600), and the National Key Research and Development Program of China (2020YFC2008701).