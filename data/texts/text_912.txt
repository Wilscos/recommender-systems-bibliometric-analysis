there is limited understanding of how or why these correlations came to be. Using a corpus of 25 million VirusTotal reports representing over a decade of antivirus scan data, we challenge prevailing wisdom that these correlations primarily originate from "ﬁrst-order" interactions such as antivirus vendors copying the labels of leading vendors. We introduce the Temporal Rank-1 Similarity Matrix decomposition (R1SM-T) in order to investigate the origins of these correlations and to model how consensus amongst antivirus engines changes over time. We reveal that ﬁrst-order interactions do not explain as much behavior in antivirus correlation as previously thought, and that the relationships between antivirus engines are highly volatile. We make recommendations on items in need of future study and consideration based on our ﬁndings. Our work is motivated by two chronic problems in the study of malware, namely malware detection (deciding whether a ﬁle is benign or malicious) and malware family classiﬁcation (determining which of many existing families a malware sample might belong to). These tasks both require labeled data, but new malware samples number in the millions each month [19] and obtaining ground truth labels via manual analysis can take hours of eﬀort per sample [24]. For this reason, the vast majority of works use the aggregated results from a collection of antivirus engines as a source of scalable labeling [26]. For example, a common approach to malware detection is antivirus thresholding, in which some minimum number of antivirus engines in a collection must detect a ﬁle as malicious in order for it to be considered malware [5, 8]. Likewise, plurality and majority voting amongst antivirus engines are popular strategies for performing malware family classiﬁcation [17, 2]. A signiﬁcant issue with these aggregation approaches is that all antivirus engines are treated as independent voters, yet prior work shows that some groups of antivirus engines make highly correlated labeling decisions [9, 26, 17]. As is well attested within the ML literature, the use of highly correlated models provides little beneﬁt [7, 25, 3]. The presence of strong correlations between some antivirus engines likely results in degraded accuracy when these voting methods are used. Although the existence of correlations between antivirus engines is well-documented, there has been minimal study of why they exist. Present explanations include diﬀerent engines created by the same company, products “copying” the results of leading vendors, and vendors sublicensing their technology to others [17, 12]. All of the above explanations can be considered Copyright © 2021 for this paper by its authors. Use permitted under Creative Commons Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 “ﬁrst-order” interactions, since they create a direct link between the labeling decisions of two antivirus engines. To our knowledge, no existing work has empirically conﬁrmed whether ﬁrstorder interactions are the sole cause of the correlations between antivirus engines, or whether more complex, unknown factors are also (at least in part) responsible. An additional consideration overlooked by prior work is the volatile and adversarial nature of the malware ecosystem. Malware authors are constantly attempting to evade detection while antivirus engines are continually forced to develop new detection methods [13]. We hypothesize that the groups of antivirus engines which are highly correlated may themselves change as a function of time. However, we are aware of no prior work which has studied this possibility [14]. Our work does not attempt to explain how correlations between antivirus engines came to exist, but instead seeks to answer questions about the nature of these correlations and how they change over time. In Section 2 we discuss the current state of research on antivirus engine dynamics. In Section 3 we explore consensus amongst antivirus engines and how it has changed over the course of a decade. In Section 4 we introduce the Rank-1 Similarity Matrix decomposition (R1SM), which reveals ﬁrst-order interactions between the constituents of a similarity matrix. The section also discusses an extension to R1SM that uses a neural network over positional embeddings to concurrently decompose a time-series of similarity matrices, which we term R1SM-T. In Section 5 we apply R1SM and R1SM-T to over 25 million antivirus scan reports spanning a decade in order to identify ﬁrst-order interactions between the constituent antivirus engines. Our results indicate that relationships between antivirus engines are more mercurial than previously thought. Finally, in Section 6 we discuss the impacts of our ﬁndings and conclude that future antivirus aggregation strategies should consider approaches similar to a weighted ensemble, where the weights of each antivirus engine are a function of time. Mohaisen and Alrawi [12] is the earliest work we are aware of which systematically evaluates the performance of antivirus engines. The authors observed that the detection results of many antivirus engines follow those of a leading product and hypothesize that this correlation is due to copying or sharing of information. Hurier et al. [6] introduced several metrics for quantifying the level of consensus between a set of antivirus engines. In Section 3.3 we explore how one of these metrics, synchronicity, changes over a ten year period. Kantchelian et al. [9] observed that antivirus labels take time to stabilize and that vendors may change their detections to correct errors, especially false negatives. In a study of 734,000 executables ﬁrst seen on VirusTotal (an online malware analysis service that scans ﬁles with a collection of antivirus engines) between Jan. 2012 and Jun. 2014, the authors measured correlation amongst the detections of a group of approximately 80 antivirus engines. They found that although some groups are highly correlated, antivirus engines lack an overall consensus. Martín et al. [11] surveyed a dataset of 82,866 suspicious Android applications and showed that some antivirus engines also make correlated decisions when labeling malware as a particular category or family. The closest work to ours is Zhu et al. [26], who re-scanned a collection of 14,000 malware samples daily for over a year in order to investigate the dynamics of antivirus detection changes. By observing which antivirus engines changed their detections with similar timing, the authors identiﬁed ﬁve groups of highly correlated antivirus engines. Furthermore, Zhu et al. [26] used inﬂuence modeling to identify antivirus engines which actively change their detections to match other vendors. They determined that label copying is a widespread practice in the antivirus industry. All of these works generally lead to ﬁrst-order conclusions about correlation, but do not study the correlations on the same quantity of data (25 million scan reports) or length of time (ten years) that we consider in this study. Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 For the purposes of investigating antivirus label consensus and how antivirus dynamics have changed through time, we were provided with a dataset of 25,100,286 VirusTotal scan reports [18]. This dataset, which we call VirusShare-VT, was collected by querying the VirusTotal API for all ﬁles in chunks 0 through 233 of the publicly-available VirusShare malware corpus [1]. VirusTotal API queries for the VirusShare-VT dataset were made over the course of six months, from Dec. 2015 to May 2016 [18]. Each report in the VirusShare-VT dataset is a JSON object containing information about a particular VirusTotal scan. Of note is the scan_date ﬁeld, which contains the date and time that a ﬁle was scanned with the collection of antivirus engines. The scan date is often older than the query date, because VT does not re-scan ﬁles for simple queries. The distribution of scan dates is shown in Figure 1, ranging from May 2006 to May 2016. Given the sizeable number of malware samples in chunks 0 - 233 of VirusShare, scanning these samples daily as Zhu et al. [26] did was infeasible. The VirusShare-VT dataset only contains one scan report per sample, and antivirus detections for ﬁles ﬁrst seen shortly before the scan date have likely not stabilized. However, we do not consider these factors to be drawbacks, as they would be typical of most datasets used for antivirus aggregation. The massive size and timescale of the VirusShare-VT dataset makes it ideal for answering our research questions. Throughout this paper we attempt to follow the terminology introduced by Hurier et al. [6] for measuring consensus amongst antivirus engines. Given a set of n antivirus engines A = {a, a, ..., a} and a set of m ﬁles P = {p, p, ..., p of the antivirus engines for this set of malware samples can be arranged into two matrices B and C: An element Bin B is 1 if ﬁle pis detected as malware by engine a detected. An element Cin C is given by the malware family assigned to ﬁle p and Care ∅ (null) if engine adid not scan p portion of the AVClass labeler’s architecture, which can extract family information from antivirus signatures [17]. When AVClass ingests a scan report, it normalizes and tokenizes each antivirus signature, removes any tokens that do not contain family information, and performs family alias Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 . For constructing the matrix C we employed a resolution. The processed token(s) from the antivirus signature produced by engine a pare used as the family for element C. Hurier et al. [6] proposed a metric called overlap for computing pairwise detection consensus for a pair of antivirus engines. However, overlap does not consider that some antivirus engines may be missing from a scan report. Instead, we deﬁne a similar metric, which we call agreement, that corrects this issue. Deﬁnition 1. Agreement(B, B) = Agreement(B, B) divides the number of scans in B in which a detection by the total number of scans in which both a agreement can be deﬁned in the same way by substituting the matrix B for C. Since it is possible for AVClass to convert a single antivirus signature into multiple family tokens, we consider two elements in C to be equal if they share any AVClass tokens, or if AVClass produced zero tokens for both signatures. The VirusShare-VT dataset contains 93 antivirus engines that appear in at least 1,000 diﬀerent scan reports. The set of antivirus engines used by VirusTotal changes gradually over time. In May 2006 only 26 of the 93 engines were observed; this number gradually increases to 57 by May 2016. The sets of antivirus engines in VirusTotal are relatively consistent month-to-month, with an average of 1.033 engines added or removed per month. Several antivirus engines only appear in VirusShare-VT during a short window of time. Many of these are alternative or beta versions of existing engines (e.g. PandaBeta from Feb. 2007 to Feb. 2009, McAfee+Artemis from Nov. 2008 to Jan. 2011, and Avast5 from Mar. 2010 to Sep. 2011). The name, numeric index used in all appropriate ﬁgures, and total number of occurrences of each of the 93 antivirus engines in the VirusShare-VT dataset is shown in Table 1 in Appendix A. Figure 2: Similarity matrices displaying pairwise detection and classiﬁcation agreement for 93 antivirus engines in VirusShare-VT. Figures 2(a) and 2(b) show the pairwise detection and classiﬁcation agreement for each of these 93 antivirus engines. Consistent with prior work, there are observable instances of high detection consensus among some vendors, and a small subset of vendors have very little agreement with others [9]. The classiﬁcation agreement matrix appears highly similar in structure to the detection matrix but with smaller values on average. One possible explanation for this phenomenon is that classiﬁcation agreement depends upon both antivirus engines detecting the sample as malware. Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 s. t. B, B6= ∅ Next, we explore how overall consensus amongst antivirus engines has changed over time. Consider a similarity matrix D constructed by applying some similarity function sim(BP pair of antivirus engines in A. LetD denote the sum of all elements in D. Because values below the main diagonal of a similarity matrix are redundant, we deﬁne the triu(X, i) function to return X where all elements at or below the i references to similarity matrices in this paper it is implicit that redundant information has already been removed, i.e. D has been replaced with triu(D, 1). To measure overall consensus amongst a set of antivirus engines, we use synchronicity, deﬁned as [6]: Deﬁnition 2. Synchronicity(B) = Synchronicity is equivalent to the average value of the entries above the main diagonal of D. We deﬁne synchronicity using diﬀerent notation than Hurier et al. [6] to to be consistent with terminology we use later in this paper. When computing the similarity matrix D, sim(B can be any pairwise similarity function; we elect to use agreement as this similarity function in all of our experiments. Although Hurier et al. [6] deﬁne synchronicity only for measuring the level of consensus amongst antivirus detections, it can also measure classiﬁcation consensus by computing a similarity matrix for C instead of B. Figure 3 displays how the synchronicity of the antivirus engines in the VirusShare-VT dataset changes over time. This data was collected by grouping the scans in VirusShare-VT by month and computing detection and classiﬁcation synchronicity for each group of scans. It is evident that synchronicity amongst antivirus engines varies considerably over short spans of time. Although they have diﬀerent magnitudes, detection and classiﬁcation synchronicity seem to be loosely correlated. Again, a possible At ﬁrst, we believed that one factor which contributed to the volatility shown in Figure 3 was engines joining and leaving the VirusTotal platform. As we mentioned in Section 3.1, changes in the set of antivirus engines used by VirusTotal tend to be very gradual. However, we identiﬁed three events in which four or more antivirus engines were added or removed in the span of a month. One of these represents the most signiﬁcant population shift in our dataset by far; the removal of fourteen engines between Jan. and Feb. 2009. This corresponds to an increase in detection synchronicity from 0.577 to 0.679 during this period, though change in classiﬁcation synchronicity is negligible. The other two events are the additions of four antivirus engines between Aug. and Sep. 2008 and ﬁve engines between Aug. and Sep. 2013. However, synchronicity does not change signiﬁcantly during either of these intervals. It would be diﬃcult for changes in synchronicity to occur due to population changes unless a signiﬁcant number of engines join or leave. In addition, we observe other signiﬁcant increases and decreases in synchronicity during which the population of antivirus engines does not change. We conclude that changes in synchronicity amongst antivirus engines Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 diagonal are replaced with zero. In future are likely caused by a complex assortment of factors, including changes in both the malware ecosystem and antivirus community. All current explanations for consensus between antivirus engines can be classiﬁed as ﬁrst-order interactions, i.e. a single interaction between a pair of features. In order to test these widelyheld assumptions we introduce the Rank-1 Similarity Matrix (R1SM) decomposition. We later describe an extension to R1SM that reveals changes in ﬁrst-order interactions within time-series data, which we call the Temporal Rank-1 Similarity Matrix Decomposition (R1SM-T). It was necessary to create this decomposition as, to our knowledge, no existing algorithm possesses this capability. Suppose we have a similarity matrix D that represents agreement between each pair of antivirus engines in A. The R1SM decomposition exposes ﬁrst-order interactions between the antivirus engines in the upper triangular of D as the sum of rank-1 outer products with shared, nonnegative weights. Deﬁnition 3. D =triu(rr, 1) In Deﬁnition 3, each vector r, r, ...rhas length n and is non-negative. First-order interactions between objects in D manifest in these vectors, which we call the components of the decomposition. This behavior occurs due to the nature of the decomposition, in which the outer product of each vector rand its transpose forms a rank-1 matrix (a matrix containing only ﬁrst-order interactions by deﬁnition). The R1SM decomposition is comparable to the existing CANDECOMP/PARAFAC (CP) decomposition, which also decomposes a tensor into a sum of rank-one outer products [10]. However, additional restrictions (e.g. the decomposition can only be applied to the upper triangular of a square, non-negative matrix and the rank-one outer products have shared weights) distinguish the R1SM decomposition from the CP decomposition. Next, we discuss how the R1SM decomposition is computed. A trivial solution of the R1SM decomposition exists for all similarity matrices in which each component determines a single value in one of the n(n−1)/2 elements in the upper triangular. However, this solution does not provide any useful insights about ﬁrst-order interactions in the decomposed matrix. Recall that one of our research goals is to determine what portion of the correlations can be explained by ﬁrst-order interactions. In order to obtain this information, we solve for the components of the R1SM decomposition using an iterative, greedy strategy. Algorithm 1 approximates the R1SM decomposition of a similarity matrix D. At the beginning of the iiteration of the algorithm, Yis the residual of triu(D, 1), representing the portion of the similarity matrix that has not yet contributed to the decomposition. At each step of the decomposition, a component ris found such that rP value ofRfor which Y− Ris non-negative, where R Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Algorithm 1 R1SM Greedy Decomposition Require: Similarity matrix D, early stopping threshold δ maximally explains Y, i.e. the maximum 4.4 we describe our implementation for ﬁnding components that maximally explain Y solving for r, the updated residual Yis computed by subtracting R Each component of the R1SM decomposition explains a portion of the similarity matrix, given by. Due to the greedy nature of Algorithm 1, the percentage of the similarity matrix explained by subsequent components tends to decrease monotonically. Once a component fails to explain a meaningful percentage of the similarity matrix, it is unlikely that any subsequent component will. Once the algorithm reaches this point, we assert that most if not all signiﬁcant ﬁrst-order interactions have been captured by the decomposition, and all further information left to be explained is better represented by a more complex model. Therefore, iteration of Algorithm 1 halts if a component is found for which (line 8). If a signiﬁcant portion of D can be decomposed before the early stopping condition is reached, we conclude that most of the interactions between the antivirus engines represented by D are ﬁrst-order. A complete decomposition of D can be obtained by setting δ to zero, in which Algorithm 1 will iterate until triu(Y, 1) stores the zero matrix. Each component rof the R1SM composition represents ﬁrst-order interactions between objects in a similarity matrix. As such, each component can be interpreted as a cluster, where large values in a component indicate a strong ﬁrst-order relationship between the corresponding objects. Unlike traditional methods for clustering objects in a similarity matrix (e.g. agglomerative hierarchical clustering), which group objects by their overall similarity, the clusters produced by the R1SM decomposition indicate groups with prominent ﬁrst-order interactions. We stress that clustering is not the primary motivation of the R1SM decomposition, but we explore the idea due to its usefulness. Because the rare not sparse, they may contain small, even spurious values that are not indicative of signiﬁcant ﬁrst-order interactions between objects. Thus a parameter  inﬂuences which members of a component are considered “clustered” (i.e., a non-trivial ﬁrst-order correlate). For a component r, the j’th object is a member of cluster i iﬀ r smaller clusters, where all objects within a cluster have strong ﬁrst-order interactions between each other. Conversely, a small  yields larger clusters, but objects within a cluster may have weaker ﬁrst-order interactions. An object may be a member of multiple clusters or none at all, and it is possible for a cluster to contain zero objects. The early stopping term δ also controls the resulting clustering, as it determines the maximum number of clusters. In Section 5.1 we take advantage of the clustering property of the R1SM decomposition to identify groups of antivirus engines that share strong ﬁrst-order interactions. One of our primary research goals is to study how ﬁrst-order interactions amongst antivirus engines have changed over time. In order to do so, we introduce an extension to the R1SM decomposition which can decompose a time-series of similarity matrices D = [D rather than a single matrix. We call this extension the Temporal Rank-1 Similarity Decomposition (R1SM-T). Again, it is implicit that all similarity matrices in the time-series have had the redundant information at or below their main diagonals replaced with zero. Algorithm 2 describes the concurrent R1SM decomposition of multiple similarity matrices while sharing information across all matrices as a function of their spatial relationships in time. During the iiteration, Y= [Y, Y, ...Y] stores the residual of each similarity matrix in D. Like Algorithm 1, components r= [r, r, ...r explain their respective matrices in Y(lines 6 - 13). Our implementation for ﬁnding these components is described momentarily. A penalty term discourages any values in triu(r from exceeding their corresponding values in Y Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 , but minute errors are still possible. Therefore, for each time t, triu(rr, 1) is corrected using Y Y, the new residual of triu(D, 1), is computed by subtracting R Algorithm 1, iteration stops once components are found such that Our implementation uses a deep neural network F (·) over positional embeddings to concurrently solve the next component in the R1SM decomposition for each similarity matrix in the time-series. This model design was selected so that non-linear changes in consensus over time can be learned. Furthermore, positional embeddings allow the model to leverage temporal relationships between the target similarity matrices as the primary factor of changes in consensus. F (·) is trained on a batch of input vectors X = [X positional embedding of timestep t in the time-series. To obtain the positional embedding of t, we deﬁnedistinct frequencies f, f, ...f, where d is the size of the neural network’s input layer and the jfrequency is given by f= the sin() and cos() functions to each frequency as shown below [20]. The use of a single network similarity matrix based on positaneously allowing the model to adjust the results over time. In doing so, the model gains the ability to learn meaningful results during periods in which less data is available, adapting to the rate of change that is present in the data. That is to say, if time is not relevant at all the model can learn to ignore the input embedding Xentirely. If time is relevant, the embeddings Xand X have a relationship that can be extracted by a single layer of a neural network [20], allowing for information sharing over time. This information sharing is important as we observe diﬀerent rates of change over time, and the amount of samples per month varies by up to three orders of magnitude (as shown in Figure 1). During each iteration i a new neural network F (·) optimizes the values in components r maximally explain their respective matrices in Y using two matrices Uand O, which represent element-wise diﬀerences between triu(r and Yper timestep. Ustores under-predictions in triu(r predictions in triu(rr, 1) (line 11). F(·) is strongly discouraged from over-predicting Y the λ hyper-parameter, which has a value in the range (0, 1], and is set to 0.01 by default. λ acts as a scaling factor between U and O, causing values in O to contribute more heavily to the loss (line 12). Due to this term, over-prediction of the values in the components is rare. Once the batch loss has been computed, the model performs back-propagation and the opti- Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 and the result is stored in R(line 16). ← D, i ← 0 , r, ...r← F (X) (lines 6 - 13). The loss ` of F (X) is computed mizer step (line 13). Training continues until the model converges, at which point r optimal solution. Algorithm 2 can solve the R1SM decomposition of a single similarity matrix by deﬁning it as a time-series with only one timestep. Our implementation of the neural network F (·) uses ten hidden layers with ﬁve residual connections. The default hidden layer size is 1,024 neurons, and the network includes multiple bottleneck layers whose sizes are a function of the input and output layer sizes. The exp() function is applied to all weights in the output layer of F (·), constraining the predicted components to be non-negative as required by the deﬁnition of the R1SM decomposition. An important design factor is the use of a very small learning rate, which allows precise adjustments to the values in the component during the learning process. By default, R1SM-T uses a learning rate of 1e-7. We note that in extended tests a wide array of layer depths, residual and/or simple feed-forward connections, and numbers of neurons per layer, produced qualitatively and quantitatively the same results, as the networks are learning to predict population level statistics without explicit features about the populations, forcing the network to learn consistent population behaviors. Now that we have introduced the R1SM decomposition and R1SM-T, we use them to study ﬁrst-order interactions amongst the antivirus engines in the VirusTotal-VT dataset. First, we investigate the validity of the industry assumption that consensus between antivirus engines is caused by ﬁrst-order interactions, such as sharing of threat intelligence and copying from leading vendors. We identify clusters of antivirus engines with strong ﬁrst-order interactions. Finally, we research how ﬁrst-order interactions between antivirus engines have changed over a decade. Figure 4 displays the R1SM decomposition of the similarity matrix shown in Figure 2(a), which measures pairwise detection agreement amongst the antivirus engines in the VirusShare-VT dataset. This decomposition was obtained by applying Algorithm 2 to the similarity matrix, represented as a time-series with a single timestep. Using an early stopping threshold of δ = 0.1%, the decomposition yielded k = 16 components which explain 60.596% of the matrix. That approximately 40% of the matrix went unexplained implies that signiﬁcant amounts of the consensus between antivirus engines cannot be explained by ﬁrst-order interactions alone, which runs Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Figure 4: R1SM decomposition of the detection agreement similarity matrix for VirusShare-VT. The leftmost subplot contains the sixteen components and the topmost subplot contains their transposes. The large central subplot contains the portion of the similarity matrix explained by the components. Figure 5: Clusters extracted from the R1SM decomposition of the detection percent agreement matrix (δ = 0.1%,  = 0.85). counter to current belief. Determining the nature of such interactions is a subject for future research. Figure 5 displays clusters extracted from the R1SM decomposition in Figure 4 using  = 0.85. Components with less than two antivirus engines exceeding  are not shown. The clustering illustrates a common trait of the R1SM decomposition, namely that the ﬁrst component tends to subsume a large quantity of the similarity matrix, resulting in a large cluster for the ﬁrst component. The cluster extracted from the ﬁrst component indicates that a signiﬁcant number of ﬁrst-order interactions exist between a large group of antivirus engines. Inspection of the clustering shows pairs of antivirus engines with a shared vendor, such as TrendMicro and TrendMicro-Housecall as well as PandaB3 and PandaBeta. Other antivirus engines in the clusters have been previously reported to have similarities, such as BitDefender, Emsisoft, and GData; McAfee, McAfee-GW-Edition, and Microsoft; and Avast, AVG, and Fortinet [26, 16]. Further investigation is needed to identify the causes of the ﬁrst-order interactions between the remaining antivirus engines. Figure 6 shows the R1SM decomposition of the similarity matrix shown in Figure 2(b), which contains pairwise classiﬁcation agreement scores for the antivirus engines in VirusShare-VT. This decomposition has k = 21 components which explain 58.394% of the a signiﬁcant portion of the similarity matrix cannot be explained using ﬁrst-order interactions alone, and further work is necessary to identify and model the complex relationships between this set of antivirus engines. Comparing the central subplots of ﬁgures 4 and 6 shows that both decompositions are structurally alike, indicating that many of the same ﬁrst-order interactions exist between the antivirus engines whether measuring detection or classiﬁcation agreement. We revisit this observation in Section 5.2, where we show that the time-series for the two similarity metrics also have R1SM-T decompositions with notable similarities. Figure 7 shows the clusters extracted from the classiﬁcation percent agreement R1SM decomposition in Figure 6 using  = 0.7. Again, components with less than two antivirus engines exceeding  are not displayed. Shared vendor relationships between Authentium and Command, McAfee and McAfee+Artemis, and K7AntiVirus and K7GW are identiﬁed by the clusters for components 7, 9, and 11 respectively. Zhu et al. [26] identify similarities between ClamAV and Comodo (component 1) as well as Ad-Aware and MicroWorld-eScan (component 5). Sebastián et al. [16] also report that the Ad-Aware and MicroWorld-eScan engines frequently have identical labels. No prior work has identiﬁed similarities between any antivirus engines developed by Fortinet and McAfee, but in 2019 the two vendors released a joint endpoint security solution Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Figure 6: R1SM decomposition of the antivirus classiﬁcation agreement similarity matrix. Figure 7: Clusters extracted from the R1SM decomposition of the classiﬁcation percent agreement matrix (δ = 0.1%,  = 0.7). [4]. A partnership between Fortinet and McAfee likely accounts for the ﬁrst-order interactions between their two beta engines in component 13. We have not found any publicly known connections between the remaining clustered antivirus engines. Next, we investigate the changes in ﬁrst-order interactions between antivirus engines in the VirusShare-VT dataset over the course of a decade. To do this, we separated VirusShare-VT into groups of antivirus scans by month, and computed detection and classiﬁcation agreement similarity matrices for each group. The similarity matrices were then arranged into two timeseries representing monthly change in classiﬁcation and detection agreement respectively. Finally, we applied R1SM-T to both time-series. The R1SM-T models for the detection and classiﬁcation agreement time-series converged after 5,200,000 and 5,440,000 training iterations respectively. They each identiﬁed k = 26 sets of components using the early stopping value δ = 0.1%. The R1SM-T decomposition for the detection percent agreement timeseries explains an average of 73.709% of the matrices and the decomposition for the classiﬁcation percent agreement time-series explains an average of 67.196% of the matrices. Interestingly, the percent explained by the R1SM-T decomposition varies monthly, as shown in Figure 8. In this ﬁgure, the upper red line of each plot indicates monthly changes in synchronicity, originally shown in Figure 3. Each region shaded in blue represents how much a component of the decomposition contributes to the monthly synchronicity, given by. Synchronicity that cannot be explained by ﬁrst-order interactions captured in the decomposition are represented by the area shaded in red. In both plots, the proportion of synchronicity explained by ﬁrst-order interactions slowly increases. Although the cause of this trend is unknown, a possible explanation is an increase in sharing of threat intelligence throughout the industry over time. In both plots, the ﬁrst component steadily becomes the dominant contributor to the explained synchronicity over time. Before 2009, the other components supplied approximately half of the explained synchronicity, but they became negligible by 2014. This seems to indicate that sharing of threat intelligence used to be limited to disparate groups of antivirus engines, but over time information sharing has become ubiquitous. This also correlates with usage of VirusTotal itself within industry, as it provides extensive threat intelligence tooling and a community-based platform for sharing information about malware samples. Next, we investigate the ﬁrst R1SM-T component of both time-series due to its intriguing behavior in Figure 8. In doing so, we observe how the behaviors of individual antivirus engines as well as overall trends in the antivirus community change over time. Figures 9 and 10 display the ﬁrst component of the R1SM decomposition for each of the 121 similarity matrices in the two time-series. Each column represents the component for a particular month, and each row Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Figure 8: Monthly detection and classiﬁcation synchronicity explained by R1SM-T. Synchronicity contributed by each component is shown in a shade of blue, with component 1 at the bottom. The total monthly synchronicity is indicated by the topmost red line. The red shaded region indicates how much synchronicity is not explained by ﬁrst-order interactions contained within R1SM-T components. indicates how the contributions of a speciﬁc antivirus engine to the ﬁrst component have changed over time. The overall magnitude of the components within Figure 10 is lower than their counterparts in Figure 9, and month-to-month component values have more variability. However, the similarity in structure between the two decompositions is striking. As with our earlier ﬁndings for the two R1SM decompositions, a possible explanation for this structural similarity is that classiﬁcation depends upon detection. These results could also indicate that the same types of ﬁrst-order interactions tend to exist between antivirus engines regardless of whether detection or classiﬁcation agreement is measured. Next, we discuss notable types of features visible in the decomposition that indicate changes in ﬁrst-order interactions between antivirus engines. Trivial Patterns: Insights into alterations in antivirus behavior can be observed when corresponding values in the decomposition change radically within a short time period. Both decompositions clearly display the months during which antivirus engines were added to the VirusTotal platform, such as Alyac in Nov. 2014 (row 0) [22]. The Jun. 2015 retirement of the Norman antivirus engine from VirusTotal is also visible in both decompositions (row 56) [23]. Abnormal Structural Changes: Vertical "bands" in the R1SM-T decompositions indicate periods of change within the entire antivirus community that have never been previously noted or identiﬁed, to the best of our knowledge. A band evident in both ﬁgures 9 and 10 takes place during Apr. and May 2011 (columns 59 and 60), in which values for a number of antivirus engines, including Avast (row 13), Emsisoft (row 30), F-Prot (row 32), GData (row 38), Ikarus (row 39), Rising (row 65), Sophos (row 69), TheHacker (row 74), VIPRE (row 80) drop sharply. A second band beginning in Jul. 2014, which lasts until Feb. 2015 in Figure 9 and until May 2015 in Figure 10, indicates a turbulent period where the relationships between antivirus engines were in ﬂux. The components in Figure 10 immediately following this band change drastically, with many antivirus engines gaining an increased share of the component in comparison to the prior months. To understand the cause of these community-wide disturbances in correlation requires further research, but should immediately impact how industry design their label aggregation pipelines. We would recommend any training data labeled during these time periods be regarded as po- Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Figure 9: The ﬁrst components for the time-series of similarity matrices measuring monthly antivirus detection percent agreement in VirusShare-VT. Each column is the component for a particular month, starting in May 2006 and ending in May 2016. Figure 10: The ﬁrst components for the time-series measuring antivirus classiﬁcation percent agreement in VirusShare-VT. tentially suspect, and such data should undergo further analysis to conﬁrm label quality. Sudden Variations: Individual changes to an antivirus within a short period of time also indicate notable events. In Figure 9 a large gap occurs for K7Antivirus (row 41) from Feb. 2010 to Jul. 2010, which corresponds with the release of K7 TotalSecurity version 10.0 on Feb. 23, 2010 [15]. Aegislab (row 4) ﬂuctuates signiﬁcantly for unknown reasons, dropping from 0.575 when it was ﬁrst introduced to VirusTotal in Feb. 2014 [21] to 0.146 and rising back to a peak of 0.716 in Aug. 2014. Aegislab’s contributions to the ﬁrst component are nearly identical to those of Alibaba (row 7) throughout all of 2015, possibly indicating a common information source. Diﬀerences Between Decompositions: Since the ﬁrst components of both R1SM-T decompositions are structurally very similar, diﬀerences between the two may indicate ﬁrst-order correlations caused by factors related to either benign/malicious detection or family classiﬁcation alone. These factors could include increased or reduced use of heuristic antivirus signatures or changes in malware family naming conventions. External events, such as the emergence of new malware families, could also explain these discrepancies. The R1SM-T decompositions in Figures 9 and 10 reveal that correlations between antivirus engines can change signiﬁcantly within a short time period. Furthermore, they illustrate periods of industry-wide change that have never been previously identiﬁed. Although we explain many of the features in the decompositions, the factors that cause consensus between antivirus engines to change are still largely unknown, and identifying the sources that cause periods of populationwide volatility is especially important. We lack complete understanding of the factors that cause correlations between antivirus engines; ﬁrst-order interactions alone are not suﬃcient for modeling the complex interconnections between antivirus engines. In studying how consensus amongst antivirus engines change over time, we found that the relationships between antivirus engines are even more intricate and volatile than previously thought. The overall level of consensus amongst antivirus engines can change quickly in short periods of time for reasons which are still not fully understood. Using R1SM-T we found that ﬁrst-order interactions have become increasingly responsible for consensus between antivirus engines over time, although they are still insuﬃcient for modeling some of the sources of antivirus correlations. Furthermore, we found that ﬁrst-order interactions now seem to be nearly ubiquitous across the entire antivirus industry, whereas disparate segments of the industry previously existed where ﬁrst-order interactions could not be identiﬁed. Finally, we showed that components of R1SM-T could be utilized to identify individual and population-wide changes in antivirus behavior. Current understanding of antivirus dynamics is clearly insuﬃcient and more research about the causes of antivirus correlation is needed. It is diﬃcult to trust antivirus results when the factors that cause them to be correlated are still poorly understood. On account of this, and because relationships between antivirus engines can change signiﬁcantly in a short period of time, existing methods for aggregating antivirus signatures for the purposes of malware detection and classiﬁcation are ﬂawed. Future aggregation approaches should consider weighted ensembles where the weights of the voting members are also a function of time. We also hope that elements of this work, such as the ability to quantify ﬁrst-order relationships and assess changes in these relationships over time, may themselves contribute towards improvements in antivirus aggregation. Proceedings of the Conference on Applied Machine Learning for Information Security, 2021 Table 1: Antivirus engines present in at least 1,000 scan reports in VirusTotal-VT. The Index column displays which row and/or column in Figures 2(a), 2(b), 4, 6, 9, and 10 each engine corresponds to. Proceedings of the Conference on Applied Machine Learning for Information Security, 2021