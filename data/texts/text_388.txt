Dept. of Computer Science, NationalDept. of Electrical and Computer Inst. of Information Science,Univ. hsuchao.cs05g@nctu.edu.twAcademia Sinica, Taiwan Dept. of Computer Science, NationalDept. of Computer Science and In contrast to traditional online videos, live multi-streaming supports real-time social interactions between multiple streamers and viewers, such as donations. However, donation and multi-streaming channel recommendations are challenging due to complicated streamer and viewer relations, asymmetric communications, and the tradeo between personal interests and group interactions. In this paper, we introduceMulti-StreamParty (MSP) and formulate a new multi-streaming recommendation problem, calledDonationand MSPRecommendation (DAMRec). We proposeMulti-stream Party RecommenderSystem (MARS) to extract latent features via sociotemporal coupled donation-response tensor factorization for donation and MSP recommendations. Experimental results on Twitch and Douyu manifest that MARS signicantly outperforms existing recommenders by at least 38.8% in terms of hit ratio and mean average precision. Donation Recommendation; Live Multi-Streaming Recommendation; Social-Temporal Coupled Tensor Factorization ACM Reference Format: Hsu-Chao Lai, Jui-Yi Tsai, Hong-Han Shuai, Jiun-Long Huang, Wang-Chien Lee, and De-Nian Yang. 2020. Live Multi-Streaming and Donation Recommendations via Coupled Donation-Response Tensor Factorization. In Proceedings of the 29th ACM International Conference on Information and Knowledge Management (CIKM ’20), October 19–23, 2020, Virtual Event, Ireland. ACM, New York, NY, USA, 11 pages. https://doi.org/10.1145/3340531.3411925 Live streaming platforms, such as Twitch, Facebook Gaming, YouTube Live, and Microsoft Mixer, which broadcast music, political, and gaming content to viewers, have recently grown into one of the most popular social services. For Twitch, the number of daily active viewers grows up to 10 million [31], the minutes watched shoot up to 434 billion,and the revenue from advertisements and donations hits 545 billion in 2018. The great success of live streaming may be credited to several unique functions. First, viewers may interact with other viewers and streamers in real-time. Friends interact 10 times more on Facebook Live than in regular videos.More than 21% of friends in bilibili simultaneously watch the same videos and chat with more than 26.5 lines on a 3-minute video. Therefore, live streaming platforms have been recognized as the "third places" to enjoy social interactions and form communities [20,31]. Indeed, social interactions are important to bring friends together to enjoy real-time live streaming. While group watching is growing with great momentum, existing live streaming platforms recommend channels to each viewer by conventional personalized recommendation [4,18], which fails to foster social interactions to improve viewer engagement. To stimulate discussions, a simple way is to adopt group recommenders [2,11] to nd a unied set of channels for a group of friends. Nevertheless, the recommended channels are identical for each viewer, which fails to address diverse personal interests. Second, current live streaming platforms support viewers to watch multiple channels, i.e., multi-streams, simultaneously. NBC and FOX oer at least four viewing angles in sports games (e.g., NFL, MLB, and UFC), attracting 25M and 48M viewers, respectively. The analyses on Twitch [10] and 2017 Taipei Summer Universiade on YouTube Live [25] manifest that 27% and 30% of viewers simultaneously watch multiple channels, respectively. A Twitch user study reveals that more than 90% of users have enjoyed multistreaming [25]. Figure 1(a) shows the user interface of Squad Team (a multi-streaming program on Twitch) with Steven and Emily as teammates and Dan as their opponents in a four-player game. More than 3K viewers were enjoying watching the collaboration and competition between streamers, indicating that streamer relations (e.g., teammates or opponents) and interactions are crucial in multistreams. With multi-streaming, viewers can enjoy their favorite streamers and channels, while engaging in dierent communities. Currently, streamers on Twitch or Mixer have to manually select their own partners to broadcast multi-streams together instead of generating multi-streams via recommender systems to a group of viewers based on their preferences. Third, in contrast to conventional online video streaming [4,18], live streaming supports donations. Viewers donate, send gifts, and leave messages to the streamers while enjoying social interactions with others in the channels. Streamers usually respond immediately or host online events to reward donors. As a result, the viewers are more engaged in the channels and thereby more willing to donate (which prots the streamers and the platforms). Moreover, social interactions between viewers and friends (e.g., discussions on the game strategy for a common player) while watching a common channel also stimulate donations to attract and compete for the streamers’ attention [20,31]. Viewers sometimes compete for the title of top fans of a channel to impress the streamers and show their loyalty. While live streaming has provided single-channel recommendations to users [4,18], it does not support donation recommendations, which could be a promising service. In this paper, we envisage a scenario, termed as Multi-Stream Party (MSP), where a group of friends watches multiple live streaming channels together with a satisfactory experience. In an MSP, the recommended channels may vary for each viewer based on her personal interests. Figure 1(b) illustrates an example of MSP with the viewers (circles) and their social relationships (solid lines) presented at the bottom. Each viewer watches (blue and dashed arrows) three channels (squares) at the top. Streamer relations (solid lines) with green signs indicate their polarities (i.e., "+" for positive and "-" for negative relationships). Let channels𝑐,𝑐, and𝑐represent Steven, Emily, and Dan in Figure 1(a), and𝑐be the channel of Dan’s teammate. The negative solid line indicates that𝑐and𝑐 have a negative relationship (e.g., opponents). Viewers𝑣and𝑣 watch a common channel𝑐to enjoy social interactions. However, viewers𝑣and𝑣, not interested in𝑐, watch𝑐,𝑐, and𝑐instead. As such, viewers are no longer tied to commonly selected channels. Moreover,𝑣donates to𝑐(Steven) for a nice play, and Steven replies with warm gratitude (thick red arrows). In contrast,𝑣,𝑣, and𝑣simultaneously donate to𝑐to encourage Dan when he is outplayed by Steven. However, since it is hard for Dan to properly reply to all donations during the game, the responses from Dan are brief (thin red arrows). To meet the need of conguring a good MSP, we formulate the problem ofDonationandMSPRecommendation (DAMRec). An MSP, representing a candidate plan of grouping viewers with channels, consists of𝑘channels for each viewer in a group, where the set of 𝑘channels for each viewer is not necessarily identical. Given the viewer donations and streamer responses in the past, the rst goal of DAMRec is to recommend a streamer to a viewer for donations to maximize the expected reciprocal response. In Twitch, Douyu, and Mixer, streamers oer various responses, e.g., verbal sentences or activity invitations, to express their gratitude. Viewers are usually satised with high-quality reciprocal responses due to the senses of being valued. The second goal of DAMRec is to recommend an MSP achieving high MSP personal satisfaction. The above two goals are entangled and thus need to be addressed together. If a viewer is not satised with the recommended MSP, she is unlikely to enjoy those channels and donate to the streamers. However, if we recommend MSPs rst, the streamers of MSP may not provide high-quality responses for donations when there are numerous viewers. On the other hand, prioritizing donations may favor some unpopular channels (where streamers oer more responses), which cannot t the viewers’ interests. Indeed, new challenges arise for DAMRec (detailed in Section 3.1). Challenge 1 (C1): The aforementioned seesaw in optimizing MSP and donation recommendations needs to be solved. Challenge 2 (C2): Recommending donations for maximum reciprocal responses is challenging due to complicated streamer relations and viewer relations, including streamer signed social relations and the socio-temporal ripple eect on donations, and Challenge 3 (C3) Asymmetric viewer and streamer communication behaviors. Challenge 4 (C4) It is hard to quantify the personal satisfaction for recommending MSP due to the tradeo between personal interests and group interactions. In this paper, we propose a two-phaseMulti-stream Party RecommenderSystem (MARS). In phase 1, a new couple tensor factorization modelSocio-temporal Donation-Response TensorCofactorization (SENSOR) is proposed to jointly extract the latent representations (i.e., embeddings) of viewers and channels in order to capture socio-temporal behaviors of donations and responses. We introduce theDonationto Response estimation (D2R) to estimate the reciprocal response of a given donation for donation recommendations. In phase 2, a new ranking methodChannel Inuence-Aware MSPRankingSystem (CARS) is designed to rank MSPs based on the viewer and channel embeddings derived from SENSOR and the channel inuence, which factors in the interplay among personal interests, group interactions, and streamer relations, for dierent candidate MSPs. The contributions are summarized as follows. •MSP is introduced for live streaming viewers to enjoy social interactions while watching dierent preferred channels. We formulate DAMRec and make the rst attempt to recommend donations and MSPs. DAMRec. A new coupled tensor factorization model SENSOR is introduced to extract the embeddings of viewers and channels. A set of regularizers are proposed to respectively account for streamer relations, the socio-temporal ripple effect of donations, and the asymmetric communications of streamers and viewers to accurately estimate the reciprocal responses to recommend donations. •We design CARS to accurately rank candidate MSPs for viewers according to channel inuence, personal interests, viewer interactions, and streamer relations. •We collect a new Twitch dataset. Large-scale experiments are conducted on four real datasets. Experimental results manifest that D2R signicantly outperforms feedback prediction models by at least 41.9% regarding the root-mean-square error, and CARS outperforms personalized and group recommenders by at least 38.8% and 40.4% regarding hit ratio and mean average precision, respectively. Live Streaming Research.Existing research focuses on enhancing watching experiences by optimizing transmitting latency and bitrate [28], while some research studies the splitting strategy of donations for streamers and platforms [26]. HCI communities investigate the reasoning of new user behavior (e.g., donation) in live streaming [20,31]. However, they are not designed for recommendations. In this paper, we make the rst attempt to develop donation and MSP recommenders. Personalized Recommendation.Personalized recommender systems learn user preferences of items from user feedback [8,33]. Collaborative Filtering (CF) [3,8] leverages auxiliary information, such as item similarities, to derive patterns for recommendations. Knowledge Graph-based methods [33] learn low-dimensional embeddings of users and items from heterogeneous and structural information. However, these methods do not encourage social interactions since they only focus on recommending items for individuals, not to mention the viewer-streamer interactions (e.g., donations). Existing online video platforms (e.g., YouTube) analyze the contents and contexts of videos for recommendation but do not take donations into consideration [4, 18]. Group Recommendation. Group recommenders aggregate features among users in a group as group features [2,11]. Cao et al. learn user inuence in a group with an attention network to infer group consensus [2]. Shen et al. [25] select a group of socially-tight users and a set of preferred channels jointly to foster social interactions. However, the channels are identical for each individual, whereas their diverse personal interests are not considered. Although the trade-o between personal and group interests in VR shopping are addressed [11,15], they support neither the donation recommendations nor streamer relations. To facilitate a satisfactory multi-stream party, two key tasks are to 1) recommend donations for viewers such that the streamers give the maximum reciprocal response, and 2) rank the MSP personal Figure 2: The proposed framework MARS. satisfaction of candidate MSPs for each viewer to facilitate MSP recommendations. Figure 2 illustrates the two-phase framework MARS proposed to support these two tasks. The yellow rectangle at the top shows the training stage of MARS. In phase one (dotted rectangle on the left), SENSOR has two goals (black rectangles). The rst task is viewer and channel embedding extraction, which is achieved by the proposed tensor co-factorization technique. Moreover,Streamer RelationRegularization (SER) andSocio-TemporalAutoregressive Regularization (STAR) (grey rectangles) are proposed to regularize the impact of streamer relations and the socio-temporal ripple eect in live streaming. The second task isDonationto Response estimation (D2R), which estimates the reciprocal responses of a given donation for donation recommendations. In addition, we proposeResponse Suppression in Donation Burst(RIOT) to model with the asymmetric behaviors of viewers and streamers during a donation burst. As such, D2R avoids recommending donations with low-quality reciprocal responses. In the second phase (dotted rectangle on the right), the goal of CARS is to learn an MSP ranking function (black rectangle) based on the viewer and channel embeddings derived in SENSOR, and the channel inuence (dark grey rectangle), comprised of streamer relation, viewer relation, and personal interest aspects (grey rectangles below). Thus, CARS considers the interplay in dierent combinations of channels and friends in an MSP when quantifying MSP personal satisfaction. In the inference stage (yellow rectangle below) for MSP recommendations, given a set of candidate MSPs, we rst derive each viewer’s MSP personal satisfaction with CARS. The widely-used Least-Misery (LM) mechanism can be adopted to recommend the best MSP with the greatest minimum MSP personal satisfaction among the viewers. While watching MSP, the system shows the estimated response based on D2R for each channel. Hence, the viewers can send the donation amount along with a message to the channel with the maximum estimated reciprocal responses. C1: The seesaw in optimizing distinct goals.First, learning to recommend an MSP and to recommend donations jointly could lead to undertting due to their dierent goals. Moreover, it is important to carefully examine the correlations between them. In other words, it is necessary to consider the potential donation recommendations before recommending an MSP, such that the recommended MSP not only satises the viewers but also allows them to receive the reciprocal responses from the streamers easily. In MARS, SENSOR extracts the embeddings with a novel tensor co-factorization model to prole the social and temporal behaviors of viewers and channels in the rst phase. Subsequently, CARS ranks candidate MSPs based on the co-factorized embeddings to correlate two goals. C2: Complicated streamer relations and viewer relations.Donation recommendation targeting maximum reciprocal responses is challenging due to unique social phenomena in live streaming platforms. Streamer relations aect viewers’ donations e.g., some viewers prefer watching the debate between rivals and make donations to support them. Moreover, viewers are more willing to donate after other viewers are also donating [20,31], termed as the socio-temporal ripple eect of donation, which may be attributed to competition for attention. Although some existing temporal social-aware recommenders [30] can be used for donation recommendations, they do not model the relationships between streamers. In contrast, SENSOR includes two regularizers, namely SER and STAR, to derive the signed streamer relations and the social inuence among other viewers with inuence decay, respectively. C3: Asymmetric viewer and streamer behaviors.The streamers are usually distracted during a burst of donations since they face many viewers alone, whereas the viewers only watch a few channels. This asymmetric communication between a streamer and his viewers may lower viewers’ satisfaction with his donation due to low-quality responses. Existing temporal feedback prediction methods [6,34] do not model this unique phenomenon. In D2R, RIOT is introduced to model the distraction behavior during the burst so D2R can eectively avoid recommending donations while a burst is happening. C4: Tradeo between personal interests and group interactions.To recommend MSPs, it is challenging to strike a balance between the tradeo in various MSPs to quantify the MSP personal satisfaction for recommendations. One possible approach is to employ personalized recommendations [3,8] for each individual. However, the complicated social eects occurring amongst viewers watching common channels are not carefully examined. On the other hand, existing social-aware recommendations [30,32] only infer personal satisfaction based on social topology, which is not designed for MSP where viewers watch live streaming channels together. Hence, we parameterize MSP personal satisfaction from personal, social, and streamer relation aspects, to design a new ranking model CARS to quantify the satisfaction of dierent combinations of channels and friends. For clarity of presentation, in this paper, bold uppercase letters (e.g.,X) and lowercase letters (e.g.,x) denote matrices and column vectors, respectively.X(𝑖, 𝑗)andX(𝑖,:)denote the element in the 𝑖-th row of the𝑗-th column and the𝑖-th row vector, respectively. Non-bold letters (e.g.,𝑥) and squiggle letters (e.g.,X) represent scalars and tensors, respectively. Let𝐺 = (𝑉, 𝐸)be a social network of viewers,𝐶be a channel set,𝐺= {𝑔, · · · , 𝑔, · · · , 𝑔}be a multi-streaming group set, where𝑔= {𝑉, 𝐸}is an induced subgraph of𝐺, and the set of their corresponding Multi-Stream Party (MSP) is𝑃= {𝑝, · · · , 𝑝, · · · , 𝑝}, where𝑝= {𝐶|𝑣 ∈ 𝑉, 𝐶⊆ 𝐶}consists of a set𝐶of𝑘channels for each viewer𝑣 in𝑉to watch. On the other hand,W∈ {−1,0, +1}denotes the signed network of streamers, whereW(𝑖, 𝑗) =1 if streamers 𝑖and𝑗have a positive relation (e.g., friends),−1 if they have a negative relation (e.g., rivals), and 0 if they don’t have a relation. In addition, the donations and the streamer responses are respectively recorded in the donation tensorTand the response tensorT, whereT, T∈ Rand𝑇is the number of time slots. An elementT(𝑣, 𝑐, 𝑡)indicates how much money viewer𝑣donates to channel𝑐at timestamp𝑡, whileT(𝑣, 𝑐, 𝑡)denotes the measured quality of the corresponding reciprocal responses. Figure 1(b) illustrates an example of MSP (𝑝) with𝑘 =3, i.e., every viewer watches three channels, for a group𝑔where 𝑉= {𝑣, 𝑣, 𝑣, 𝑣}and𝐸= {(𝑣, 𝑣), (𝑣, 𝑣), (𝑣, 𝑣), (𝑣, 𝑣)}. W(𝑐, 𝑐) = −1 denotes that channels𝑐and𝑐have a negative relationship.𝐶= {𝑐, 𝑐, 𝑐}denotes that𝑣 watches channels𝑐,𝑐, and𝑐. Finally, theDonationandMSP Recommendation (DAMRec) problem is formally dened as follows. Problem: Donation and MSP Recommendation (DAMRec). Given: T, T, 𝐺, 𝐺, 𝑃, 𝑘, and W. Goal 1:Estimate the expected reciprocal response of a given donation (Section 4). Goal 2:Rank candidate MSPs, including channels and group members (Section 5). We respectively detail phases 1 and 2 of MARS in Sections 4 and 5. Since the behaviors of donations and responses are highly related to each other, to extract embeddings of viewers and channels, we propose an innovative co-factorization model SENSOR onTandT that shares low-dimensional latent spaces of viewers and channels. To tackle challenge C2, SER factorizes the signed social networks of streamersWto encode the streamer relations in the embeddings of streamers. Furthermore, to model the socio-temporal ripple eect of donations into SENSOR, we introduce STAR to learn both a social inuence matrix of viewers on donationsˆWwith the degree of exponential decay of the inuence𝑑. Therefore, the total social inuence of donations, which adds up the social inuence of each donation weighted by time, becomes greater only if plenty of donations from inuential viewers and friends happen within a recent and short period. STAR penalizes the objective if the estimated user donation and its total social inuence of donations are inconsistent. On donation recommendations, an idea is to accurately estimate the reciprocal response from a streamer to a given donation and then recommend the viewer donating to the streamer who is expected to return the maximum reciprocal response. Therefore, we extract important features (viewer-streamer relations, message sentiment and semantics, etc) to learn a model D2R. Moreover, to tackle C3, we propose RIOT, which disperses the values of the reciprocal responses when the donations are made in a burst. Finally, as we can precisely estimate the reciprocal responses based on viewers’ input donations and messages and avoid donation bursts, we can recommend the viewers donating to the streamers with the maximum estimated reciprocal response in real-time. D2R and RIOT are integrated into SENSOR rather than learned alone since they also help interpret the relations betweenTandTduring factorization. Our nal goal is to extract the latent features of each viewer and channel via modeling the socio-temporal eect of donations and responses for ranking MSPs. As the viewer donations and streamer responses are naturally represented as tensors, we design a new coupled tensor factorization model for jointly learning the viewer and channel embeddings to rank MSPs. Specically, to capture the essential properties of donations and responses, we collectively factorizeTandTinto unied low-dimensional representation matrices by minimizing the following function: whereV ∈ R,C ∈ R, andT ∈ Rare the trainable matrices with respect to viewers, channels, and timestamps. O, O∈ Rare the trainable core tensors with𝛼representing the dimensionality of latent features.∥T ∥ =⟨T , T ⟩denotes the Frobenius norm of a tensorT, and×denotes the𝑡-mode product. In the above formulation,V,C, andTare shared between the factorization ofTandTto jointly construct the latent representations, while the core tensors, i.e.,OandO, are respectively used to model the interactions between viewers, channels and timestamps in donations and responses. An intuition is to factorizeT andTseparately with Tucker Decomposition [12] and concatenates them together to obtainV,C, andT. However, it is not ecient according to the following proposition. Proposition 4.1. Sharing common latent matrices reduces twice of the amounts of parameters than separately factorizing them with Tucker Decomposition [12]. By sharing common latent matrices, it takes(|𝑉 | +|𝐶| +𝑇 )𝛼 +2𝛼 parameters. In contrast, in the separated case,TandTindependently generateV,C, andT, which needs 2(|𝑉 | + |𝐶| + 𝑇 )𝛼 +2𝛼 parameters in total. Therefore, the amount of parameters is almost half (𝛼is usually small) for the proposed approach without duplicating latent matrices, which reduces enormous parameters to avoid overtting and accelerate the computation time. Moreover, sharing common latent matrices preserves the correlations of viewers, channels, and timestamps in the latent space. Another possible approach is to use a 4-dimensional tensor, where the 4th dimension indicates donation and response. However, it is not ecient due to the following proposition. Proposition 4.2. The proposed model reduces the amount of parameters from(|𝑉 | + |𝐶| + 𝑇 +2)𝛼 + 𝛼(in a 4-dimensional tensor) to(|𝑉 | + |𝐶| + 𝑇 )𝛼 +2𝛼, and reduces the computation of gradients by half. That is, besidesV,C, andT, factorizing the 4-dimensional tensor will incorporate an additional matrix, namelyA, with 2× 𝛼entries, storing the latent features of actions of donation and response. The core tensor will be extended to𝛼for a 4-mode product. Therefore, the space complexity for the 4-dimensional tensor, which is(|𝑉 | + |𝐶|+𝑇 +2)𝛼+𝛼, is greater, which may cause overtting. On the other hand, computing the gradients ofV,C, andTin each SGD iteration requires an additional 4-mode product with the vectora, which is a column vector ofA, with 2 entries, leading to double computation time. Finally, the loss function of the proposed SENSOR, namely L, is derived as follows: where𝑅,𝑅, and𝑅are regularizers for SER, STAR, and RIOT, respectively, whileLis the loss function of reciprocal response estimation (detailed right next).𝜆,𝜆, and𝜆control the weights of each regularizer. For simplicity,v = V(𝑣,:)and c = C(𝑐,:)respectively denote the viewer embedding of viewer𝑣 and the channel embedding of channel𝑐.ˆT= O×V ×C ×T andˆT= O×V×C×Tare the estimated donation and response tensors, respectively. SER: Streamer Relation Regularization.Viewers enjoy watching streamers interacting with each other. As shown in the real example in Figure 1(a), the competition between streamers Steven and Dan attracts 3K viewers watching and donating. Hence, it is crucial to encode streamers’ relationships in streamer embeddings. We design the SER by factorizing Was follows: where each element inˆW= CCdenotes the derived streamer relation between each pair of streamers. By minimizing the loss betweenWandˆW, the embeddingscand˜cof two streamers 𝑐and˜𝑐with a positive relationship are inclined to be close in the latent space (i.e.,c˜cis close to 1). Otherwise, they are put farther in the latent space (i.e., c˜c is close to -1). STAR: Socio-Temporal Autoregressive Regularization.Previous works show that a viewer is more willing to donate after seeing others’ donations, especially friends [20,31]. In other words, the donations have a socio-temporal ripple eect triggered by other donations. From our collected Twitch dataset, the probability that a donation follows another donation within 5 minutes is 30.4%. Research [31] also manifests that viewer donations to streamers may draw other viewers’ attention, which causes further interactions (i.e., herd behavior), including donations. Therefore, we design a novel regularization term 𝑅as follows: whereˆW∈ Ris the learnable weight matrix of social inuence between viewers.𝑒measures the exponential decay in previous𝐿time slots, whereΔ∈ [1, 𝐿]is the temporal dierence and𝑑is the decay factor. Hence, the socio-temporal impact of the donationT(𝑢, 𝑐, 𝑡 − Δ)to viewer𝑣is stronger if the donation time is closer (Δis smaller) and if the donor𝑢has a high inuence on𝑣(ˆW(𝑢, 𝑣)is greater). We initializeˆW(𝑢, 𝑣) =1 if and only if(𝑢, 𝑣) ∈ 𝐸; andˆW(𝑢, 𝑣) = 𝜖otherwise. Moreover, dierent friends (e.g., close friends vs. common friends) or dierent non-friend viewers (e.g., celebrities vs. common viewers) may have dierent inuences. As in Figure 2, STAR learnsˆWand𝑑from data to restrictˆT(𝑣, 𝑐, 𝑡)to be close to the estimation from previous donations by Eq. (1). Hence, both SER and STAR help embed streamer and viewer behaviors while factorizing their embeddings. D2R: Donation-to-Response Estimation.Streamers reply to donations to interact with viewers and express their gratitude. Research shows that their responses strengthen the engagement of viewers to the channels [20,31]. Nevertheless, viewers usually have limited budgets for donations. Therefore, it is necessary to estimate the reciprocal response potentially received for a given donation in donation recommendations for viewers. Given a donationT(𝑣, 𝑐, 𝑡) >0, we extract the following features as the input of estimating the expected reciprocal response: 1) the amount of the donationT(𝑣, 𝑐, 𝑡), 2) the sentence embeddings of the donation messages [21], 3) the text sentiment scores of the donation messages [29], 4) the real-time speech emotions and sentiments of𝑐[1], 5) the cumulative amount of donations of𝑐from𝑣, 6) the cumulative amount of donations of𝑐in the recent𝐿slots, 7) the minimum donation amounts to be shown on the top fan list, and 8) the viewer-streamer interactionsv ⊙ c(⊙is the element-wise product). The above features are concatenated into a feature vector x. Accordingly, the loss for D2R Lis dened as follows: where𝜃is the weight vector regressingxto the estimated reciprocal responseˆT(𝑣, 𝑐, 𝑡). The square of dierence is minimized as the auxiliary loss for factorization. In the inference stage (as shown in Figure 2), the streamer with the maximum estimated reciprocal response, derived by 𝜃 and x, of a given donation is recommended to the viewer. RIOT: Response Suppression in Donation Burst.Unlike viewers who only focus on a few streamers, streamers usually interact with many viewers. As a result, they are usually distracted during a burst of donations since they broadcast to viewers alone [31]. When plenty of donations occur in a short period, the streamer is physically constrained from a long engagement with individual donors and thus is inclined to respond less and shorter. To model this asymmetric communication phenomenon, we use a regularization term to help D2R better estimate reciprocal responses. The goal of the regularization is to suppress the estimated reciprocal responses to a small value if the donations burst in a short period 𝐿. Therefore, for each channel𝑐, we calculate the joint donation distribution of 𝑣 and 𝑡as follows: The entropy of the joint donation distribution in[𝑡 − 𝐿, 𝑡], denoted as 𝑆(𝑐, 𝐿, 𝑡), is derived as follows. 𝑆(𝑐, 𝐿, 𝑡) = −𝑝log(𝑝). When the donation bursts,𝑝is likely to be small within𝐿so the entropy𝑆(𝑐, 𝐿, 𝑡)increases. Accordingly, we design a regularization term𝑅to suppress the values in the derived response tensorˆTbased on the entropy 𝑆(𝑐, 𝐿, 𝑡). where𝜙=ÍT(𝑣, 𝑐, 𝑡) −is the difference between the total amount of donations at time𝑡and the average amount of donations within𝐿, which measures the trend of donation bursts in channel𝑐at time𝑡. In other words,𝜙is positive if the donation amount is increasing, and henceˆT(𝑣, 𝑐, 𝑡) would be lower. Otherwise, the donation amount is decreasing and the streamer is likely free to oer high-quality reciprocal responses. Moreover, while𝑆(𝑐, 𝐿, 𝑡)is large, i.e., the donation is bursting, ˆT(𝑣, 𝑐, 𝑡)becomes small to reduce the loss. As a result, RIOT is able to capture the asymmetric communication phenomenon in a donation burst. Note that𝜙and𝑆(𝑐, 𝐿, 𝑡)are xed when minimizing𝑅. In summary, SENSOR is designed to: 1) recommend donations with D2R, and 2) derive latent matricesVandCfor ranking MSPs (the next section). The second phase of MARS aims to quantify the MSP personal satisfaction of viewer𝑣on MSP𝑝, denoted as𝑟, to facilitate MSP recommendations. A naïve method to obtain the MSP embedding of 𝑝, denoted asp, is to use the weighted sum of channel embeddings and model the MSP personal satisfaction as the inner product of vandp[4,16], i.e.,𝑟= vp. However, it is not practical since a viewer may pay more attention to those channels she likes, those channels she shares with friends, or those streamers who interact with each other. To address the tradeo between personal interests and group interactions (C4) as well as the streamer relations, we propose to parameterize the channel inuence for each viewerchannel pair. By factoring the personal, social, and streamer relation aspects in channel inuence, we respectively learn the weights𝜏 and𝜏corresponding to the social part and the streamer relation part for a viewer𝑣. With the channel inuence, we redene the MSP personal satisfaction and propose a new ranking model CARS to minimize the total pairwise ranking loss based on the total amounts of donations made in an MSP by a viewer. Learning Channel Inuence.Specically, we parameterize the inuence𝑎(𝑣, 𝑐, 𝑝)of a viewer-channel pair(𝑣, 𝑐)conditioned on an MSP 𝑝 as follows: 𝑜 (𝑣, 𝑐) = h𝜎 (v ⊕ c ⊕ 𝑏) 𝑎(𝑣, 𝑐, 𝑝) = 𝑜 (𝑣, 𝑐) + 𝜏ˆW(𝑢, 𝑣) · 𝑜 (𝑢, 𝑐) where⊕denotes the vector concatenation and𝑏is the bias. A sigmoid function𝜎is used as a gating function to identify important features and project those important features to the original inuence𝑜 (𝑣, 𝑐)of𝑐for𝑣with a vectorh. Note that the behavioral features of viewer donation and streamer reciprocal responses are conducted by usingvandchere.𝑎(𝑣, 𝑐, 𝑝)comprises a personalÍ part𝑜 (𝑣, 𝑐), a social partˆW(𝑢, 𝑣) · 𝑜 (𝑢, 𝑐), andÍ a streamer relation part|c˜c|, where𝑢,𝑣are friends and they share the common channel𝑐together in𝑝. For the social part,ˆWis the social inuence matrix derived from SENSOR and 𝜏is the customized contribution factor of the social part for each viewer𝑣. Note that learning𝑜 (𝑣, 𝑐)and𝜏allows us to obtain the composition of the preferences of a viewer regarding an MSP. For instance, if𝑣prefers watching with friends,𝜏is large, enhancing the importance of the social part, leading to satisfactory watching experience and potential donations. Besides, if the streamers have stronger relations (e.g., teammates and opponents), their interactions (e.g., collaborations or competitions) may also attract viewers’ attention. We sum up the absolute value|c˜c|of the derived streamer relation between streamers𝑐 and˜𝑐to represent the eectiveness in channel inuence due to streamer relations. Here the absolute value is adopted since positive and negative relations are both inclined to create intensive interactions.𝜏is the customized contribution in channel inuence of streamer relations for each viewer𝑣. If𝑣likes streamer interactions,𝜏becomes larger. Thus, recommending streamers with stronger relations to 𝑣 may incur more donations. Finally,𝑎(𝑣, 𝑐, 𝑝)is larger if 1)𝑣likes𝑐a lot (large𝑜 (𝑣, 𝑐)), 2) her close friend𝑢(largeˆW(𝑢, 𝑣)) also likes𝑐a lot (large𝑜 (𝑢, 𝑐)), or 3) the streamers in𝐶have strong relations (large|c˜c|). We redene MSP personal satisfaction 𝑟as follows: where the MSP personal satisfaction is the inner product of the viewer embedding of𝑣and the sum of the embeddings of channels watched by𝑣in𝑝, weighted by𝑎(𝑣, 𝑐, 𝑝). By learning𝑎(𝑣, 𝑐, 𝑝), CARS analyzes a viewer’s satisfaction from personal, social, and streamer relation aspects. However, personalized recommenders fail to consider the social aspect [3,8], while group [2,11] and package [25] recommenders do not consider the streamer relations. MSP Ranking.Viewers seldom provide their explicit feedback (e.g., ratings) after watching live streaming channels. Therefore, inspired by BPR [24], we learn to rank the MSPs by comparing pairs of distinct MSPs. First, we construct a training dataset of BPR as𝐷𝐵 =ÍÍÍÍ {(𝑣, 𝑝, 𝑝)|T(𝑣, 𝑐, 𝑡) >T(𝑣, 𝑐, 𝑡) ∧ 𝑣 ∈ 𝑉 ∧ 𝑝, 𝑝∈ 𝑃}. That is,𝑣prefers𝑝to𝑝if she has donated more to𝑝than to𝑝. A variant is to compare MSPs based on the amounts of the received reciprocal responses (i.e.,ÍÍ actions [20,31]. However, it may lead to a biased training result that prioritizes unpopular channels since those streamers are free to respond more [31]. In contrast, optimizing the rank of donations potentially improves the social engagement of viewers since they enjoy the recommendation and donate more, which also leads to more prots for streamers and the platforms. Equipped with𝑎(𝑣, 𝑐, 𝑝), we propose a novel ranking system CARS with a new BPR-based ranking loss Las follows: L(Θ) =− ln 𝜎 (𝑟) +𝜆2∥Θ∥, where𝑟= 𝑟− 𝑟is the dierence of ranking scores for a paired MSP instance(𝑣, 𝑝, 𝑝) ∈ 𝐷𝐵,𝜎 (·)maps𝑟to a value between 0 and 1,ln(·)is the log-likelihood, and𝜆controls the impact of the sparsity regularizer.Θ = {h, 𝑏} ∪ {𝜏, 𝜏|∀𝑣 ∈ 𝑉 }is the set of model parameters for learning𝑎(𝑣, 𝑐, 𝑝)(as in Figure 2). We do not vary viewer and channel embeddings here since it may deteriorate the estimation of the reciprocal responses in Section 4. 6.1.1 Baselines.Donation recommendations.We compare D2R with D2R-N (D2R without RIOT) and state-of-the-art feedback prediction methods: ATS [6], STNN [34], and DLR [7]. ATS employs an attention network to identify important features for time series prediction. STNN introduces a dynamic RNN for time series prediction in spatio-temporal cases. The weighted adjacency matrix of POIs in STNN is replaced by the streamer relations to consider sociotemporal behaviors for a fair comparison. DLR is a regression model on a series of observed donation amounts and the corresponding reciprocal responses. We compare SENSOR with Tucker Decomposition [12] and conduct an ablation study to examine the eectiveness of each term in SENSOR, i.e., SENSOR-nSER (SENSOR without SER), SENSOR-nSTAR (without STAR), SENSOR-nRIOT(without RIOT), and SENSOR-Naïve (without all of the regularization terms). MSP recommendations.We compare CARS with the state-of-theart methods: personalized recommender NCF [8], social-aware personalized recommender SBPR [30], group recommender GBPR [23], and hybrid recommender AGREE [2]. NCF ranks the personal interests with a deep neural network. SBPR learns viewer inuence and ranks items jointly. GBPR employs Matrix Factorization to nd group consensus without considering channel inuence. AGREE jointly learns group consensus and personal interests with an attention network. We also compare CARS with its variants: 1) CARS-U with unied channel inuence (i.e.,𝑎(𝑣, 𝑐, 𝑝) =, ∀𝑣, 𝑐, 𝑝), 2) CARSF with binary friendships (i.e.,ˆW∈ {0,1}), 3) CARS-C without considering streamer relations (𝜏=0, ∀𝑣), and 4) CARS-N without SENSOR, which trains the embeddings from end-to-end. 6.1.2 Dataset and pre-processing. 1)Twitch-Fullis a live streaming dataset with 600K viewers, 140 channels, and 86K donations. We choose 35 channels with the greatest viewership for each content category, e.g., Just Chatting, League of Legends (LOL), etc. Note that Streamers of Just Chatting chat with viewers rather than broadcast gaming content. Since the viewers did not label their reciprocal responses online, we hire 43 workers, who are heavy users spending at least 2.5 hours per day on Twitch with extensive donation experiences, to watch the recorded live streaming videos (broadcasted in 2019) and manually label 1) the donation time and amounts and 2) the quality of reciprocal responses. Multiple measurements of reciprocal responses, i.e., the length of verbal sentences, sentiment scores, and response time (from 1: very slow to 5: very fast), are labeled on the Likert scale. The maximum of a given response labeled by a worker is selected as the worker’s answer. Finally, the labels from at least three workers are averaged for each reciprocal response. The streamer relations are labeled manually as positive if they are teammates or friends, and negative if they are rivals. The viewer social network is crawled via Twitch APIs. 2) Twitch-Chat is a chat log of 2,162 streaming from 52 channels and 2.04M viewers [10]. Viewers leave comments in public chat rooms (open to all the viewers and the streamer in a channel) in order to interact with streamers and other viewers, similar to donation behaviors [20,31]. As a result, we simulate the chats as donations in binary format, i.e.,T(𝑣, 𝑐, 𝑡) =1 if viewer𝑣leaves at least one comment in channel𝑐at timestamp𝑡; andT(𝑣, 𝑐, 𝑡) =0 otherwise. ˆWis initialized with small random values following the settings in [17], since the viewer social network is not given.Wand reciprocal responses are not provided. Therefore, we only examine MSP recommendations but not donation recommendations. 3)Douyuis collected with the donations (in terms of virtual gifts) from the live streaming platform Douyu [27], including 242K channels, 7M viewers, and 64.9M donations. The settings ofˆW,W and reciprocal responses are identical to Twitch-Chat. We examine MSP recommendations but not donation recommendations, either. 4)Redditis a social bulletin board dataset, where users can post comments and reply to the posts with subreddits organized under the same threads, with more than 500M users and 1.7 billion public comments.Although Reddit is not a live streaming platform, it is public (unlike Facebook and Twitter) so posts are accessible to a large population (like live streaming). Users may ock to reply to the posts for discussions (socio-temporal ripple eect) but authors usually reply to only some of them (asymmetric communication behavior). To simulate the channels and viewers, following [9,14], we rst extract the top 50K inuential authors as the streamers by PageRank [22]. The viewers are those who post subreddits below the streamers’ comments. Moreover, to simulate an MSP, we take the comments with the subreddits of a viewer within a short period (e.g., one hour) as the channels watched by the viewer. Two users’ subreddits on the same comment during the same period represent that they view common channels. The subreddits are further treated as the donations, and the corresponding author replies as the responses. We remove stop words with NLTK [19] for every comment and subreddit to preserve meaningful words. The word counts in a subreddit and a comment respectively represent the amount of the donation and reciprocal response.ˆWis initialized with small random values [17]. By following [5,13], the elements inWare set to -1 if their conversations have negative words; 1 if they have a conversation without negative words; 0 otherwise. For the ground truth of donation recommendations, ATS, STNN, and DLR use the labeled responses in Twitch-Full and the length of replies from the authors in Reddit. For the ground truth of MSP recommendations, SBPR, GBPR, and NCF use the amounts of donations in Twitch-Full, Twitch-Chat, and Douyu, and the word counts of subreddits in Reddit as feedback. AGREE transforms the donations or ratings into binary labels (1 if a donation or rating is given; and 0 otherwise). In the inference stage, NCF and SBPR predict user satisfaction on a channel in an MSP. GBPR and AGREE infer user satisfaction on a channel with group consensus if it is shared among friends, or with personal satisfaction otherwise. The MSP personal satisfaction𝑟of an MSP𝑝for a viewer𝑣in the above three approaches is obtained by the average of satisfaction upon the channels 𝑣 watched. For each dataset, we extract 8K MSPs and 10K viewers for training. For an MSP, a group contains 5.3, 4.6, 6.3, and 9.7 users on average respectively in Twitch-Full, Twitch-Chat, Douyu, and Reddit, and each viewer watches𝑘 =4 channels. Existing platforms (e.g., Twitch, Mixer, NBC Sports, and Fox Sports) oer at most 4 channels simultaneously to a viewer to avoid overwhelming viewing experience. The hyper-parameters are optimized by ve-fold cross-validation. Specically,𝛼 =32,𝜖 =0.02,𝐿 =5,𝜆= 𝜆=0.1, Table 1: Performances (RMSE) of dierent window size 𝐿 on donation recommendations. Table 2: The average tensor reconstruction loss. 𝜆= 𝜆=0.5. Moreover, the length of a time slot is set as 2 minutes for Twitch-Full, Twitch-Chat, and Douyu, and 5 minutes for Reddit. 6.1.3 Evaluation Metrics. In Section 6.2, the evaluation on donation recommendations is based on Root-Mean-Square Error (RMSE) [32, 34]. For tensor factorization, we evaluate the average reconstruction loss with respect to donation and response tensors. In Section 6.3, we measure the top-K Hit Ratio (HR@K) [2] and the Mean Average Precision (MAP@K) [2] to evaluate MSP recommendations. We also show the eciency in training datasets. We study the insights of MARS from Twitch-Full in Sections 6.4 and 6.5. Table 1 shows the prediction performance (RMSE) in Twitch-Full and Reddit.D2R outperforms others by at least 78.2% and 41.9% in Twitch-Full and Reddit, respectively, indicating that the proposed features for D2R and RIOT are eective to estimate reciprocal responses. D2R improves D2R-N by at least 62.2% in Twitch-Full since the asymmetric viewer and streamer communication behaviors play a crucial role in live streaming and RIOT properly encodes it in embeddings. In contrast, authors in Reddit are rarely overwhelmed with numerous comments (2.3 times less than that in Twitch-Full), and the improvement (25.3%) is thereby less signicant. Similarly, the improvement of D2R over ATS and STNN is smaller in Reddit (41.9%) than in Twitch-Full (78.2%). DLR performs the worst, indicating that the donation amount is not the only factor for acquiring high-quality responses. All algorithms perform the best when𝐿 =4, indicating that 8 and 20 minutes are adequate for modeling sociotemporal behaviors in Twitch-Full and Reddit, respectively. The value is smaller in Twitch-Full since streamers usually respond faster via verbal sentences rather than typing in Reddit. Table 2 compares the reconstruction loss in all datasets.In Twitch-Full and Reddit, SENSOR and its variants outperform Tucker Decomposition by at least 171.5% and 29.2% with respect to the Figure 3: Training time for ranking on dierent datasets. donation and response tensors, manifesting that the task of cofactorizing donation and response tensors helps each other by sharing latent matrices. Note that SENSOR-nSER reconstructs both tensors egregiously in Twitch-Full (dropping by 50.7% and 51.4% compared with SENSOR) since streamer relations are critical in multistreaming. In Twitch-Full, the performance of SENSOR-nRIOT in the response tensor is worse than SENSOR (95.6%), demonstrating that RIOT is eective in modeling the asymmetric behaviors. In contrast, SENSOR merely improves SENSOR-nRIOT for donation tensor reconstruction in Reddit (4.3%) since the asymmetric behaviors are not obvious (consistent with the observations in prediction performances). Moreover, SENSOR-nSTAR shows a weaker impact for donation tensor reconstruction in Twitch-Chat (20%) and Douyu (10.9%) than in Twitch-Full (52.2%), because Douyu supports onekey gifting, which allows viewers to send specied gifts quickly by pressing a predened button, and viewers tend to separate their budgets to send multiple small gifts to attract the streamers (94.6% of consecutive gifts sent within 60 seconds in a channel). The ripple eect is thereby diluted by dense and consecutive donations. Similarly, viewers keep sending chats since it is free, and those frequent chats also cause a non-obvious ripple eect in Twitch-Chat. Table 3 presents the results of HR@K and MAP@K with dierent 𝑘, where CARS-F and CARS-C are left blank on Twitch-Chat and Douyu since they do not provide social networks of viewers and streamers. CARS outperforms other approaches by at least 38.8% and 40.4% regarding HR and MAP, respectively. MARS successfully integrates SENSOR and CARS by ranking MSPs based on the embeddings extracted from factorization results. In Twitch-Full, CARS outperforms state-of-the-art recommenders (HR: 46.9%, MAP: 61.8%) since it parameterizes channel inuence for each viewer-channel pair to strike a good balance between personal interests, social interactions, and streamer relations. Moreover, CARS-N also outperforms other baselines (at least 11.7%) in live streaming datasets, indicating the above improvement comes not only from the pretrained embeddings but also channel inuence. The performance of CARS-C plummets the most among all variants in Twitch-Full but the improvement is less in Reddit. It is because viewers enjoy watching streamers collaborating or competing in multi-streaming, while the authors of posts (streamers) in Reddit interact less with each other. Compared with CARS-U and CARS-F, the performance of CARS-N drops in both Twitch-Full and Reddit by at least 28.0% regarding MAP@2, demonstrating that the embeddings extracted by SENSOR are eective. CARS performs better in Twitch-Full than in Twitch-Chat and Douyu since SENSOR incorporates meaningful donation-response relations by co-factorization. Note that NCF performs better in Reddit than in the others because individual user behaviors are more dominant in Reddit, evident by a smaller weight of the social aspect𝜏of channel inuence in Reddit (0.17) and in Twitch-Full (0.29). Running time.Figure 3 shows the training time with dierent 𝑘. The training time of CARS is faster than others since it does not train the viewer and channel embeddings. NCF and AGREE are signicantly slower due to their deep neural network structure. Note that CARS takes only 10seconds to evaluate 1 MSP in the inference stage, and is thereby suitable for online scenarios. Figure 4 compares the partial social inuence matrixˆWof 50 viewers (for clarity) before and after training in Twitch-Full. The gray-level of an entryˆW(𝑖, 𝑗)is closer to black if the social inuence between viewers𝑖and𝑗is stronger. In Figure 4(a),ˆW(𝑖, 𝑗) is initialized to 1 if the viewers are friends ((𝑖, 𝑗) ∈ 𝐸) and𝜖 =0.02 otherwise. After training, many gray pixels appear, manifesting that even non-friend viewers may trigger socio-temporal ripple eects on donations.ˆWthus improves D2R from D2R-without-STAR (RMSE: 40.1%), and CARS from CARS-F (HR@4: 2.8%, MAP@4: 6.7%). Note that one special viewer, who is a famous streamer in the LOL community, inuences every other viewer (pointed by the red arrow) but is not a friend of all viewers. His donation on other channels easily causes sensations since ordinary viewers are excited to see social interactions between their favorite streamers, and more donations are thereby triggered. In summary, SENSOR is able to quantify social inuence based on socio-temporal donation behaviors to improve donation and MSP recommendations. Figure 4: Social inuence matrix before and after training. Table 4: Performances (RMSE) of dierent topics of channels in Twitch-Full on donation recommendations. Table 4 compares the performances of all methods in 4 dierent communities of channels in Twitch-Full. D2R outperforms the baselines by at least 52.7% in every category. However, the improvement of D2R over D2R-N is smaller in Just Chatting (21.9%) than others (at least 64.8%). To discover the insights, we respectively select two famous streamers (>3K viewers) from gaming (LOL) and Just Chatting. We observe that donations burst when some game events happen. For example, when the streamer of LOL makes stunning plays, viewers donate and send messages like “Coooooool!!!!” and “Dude, that’s insane” for the nice plays. To face a huge amount of immediate donations, the streamer says “Yes! I’ve told you guys to trust me! Thanks for your donations by the way!” to all the donors with short reciprocal responses and continue the game playing. In contrast, bursts of donations in Just Chatting are rarely observed. Viewer donations and streamer responses are usually orderly, i.e., the viewers are inclined to donate to the streamer when she is free to respond. Consequently, the eectiveness of RIOT in gaming channels (e.g., LOL) is more evident than in Just Chatting. To the best of our knowledge, we make the rst attempt to exploit unique phenomena of multi-stream and donations in live streaming. In this paper, we formulate DAMRec and propose a two-phase framework MARS. The novelty of MARS lies under the design of its components, including i) SENSOR extracts discriminative features by jointly learning viewer and streamer behaviors, ii) D2R recommends streamers to donate to for viewers, and iii) CARS learns channel inuence to rank MSPs. Experimental results manifest that D2R signicantly outperforms other feedback prediction models by at least 41.9% in terms of root-mean-square error, and CARS signicantly outperforms personalized and group recommendations by at least 38.8% and 40.4% in large datasets in terms of hit ratio and mean average precision. This work is supported in part by NSF under grants IIS-1717084, by MOST in Taiwan through grant 108-2221-E-009-088, 109-2221-E001-015, 107-2221-E-001-011-MY3, 108-2221-E-001-002, 109-2221-E001-017-MY2, 109-2218-E-009-015, and 109-2221-E-009-118-MY3. We thank National Center for High-performance Computing (NCHC) of National Applied Research Laboratories (NARLabs) in Taiwan for providing computational and storage resources.