One of the notable discoveries in cryptography has been the invention of a public-key cryptosystem (PKC), developed by Diffie and Hellman [1], which is implemented in a group of prime order. It is a famous protocol to figure out the secret shared key  by two unknown entities, respectively, in the system without interacting them previously. The security of the Diffie-Hellman protocol is defined by the Decision Diffie-Hellman (DDH) assumption. So DDH is beautiful, and one of its applications is the implementation of first publickey encryption, invented by the Rivest, Shamir, and Adleman [2]. RSA further contributed to implementing several protocols, like OpenPGP, S/MIME, and SecureShell, which have been developed based on the RSA cryptosystem. In 1985, ElGamal [3] presented the ElGamal encryption scheme defined over the cyclic group, and its construction is based on the Diffie-Hellman key exchange method. Diffie-Hellman constructed their protocol using a group, defined over a finite field  as we need for a secure system. A sub-exponential algorithm breaks the discrete log in  need a relatively large prime in order to make a system secure against such an attack. We are  Abstract: Pairing is the most powerful tool in cryptography that maps two points on the elliptic curve to the group over the finite field. Mostly cryptographers consider pairing as a “black box” and use it for implementing pairing-based cryptographic protocols. This paper aims to give the overview of pairing as simple as possible for greenhorn and those who are working and wish to work in the pairing. The paper gives the concrete background of pairing and recommends an appropriate pairing among different choices for constructing pairing-based cryptographic protocols. We also analyze the bandwidth and computational efficiency of pairing and submitting those pairing suitable for implementing a cryptographic protocol for lightweight devices. Additionally, we discuss the extension of bilinear pairing to tri-linear and multilinear pairing and discuss a few assumptions to check their feasibility to implement multilinear pairing.  Keywords: Pairing, multi-linear pairing, cryptography.  currently using a prime that is about 2000-bits, and the recommendation is to use prime as much about 3000 bits, which are relatively large primes, causing the protocol to be slow. discrete log problem in which we can try to run the Diffie-Hellman protocol. For example, extension fields, matrix groups, and class groups have been explored for running the Diffie-Hellman protocol. However, they have either an easy discrete log or a sub-exponential discrete log problem. It would also result in broad parameters and be somewhat inefficient, or they have a slow group operation, which would again result in a slow protocol. The first group that has turned out to be better than  field, proposed by Miller 1985 [4] and Koblitz 1985 [5]. The best-known algorithm for the discrete log takes exponential time, its square root of the relative prime size. Thus, we can use much smaller primes and achieve the same complexity as working in  primes because the discrete logarithm is much harder in this group with efficient group operations. As per the NIST guidance, a 3092-bit modulus in  security, while for the same level of security, we need a 256-bit key in an elliptic curve, shown in Table 1. Hence, it is relevant for those applications where smaller bandwidth and memory are required.  at it for their efficiency improvements. It turns out that elliptic curves actually have a supplementary fabrication called a pairing that gave birth to a new area of cryptography, called pairingbased cryptography (PBC). A pairing abstractly is something that operates on two source groups G and resultant on another target group called  points on an elliptic curve, and the target group ( two points in the source group and maps them to the target group in such a way that the exponents multiply. eration cryptosystem. It maps the discrete logarithm in a subgroup of an elliptic curve to the discrete logarithm in a finite field. Menezes et al. [6] present the Weil pairing and attack on pairing to efficiently reduce the elliptic curve-based discrete logarithm problem (ECDLP) to a discrete logarithm problem (DLP) over a finite field using Weil pairing. This attack is known as the MOV attack, based on the initials of three inventors. Similarly, Frey and Ruck [7] use the  The search for other groups has been going on for quite a while. Other groups have a hard  Security strength Key size (bits)  For many years, the impressive quality of the elliptic curve is that people have only looked  The pairing has recently gained much attention, which is being standardized as a next-gen- Tate pairing to reduce the ECDLP to DLP in a finite field, known as FR attack. It is well-known that not all elliptic curves are suitable for pairing. Thus, it is challenging to find the suitable elliptic curves containing a subgroup with optimal embedding degree k. Here, k is big enough to secure against FR attack but small enough such that the arithmetic in a finite field is efficiently computable. There has been an in-depth study of the elliptic curves suitable for pairing, known as pairing-friendly elliptic curves. Generally, they have a sizeable prime order subgroup with a small embedding degree. cryptographer who wish to use pairing for a cryptographic protocol. Currently, most of the cryptographers utilize pairing as a “black-box” and construct protocols by considering some pairing properties. However, it is good to assume pairing, as black-box as it allows completely ignore the mathematical behind pairing and mainly focus on the utterly cryptographic angle of research as the details of pairing, such as their selection and implementation is significantly complicated. This article gives an overview of different pairing and distinct methods that pairing can be implemented, along with the features of each pairing, in terms of their applicability. It attempts neither to give new research nor to propose the problems for further study. Our goal is to present in a simple way to understand the pairing, the criteria that need to keep in kind while selecting the different choice of pairing, and designing system based on pairing. Another objective is to discuss the bandwidth and computation efficiency recommendations for lightweight devices. Besides, we also discuss the future perspective of pairing and found that multilinear map can be a powerful tool for implementing protocol. However, the security of the cryptographic protocols based on such multilinear maps is not clear. background on the elliptic curve and pairing that could be understandable to a learner in section 2. Section 3 gives distinct pairings and recommendations for implementing cryptographic protocols. We then give the more refined analysis for choosing effective pairing for lightweight devices, in section 4. Section 5 discusses the feasibility of a multilinear map as a future perspective of pairing. Finally, we give a conclusion in section 6.  The elliptic curves have a vibrant and attractive history in the last century, which has been studied by several mathematicians. They have solved numerous wide ranges of mathematical problems, for example, Fermat’s last theorem. One of the advantages of elliptic curve is its ability to construct a group structure that makes it possible to implement the cryptographic protocols. The difficulty of finding the discrete logs in a group, i.e., the absence of a sub-exponential time algorithm, is the space that the elliptic curves have over the system based on the multiplicative group for the finite field. In fact, the ECC is efficient and more secure tools that has been used  Contribution. This article is intended to provide a sketch of pairing for the novice and non- Organization. The remaining article is organized as follows. We provide an introductory for constructing cryptographic protocols for systems having limited computation and storage with same level of security.  Consider a field K and its algebraic closure  Thus, an elliptic curve  smooth affine curve, where . Indeed, elliptic curve is derived from the Weierstrass equation, whose characteristic O:= (0 : 1 : 0), as the point at infinity. Due to this, researchers consider the elliptic curves as affine curves and view the point at infinity individually that point plays an essential role in the implementation of modern cryptography. To find the non-singularity of the curve defined by the Weierstrass equation, we need to compute the value of the discriminant  An elliptic curve E is said to be non-singular if . Let  K, which states that the curve is defined over  and can be written as , where we define  as the set of K-rational points of E.  To construct a secure cryptographic protocol, the points on an elliptic curve must form an abelian group structure. Let E/K denotes an elliptic curve E over K and  are two points on . The points on elliptic curve E/K constitute an abelian group, including the identity element denoted as O, the negation of point P is defined by  addition operation on P and Q such that  is defined by   and,  is the slope defined in Equation (3), addition and the additive inverse. According to B´ezout’s Theorem, the line passing through the points  and  meets on  at a unique point, which we denote . The additive inverse of point  is a mirror of point about the x-axis. The line through  and  intersects at the third point, denoted as   on curve  and the additive inverse of point  , i.e.,   is known as addition operation on points on  and  on elliptic curve. Thus, the addition   Non-singular means that the graph has no cusps, self-intersections, or isolated points.  The smallest number of 1s that sum to 0 is called the characteristic of the finite field, and the characteristic must be a prime number   ) over field K, where  and  is basis of elliptic curve.  It is to note that the addition operation in  is commutative and  is closed under operation is defined as: given three non-zero aligned points on the elliptic curve,   . Consider a point , the line passing through  is the tangent, and the addition of point P to itself is known as the point doubling. For any two points P and Q on elliptic curve , there exists an element , such that . The operation of adding the point  to itself using the group addition law is known as the scalar point multiplication. The smallest positive integer  such that  is known as the order of point .  A finite field is a set of finite number of elements, for example, the set of integer modulo prime number , denoted as  from 0 to   . The order must be prime, otherwise it does not have the multiplicative inverse of each integers which is a necessary condition to form a field. The elliptic curve E over finite field  schoof algorithm compute the order of the prime field in  time. Let  and  be the points on elliptic curve  considered as public key and  is known as private key. The ECC security is defined by the discrete logarithm problem on elliptic curves (ECDLP), that is to compute on given P and Q. The ECDLP creates a platform for constructing the asymmetric key algorithms, for example, elliptic curve digital signature algorithm (ECDSA), elliptic curve Diffie-Hellman key exchange (ECDHE) protocol and elliptic curve ElGamal based encryption.  A torsion group in an elliptic curve plays a primary role in understanding the concept of pairingbased cryptography. For an elliptic curve E, we denote the q-torsion group by  fined as  or torsion point. It can be seen that if  then  and . Thus,  is said to be a subgroup of . Here,  particular field , like  or  and  E where the numerator of  vanishes, and some points of  where the denominator of  vanishes. That means,  has zeros and poles on . One way to keep track of the zeroes and poles of a function is to compute the divide of f, where poles are related to projective coordinates. The divisor associated with  is defined as the formal sum, given in Equation (4).  degree of divisor is defined as the sum of its coefficients, as given in Equation (5).  ,  holds the required properties to form an abelian group structure. For larger prime,  . Here, the point  is said to be a point of finite order  Suppose  is a rational function of two variables  and . There exist some points on where, coefficient , in which many of them are nonzero, so  is the finite sum. The  Now, we define the sum of divisor, as given in Equation (6).  Here,  in pairing is, if we have a devisor we can reconstruct the function. Thus, the devisors are main ingredient to specify the pairing function in pairing-based cryptography, which is computed by the Miller algorithm.  Miller Algorithm. The Miller's algorithm maps two points on an elliptic curve to an element of a finite field. Suppose we have two points on the elliptic curve, says  and Q, then the Miller algorithm computes elemet  such that,  on the finite field. Recall that the points addition (e.g.,  ) and scalar multiplication operations (e.g. ) on the elliptic curve are equivalent to the elements multiplication (e.g., ) and exponentiation operations (e.g.   whose divisor satisfies  Miller’s algorithm is bilinearity. Consider four points    and , and two integers  and , where  and . The Miller algorithm computes  for  and , and  property is defined by Equation (7). could never be possible or too complicated, such as short signature, identity-based encryption, and attribute-based encryption.   is the additive operation on P to itself  times. One of the reason to use the divisor  ) on the field, respectively.  Let  be an integer, which can be written in binary expansion as   , where,  and . The Miller algorithm gives the function    for  and , which are related by . In other words, the bilinearity  Due to this bilinearity property, many cryptographic protocols have been constructed, which   Let , and   and  nonzero, i.e.,   . The Weil pairing satisfies the following properties  2.6. Tate pairing  Tate pairing is computationally more efficient than the Weil pairing, not only because if need one call of Miller’s algorithm, instead of two and have some optimization. Suppose there is an elliptic curve E over  function  as  where   Let an elliptic curve over  Then, the embedding degree is defined as the smallest integer  such that  The embedding degree helps the Weil pairing to map DLP on the elliptic curve  DLP in the field  The MOV algorithm [6] reduces the ECDLP in elliptic curve  Algorithm 2 summarizes the MOV algorithm. where  is a random point such that all elements on right hand side are defined and  •  root of unity: For all , the weil pairing is . • Bilinearity: For ,   and  • Alternating: For all , the weil pairing is , which implies that  • Non-degeneracy: For all , if , then .   on E with divisor  . The Tate pairing of  and  is computed  Let an elliptic curve over  of order  and  be map from  to itself. Then the mapping  is said to be -distortion map for  if it satisfies two properties:  Let an elliptic curve over  order  and  be an -distortion map for . The modified Weil pairing  ing.  Let discuss about some mathematical assumptions. Basically, if we have a pairing then the Decision Diffie-Hellman problem turns out to be easy. For a given   using pairing, it easy to break DDH problem: take two pairings  the property of pairing we get the a equality only if z is equal to x time y, i.e.,  groups. The other thing is that we obtain this reduction from discrete log in G to discrete log in target group  pairing. Now, we discuss the complexity assumptions that come up with it. We get the standard complexity assumptions that we know and the discrete log is a perfectly kind of a requirement for pairing-based groups. We need the Computational Diffie-Hellman (CDH) problem. For a given  pute xyP. Actually, CDH is not hard, it’s an easy problem. We just add one more element to CDH to replace it with a new assumption, Bilinear Diffie-Hellman (BDH) problem [9]. For a  •  for all . •  has  root of unity. That means, for any integer  multiple of ,  . Non-degeneracy is the important property of the modified Weil pair- . Thus, DDH becomes a breakable problem for pairing and we can use it for pairing  So, there are the two immediate properties: bilinearity and degeneracy that we get out of given  finding  tion.  In general, the basic form of pairing is  of prime order q. for the purpose of this paper, we defined three basic types of pairing,  consider that the group  pairing-based cryptographic protocol. In each case, there exists a homomorphism between  and  the groups. If there an efficient homomorphism from  such pairing as Type 2 pairing. The environment where homomorphism in both direction are efficiently computable, we call such pairing as Type 1 pairing. If there is no such efficient computable homomorphism exists in any direction, we call it Type 3 pairing.  have been discussed many pairing-based cryptographic protocols whose security proof does not apply if the protocol is constructing on the pairing of Type 3. Galbraith et al. [10] discuss four assumptions about pairing when they are using for implementing the cryptographic protocols.  simultaneously achieve all these properties. The Type 1 pairing is implementing using supersingular curves over fields of characteristic 2 or 3 and of large prime characteristic. The Type 2 pairing is implementing on ordinary curves, and the homomorphism mapping from  traceable. The Type 3 pairing is on ordinary cures and  trace map. Galbraith presented that there have some implementations of pairing for which the property holds for all security levels. It has to be noted that it is difficult to achieve all features simultaneously.  • Type 1: ; symmetric pairing.  • Type 2:; asymmetric pairing, and there must be an efficiently computable homomorphism Φ: . • Type 3: ; asymmetric pairing, but there is not found any efficiently computable homomorphism Φ: .  This section explore those issues due to which the selection of groups and pairings. We  , but computing such homomorphism is as difficult as computing discrete logarithms in  This pairing type distinction is relevant for the design of cryptographic protocols. There  • Hash to  • Short representation for  elements  • Efficient computable homomorphism from  to  • Generating system parameters that achieve at least k bit of security in time poly- Several researchers believe that few properties can be easily satisfied, but it is not easy to  Nowadays, emerging technologies such as IoT and sensor networks use constrained devices, such as sensor node, RFID tag, and smartcard, that lack the CPU and memory capacity to run traditional cryptographic protocols. To achieve security in such an environment, we construct a secure cryptographic protocol with low-overhead requirements.  environment. One of PBC's practical applications, i.e., an identity-based cryptosystem, is considered an appropriate method in this type of platform. PBC is highly valuable to construct noninteractive key agreement schemes that allow two nodes to share a shared session key without interacting with others. Since sensor networks are highly mobile, the identity-based non-interactive key exchange is applicable in WSN. cryptographic operations, is computationally inefficient. Many cryptographers assume that pairing can easily be implemented in a resources-constrained environment. However, it is not true that it is directly run on sensors. Pairing is used for resource-constrained devices with some assumptions and optimizations. We now discuss such assumptions, consideration, and optimization to use pairing for devices with the least computation and storage capability. tographic protocols when they are designing for constrained-devices.  Identity-based encryption (an application of PBC) avoids PKI, which is required in traditional PKC. Instead, it uses the identification of the node as a public key for encryption. Besides, the integration of PBC and IBC supports a non-interactive key exchange protocol. Due to limited storage and bandwidth, they require a short signature. BLS short signature, one of application of PBC provide a signature of order of 160-bit level of security identical to that of 320-bit DSA signature. Several authors are adopting an online/offline technique that helps in preprocessing the costly independent operations once and stored in node memory before installation. Currently, many authors use TinyTate, TinyPBC and TinyPairing for constructing a protocol for lightweight devices.  Tate pairings is more efficient for fast computation than Weil pairing. Oliveira et al. [11] show that Tate pairing-based protocols are feasible in resource-limited nodes and presented TinyTate that takes 30.21seconds computation time with 1831bytes of RAM and 18384bytes of ROM.  Recently, PBC is becoming popular in achieving tight security in a resource-constrained  As we know, pairing operation, on comparing with ECC-based operations and traditional  We now focus on the following optimization during the construction of pairing-based cryp- • Eliminate unnecessary costly infrastructure.  • Eliminate interaction between two nodes during key sharing.  • Designing a protocol in such a way that costly operations, such as pairing is run on the base station. • Use a signature scheme that outputs the least signature size.  • Preprocessing the costly independent operations.  • Use efficient pairing, such as TinyPairing, TinyPBC and TinyECC, for sensor node, if necessary.  Later, Barreto et al. [12] leads to an Eta-t ( tion. Table 2 shows the implementation of Tate and eta pairing in four wireless sensor nodes: MICA2, TmoteSky, Imote2 (13MHz), and Imote2 (104MHz) run on 8-bit ATmega128L. It has been clear that eta ( space compared with Tate pairing. Xiaokang et al. [13] proposed Tiny pairing in the field of embedding degree 3 which uses new cubing algorithm with faster modular reduction and a faster polynomial multiplication. Tiny pairing computation is faster than Eta-t pairing and other implementations, which 154 bytes RAM and 8576 bytes ROM. Table 3 compares the implementation of different pairings on MICAz.  Pairing (bilinear) map has indeed found a great mathematical tool in cryptography. Cryptographers have pointed out the extension of the degree of linearity, such as trilinear map, k-linear map, would provide, even, a more robust application in cryptography. An open problem in pairing is to extend the bilinear pairing to construct a secure tri-linear and multilinear map. Thus, constructing multilinear map is to construct the group  and  log in G is difficult. There must be an efficiently possible computable non-degenerate n-linear  Mica2 Tate 7.43 60.91 3.39 7.86 62.73 eta-t 2.66 47.91 3.17 7.88 175.65  Tmote sky Tate 4.61 34.9 3.39 3.45 17.7 eta-t 1.71 23.66 4.17 3.68 50.9  Imote2 Tate 0.62 44.4 3.75 31 12.12 (13Mhz) eta-t 0.46 29.5 4.12 31 16.34  Imote2 Tate 0.08 44.4 4.12 66 3.76 (104Mhz) eta-t 0.06 29.55 3.75 66 5.02  Property Tiny Tate [11] Tiny PBC [15] Tiny Pairing [13]  Embedding degree 2 4 3  Security level 40 80 80  Pairing Time (sec) 30.21 5.45 5.3  ROM 18.38 47.5 8.57  RAM 1.83 0.37 0.154  STACK NA 2.87 NA  map  functional and homomorphic encryptions schemes. such as multi-partite Diffie-Hellman key exchange and efficient broadcast encryption. One could say that multilinear maps are at the heart of indistinguishability obfuscation, witness encryption, multiparty key exchanges, among many other applications. However, it was not easy to construct such maps from the realm of algebraic geometry, until 2013, when Garg et al. [17] gives the first reasonable construction of multilinear maps on lattices (GGH13). Later, Coron et al. [18] gave a different construction (CLT13) that relied on the hardness of integer factorization and gave a practical one-round 7-party Diffie-Hellman key exchange protocol. Later Gentry et al. [19] discuss a different graph-induced multilinear encoding scheme from lattices (GGH15).  There have found several attacks, which illustrate that they are incapable of achieving desirable security requirements and could not use to construct secure protocol. Till now, the security of the cryptographic protocols based on such multilinear maps is not clear.  This paper presented an overview of pairing as simple as possible for beginners. It also supports to opt an appropriate pairing among different choices for constructing pairing-based cryptographic protocols. The paper is intended for the beginners to cryptography to understand the elliptic curves and pairing on them. We also discuss the assumptions that to be considered for constructing the protocols. Additionally, we describe the bandwidth and computational efficiency of pairing and recommend some optimization while constructing pairing-based protocols for lightweight devices. Further, we discuss the extension of bilinear pairing to tri-linear and multilinear pairing and conclude that the security of the cryptographic protocols based on such multilinear maps is not clear.  Availability of data and materials. This research did not used any dataset.  Funding. The authors declares that they have no known financial interest or personal relationships that could have appeared to influence the work reported in the paper. Acknowledgements. The authors would like to thank the anonymous reviewers. 